/*
    Utilities to parse params supplied as a map. Values can be defined in terms of
    other values, with modifications. For example:

    @include ag-register-params((
        a: ag-derived(b, $times: c, $plus: 2),
        b: 4,
        c: 10
    ));
    @debug ag-param(a); // outputs 42
*/


// Define a derived parameter. Derived values are lazily evaluated. This function is
// sugar for defining a data structure to record the derived value's parameters.
@function ag-derived($reference-name,
                     $times: null, $divide: null, $plus: null, $minus: null, $opacity: null,
                     $lighten: null, $darken: null, $mix: null) {
    $derived: (
        "--is-ag-derived": true,
        "reference-name": $reference-name
    );
    @if $times != null {
        $derived: map-merge($derived, ("times": $times));
    }
    @if $divide != null {
        $derived: map-merge($derived, ("divide": $divide));
    }
    @if $plus != null {
        $derived: map-merge($derived, ("plus": $plus));
    }
    @if $minus != null {
        $derived: map-merge($derived, ("minus": $minus));
    }
    @if $opacity != null {
        $derived: map-merge($derived, ("opacity": $opacity));
    }
    @if $lighten != null {
        $derived: map-merge($derived, ("lighten": $lighten));
    }
    @if $darken != null {
        $derived: map-merge($derived, ("darken": $darken));
    }
    @if $mix != null {
        $derived: map-merge($derived, ("mix": $mix));
    }
    @return $derived;
}

// Return true if a value is a record returned by ag-derived()
@function -is-ag-derived($value) {
    @return type-of($value) == map and map-get($value, "--is-ag-derived") == true;
}

$-ag-params: null;

// Register a params map globally so that it can be used by ag-param($name)
@mixin ag-register-params($params) {
    @if type-of($params) != map {
        @error "ag-register-params expects a map, got #{type-of($params)} instead (#{inspect($params)})";
    }
    $-ag-params: $params !global;
}

// Use a parameter in SCSS, e.g. `color: ag-param(foreground-color)`
@function ag-param($name) {
    $resolved: ag-param-unchecked($name);
    @if type-of($resolved) == map {
        @error "ag-param(#{$name}) resolved to a map, which is not valid CSS: #{inspect($resolved)}";
    }
    @each $part in $resolved {
        @if type-of($part) == map {
            @error "ag-param(#{$name}) resolved to a list containing a map, which is not valid CSS: #{inspect($resolved)}";
        }
    }
    @return $resolved;
}

// Like ag-param, but allow map values
@function ag-param-unchecked($name) {
    @if $-ag-params == null {
        @error "ag-param() called before ag-register-params";
    }
    @if not map-has-key($-ag-params, $name) {
        @error "ag-param(#{$name}): no such parameter";
    }
    @return -ag-resolve-param-name($-ag-params, $name);
}

//
// PRIVATE IMPLEMENTATION FUNCTIONS
//

@function -ag-resolve-param-name($params, $name) {
    $value: map-get($params, $name);
    @return -ag-resolve-param-value($params, $value);
}

@function -ag-resolve-param-value($params, $input-value) {
    @if type-of($input-value) == list {
        $resolved: $input-value;
        @for $i from 1 through length($input-value) {
            $resolved: set-nth($resolved, $i, -ag-resolve-param-value($params, nth($resolved, $i)));
        }
        @return $resolved;
    }
    @if not -is-ag-derived($input-value) {
        @return $input-value;
    }
    $derived: $input-value;
    $reference-name: map-get($derived, "reference-name");
    @if not map-has-key($params, $reference-name) {
        @error "ag-derived: no such param \"#{$reference-name}\"";
    }
    $resolved: map-get($params, $reference-name);
    $resolved: -ag-resolve-param-value($params, $resolved);

    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "times");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "divide");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "plus");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "minus");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "opacity");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "mix");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "lighten");
    $resolved: -ag-apply-derived-operator($params, $resolved, $derived, "darken");

    @return -ag-resolve-param-value($params, $resolved);
}

@function -ag-apply-derived-operator($params, $lhs, $derived, $operator) {
    $rhs: map-get($derived, $operator);
    @if $rhs == null {
        @return $lhs;
    }
    @if type-of($rhs) == string {
        $rhs: -ag-resolve-param-name($params, $rhs);
    }
    $operator-function: "-ag-operator-function-#{$operator}";
    @if not function-exists($operator-function) {
        @error "No such function #{$operator-function}";
    }
    @return call(get-function($operator-function), $params, $lhs, $rhs);
}

@function -ag-require-type($value, $expected, $context) {
    @if type-of($value) != $expected {
        @error "Expected #{$context} to be a #{$expected} but got a #{type-of($value)} instead (#{inspect($value)})";
    }
    @return $value;
}

@function -ag-operator-function-times($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "number", "value before $times");
    $rhs: -ag-require-type($rhs, "number", "argument to $times");
    @return $lhs * $rhs;
}

@function -ag-operator-function-divide($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "number", "value before $divide");
    $rhs: -ag-require-type($rhs, "number", "argument to $divide");
    @return $lhs / $rhs;
}

@function -ag-operator-function-plus($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "number", "value before $plus");
    $rhs: -ag-require-type($rhs, "number", "argument to $plus");
    @return $lhs + $rhs;
}

@function -ag-operator-function-minus($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "number", "value before $minus");
    $rhs: -ag-require-type($rhs, "number", "argument to $minus");
    @return $lhs - $rhs;
}

@function -ag-operator-function-opacity($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "color", "value before $opacity");
    $rhs: -ag-require-type($rhs, "number", "argument to $opacity");
    @if $rhs < 0 or $rhs > 1 {
        @error "Expected argument to $opacity to be between 0 and 1, got #{inspect($rhs)} instead.";
    }
    @return rgba($lhs, $rhs);
}

@function -ag-operator-function-mix($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "color", "value before $mix");
    @if length($rhs) != 2 {
        @error "Expected argument to $mix to be a 2-item array [color, percentage] but got #{inspect($rhs)}";
    }
    $color: nth($rhs, 1);
    @if type-of($color) == string {
        $color: -ag-resolve-param-name($params, $color);
    }
    $percentage: nth($rhs, 2);
    @if type-of($color) != color or type-of($percentage) != number {
        @error "Expected argument to $mix to be a 2-item array [color, number] but got [#{type-of($color)}, #{type-of($percentage)}]: #{inspect($rhs)}";
    }
    @return mix($color, $lhs, $percentage);
}

@function -ag-operator-function-lighten($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "color", "value before $lighten");
    $rhs: -ag-require-type($rhs, "number", "argument to $lighten");
    @if $rhs < 0 or $rhs > 100 {
        @error "Expected argument to $lighten to be between 0 and 100, got #{inspect($rhs)} instead.";
    }
    @return lighten($lhs, $rhs);
}

@function -ag-operator-function-darken($params, $lhs, $rhs) {
    $lhs: -ag-require-type($lhs, "color", "value before $darken");
    $rhs: -ag-require-type($rhs, "number", "argument to $darken");
    @if $rhs < 0 or $rhs > 100 {
        @error "Expected argument to $darken to be between 0 and 100, got #{inspect($rhs)} instead.";
    }
    @return darken($lhs, $rhs);
}