{
    "callbacks": {
        "meta": {
            "displayName": "Callbacks"
        },
        "isExternalFilterPresent": {
            "description": "Grid calls this method to know if an external filter is present."
        },
        "doesExternalFilterPass": {
            "description": "Should return `true` if external filter passes, otherwise `false`."
        },
        "getRowClass": {
            "description": "Callback version of property `rowClass`. Function should return a string or an array of strings."
        },
        "getRowStyle": {
            "description": "Callback version of property `rowStyle`. Function should return an object of CSS values."
        },
        "getRowHeight": {
            "description": "Callback version of property `rowHeight`. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height."
        },
        "groupRowAggNodes": {
            "description": "Callback for grouping.",
            "more": {
                "name": "Row Grouping",
                "url": "/grouping/#reference-callbacks"
            }
        },
        "getBusinessKeyForNode": {
            "description": "Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key. This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys."
        },
        "isGroupOpenByDefault": {
            "description": "(Client-side Row Model only) Allows groups to be open by default."
        },
        "getChildCount": {
            "description": "(For [Server-Side Row Model](/server-side-model/) only) Allows setting the child count for a group row."
        },
        "processRowPostCreate": {
            "description": "Allows you to process rows after they are created, so you can do final adding of custom attributes etc."
        },
        "getRowNodeId": {
            "description": "Allows you to set the ID for a particular row node based on the data. Useful for selection and server side sorting and filtering for paging and virtual pagination."
        },
        "isFullWidthCell": {
            "description": "Tells the grid if this row should be rendered as [full width](/master-detail/)."
        },
        "isRowSelectable": {
            "description": "Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable.",
            "more": {
                "name": "Specify Selectable Rows",
                "url": "/row-selection/#specify-selectable-rows"
            }
        },
        "isRowMaster": {
            "description": "Callback to be used with [Master Detail](/master-detail/) to determine if a row should be a master row. If `false` is returned no detail row will exist for this row."
        },
        "postSort": {
            "description": "Callback to perform additional sorting after the grid has sorted the rows.",
            "more": {
                "name": "Post Sort",
                "url": "/row-sorting/#post-sort"
            }
        },
        "navigateToNextHeader": {
            "description": "Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused."
        },
        "tabToNextHeader": {
            "description": "Allows overriding the default behaviour for when user hits <kbd>Tab</kbd> key when a header is focused."
        },
        "navigateToNextCell": {
            "description": "Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused."
        },
        "tabToNextCell": {
            "description": "Allows overriding the default behaviour for when user hits <kbd>Tab</kbd> key when a cell is focused."
        },
        "getDocument": {
            "description": "Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports)."
        },
        "getContextMenuItems": {
            "description": "For customising the context menu."
        },
        "getMainMenuItems": {
            "description": "For customising the main 'column header' menu."
        },
        "processCellForClipboard": {
            "description": "Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel."
        },
        "processCellFromClipboard": {
            "description": "Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid."
        },
        "sendToClipboard": {
            "description": "Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself."
        },
        "processSecondaryColDef": {
            "description": "Callback to be used with pivoting, to allow changing the second column definition."
        },
        "processSecondaryColGroupDef": {
            "description": "Callback to be used with pivoting, to allow changing the second column group definition."
        },
        "postProcessPopup": {
            "description": "Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup."
        },
        "defaultGroupSortComparator": {
            "description": "Allows default sorting of groups.",
            "more": {
                "name": "Default Group Order",
                "url": "/grouping/#default-group-order"
            }
        },
        "processChartOptions": {
            "description": "Callback to be used to with charts to override default chart options.",
            "more": {
                "name": "Overriding Chart Options",
                "url": "/integrated-charts-customisation/#example-common-chart-overrides"
            }
        },
        "getChartToolbarItems": {
            "description": "Callback to be used to customise the chart toolbar items.",
            "more": {
                "name": "Configuring Toolbar Items",
                "url": "/integrated-charts-toolbar/#configuring-toolbar-items-and-menu-panels"
            }
        },
        "paginationNumberFormatter": {
            "description": "Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions."
        },
        "getServerSideStoreParams": {
            "description": "(Server-side Row Model only) Allows providing different params for different levels of grouping."
        },
        "isServerSideGroupOpenByDefault": {
            "description": "(Server-side Row Model only) Allows groups to be open by default."
        },
        "isApplyServerSideTransaction": {
            "description": "(Server-side Row Model only) Allows cancelling transactions."
        },
        "isServerSideGroup": {
            "description": "(Server-side Row Model and Tree Data only) Allows specifying which rows are expandable."
        },
        "getServerSideGroupKey": {
            "description": "(Server-side Row Model and Tree Data only) Allows specifying group keys."
        }
    }
}
