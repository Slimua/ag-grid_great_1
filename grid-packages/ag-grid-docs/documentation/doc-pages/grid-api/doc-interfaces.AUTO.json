{
  "ApplyColumnStateParams": {
    "state": {
      "description": "/** The state from `getColumnState` */",
      "type": { "returnType": "ColumnState[]" }
    },
    "applyOrder": {
      "description": "/** Whether column order should be applied */",
      "type": { "returnType": "boolean" }
    },
    "defaultState": {
      "description": "/** State to apply to columns where state is missing for those columns */",
      "type": { "returnType": "ColumnState" }
    }
  },
  "ColumnResizeSet": {
    "columns": { "type": { "returnType": "Column[]" } },
    "ratios": { "type": { "returnType": "number[]" } },
    "width": { "type": { "returnType": "number" } }
  },
  "ColumnState": {
    "colId": {
      "description": "/** ID of the column */",
      "type": { "returnType": "string" }
    },
    "hide": {
      "description": "/** True if the column is hidden */",
      "type": { "returnType": "boolean | null" }
    },
    "width": {
      "description": "/** Width of the column in pixels */",
      "type": { "returnType": "number" }
    },
    "flex": {
      "description": "/** Column's flex if flex is set */",
      "type": { "returnType": "number | null" }
    },
    "sort": {
      "description": "/** Sort applied to the column */",
      "type": { "returnType": "string | null" }
    },
    "sortIndex": {
      "description": "/** The order of the sort, if sorting by many columns */",
      "type": { "returnType": "number | null" }
    },
    "aggFunc": {
      "description": "/** The aggregation function applied */",
      "type": { "returnType": "string | IAggFunc | null" }
    },
    "pivot": {
      "description": "/** True if pivot active */",
      "type": { "returnType": "boolean | null" }
    },
    "pivotIndex": {
      "description": "/** The order of the pivot, if pivoting by many columns */",
      "type": { "returnType": "number | null" }
    },
    "pinned": {
      "description": "/** Set if column is pinned */",
      "type": { "returnType": "boolean | string | 'left' | 'right' | null" }
    },
    "rowGroup": {
      "description": "/** True if row group active */",
      "type": { "returnType": "boolean | null" }
    },
    "rowGroupIndex": {
      "description": "/** The order of the row group, if grouping by many columns */",
      "type": { "returnType": "number | null" }
    }
  },
  "ComponentMetadata": {
    "mandatoryMethodList": { "type": { "returnType": "string[]" } },
    "optionalMethodList": { "type": { "returnType": "string[]" } },
    "functionAdapter": {
      "type": {
        "arguments": { "callback": "any" },
        "returnType": "{ new (): IComponent<any>; }"
      }
    }
  },
  "ComponentType": {
    "propertyName": { "type": { "returnType": "string" } },
    "isCellRenderer": { "type": { "arguments": {}, "returnType": "boolean" } }
  },
  "FrameworkComponentWrapper": {
    "wrap": {
      "type": {
        "arguments": {
          "frameworkComponent": "{ new (): any; } | null",
          "methodList": "string[]",
          "optionalMethodList": "string[]",
          "componentType": "ComponentType",
          "componentName": "string | null"
        },
        "returnType": "A"
      }
    }
  },
  "WrappableInterface": {
    "hasMethod": {
      "type": { "arguments": { "name": "string" }, "returnType": "boolean" }
    },
    "callMethod": {
      "type": {
        "arguments": { "name": "string", "args": "IArguments" },
        "returnType": "void"
      }
    },
    "addMethod": {
      "type": {
        "arguments": { "name": "string", "callback": "Function" },
        "returnType": "void"
      }
    }
  },
  "DefinitionObject": {},
  "UserCompDetails": {
    "componentClass": { "type": { "returnType": "any" } },
    "componentFromFramework": { "type": { "returnType": "boolean" } },
    "params": { "type": { "returnType": "any" } }
  },
  "RegisteredComponent": {
    "component": { "type": { "returnType": "any" } },
    "componentFromFramework": { "type": { "returnType": "boolean" } }
  },
  "DeprecatedComponentName": {
    "propertyHolder": { "type": { "returnType": "string" } },
    "newComponentName": { "type": { "returnType": "string" } }
  },
  "ContextParams": {
    "providedBeanInstances": { "type": { "returnType": "any" } },
    "beanClasses": { "type": { "returnType": "any[]" } },
    "debug": { "type": { "returnType": "boolean" } }
  },
  "ComponentMeta": {
    "componentClass": { "type": { "arguments": {}, "returnType": "Object" } },
    "componentName": { "type": { "returnType": "string" } }
  },
  "ControllerMeta": {
    "controllerClass": { "type": { "arguments": {}, "returnType": "Object" } },
    "controllerName": { "type": { "returnType": "string" } }
  },
  "BeanWrapper": {
    "bean": { "type": { "returnType": "any" } },
    "beanInstance": { "type": { "returnType": "any" } },
    "beanName": { "type": { "returnType": "any" } }
  },
  "ReadyParams": {
    "gridCtrl": { "type": { "returnType": "GridCtrl" } },
    "gridBodyCtrl": { "type": { "returnType": "GridBodyCtrl" } },
    "centerRowContainerCtrl": { "type": { "returnType": "RowContainerCtrl" } },
    "leftRowContainerCtrl": { "type": { "returnType": "RowContainerCtrl" } },
    "rightRowContainerCtrl": { "type": { "returnType": "RowContainerCtrl" } },
    "bottomCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl" }
    },
    "bottomLeftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl" }
    },
    "bottomRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl" }
    },
    "topCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl" }
    },
    "topLeftRowContainerCtrl": { "type": { "returnType": "RowContainerCtrl" } },
    "topRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl" }
    },
    "fakeHScrollCtrl": { "type": { "returnType": "FakeHScrollCtrl" } },
    "gridHeaderCtrl": { "type": { "returnType": "GridHeaderCtrl" } },
    "centerHeaderContainer": { "type": { "returnType": "HeaderRowContainer" } },
    "leftHeaderContainer": { "type": { "returnType": "HeaderRowContainer" } },
    "rightHeaderContainer": { "type": { "returnType": "HeaderRowContainer" } }
  },
  "DragItem": {
    "rowNode": {
      "description": "/** When dragging a row, this contains the row node being dragged\n * When dragging multiple rows, this contains the row that started the drag. */",
      "type": { "returnType": "RowNode" }
    },
    "rowNodes": {
      "description": "/** When dragging multiple rows, this contains all rows being dragged */",
      "type": { "returnType": "RowNode[]" }
    },
    "columns": {
      "description": "/** When dragging columns, this contains the columns being dragged */",
      "type": { "returnType": "Column[]" }
    },
    "visibleState": {
      "description": "/** When dragging columns, this contains the visible state of the columns */",
      "type": { "returnType": "{ [key: string]: boolean }" }
    }
  },
  "DragSourceType": {},
  "DragSource": {
    "type": {
      "description": "/** The type of the drag source, used by the drop target to know where the\n * drag originated from. */",
      "type": { "returnType": "DragSourceType" }
    },
    "eElement": {
      "description": "/** Element which, when dragged, will kick off the DnD process */",
      "type": { "returnType": "HTMLElement" }
    },
    "getDragItem": {
      "description": "/** If eElement is dragged, then the dragItem is the object that gets passed around. */",
      "type": { "arguments": {}, "returnType": "DragItem" }
    },
    "dragItemName": {
      "description": "/** This name appears in the ghost icon when dragging. */",
      "type": { "returnType": "string | (() => string) | null" }
    },
    "defaultIconName": {
      "description": "/** Icon to show when not over a drop zone */",
      "type": { "returnType": "string" }
    },
    "dragSourceDropTarget": {
      "description": "/** The drop target associated with this dragSource. When dragging starts, this\n * target does not get an onDragEnter event. */",
      "type": { "returnType": "DropTarget" }
    },
    "dragSourceDomDataKey": {
      "description": "/** The drag source DOM Data Key, this is useful to detect if the origin grid is the same\n * as the target grid. */",
      "type": { "returnType": "string" }
    },
    "dragStartPixels": {
      "description": "/** After how many pixels of dragging should the drag operation start. Default is 4. */",
      "type": { "returnType": "number" }
    },
    "onDragStarted": {
      "description": "/** Callback for drag started */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "onDragStopped": {
      "description": "/** Callback for drag stopped */",
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "DropTarget": {
    "getContainer": {
      "description": "/** The main container that will get the drop. */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "getSecondaryContainers": {
      "description": "/** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\n * in the header as well as the body (main rows and pinned rows) of the grid. */",
      "type": { "arguments": {}, "returnType": "HTMLElement[][]" }
    },
    "getIconName": {
      "description": "/** Icon to show when drag is over */",
      "type": { "arguments": {}, "returnType": "string | null" }
    },
    "isInterestedIn": {
      "type": {
        "arguments": { "type": "DragSourceType" },
        "returnType": "boolean"
      }
    },
    "onDragEnter": {
      "description": "/** Callback for when drag enters */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "onDragLeave": {
      "description": "/** Callback for when drag leaves */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "onDragging": {
      "description": "/** Callback for when dragging */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "onDragStop": {
      "description": "/** Callback for when drag stops */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "external": { "type": { "returnType": "boolean" } }
  },
  "VerticalDirection": {},
  "HorizontalDirection": {},
  "DraggingEvent": {
    "event": { "type": { "returnType": "MouseEvent" } },
    "x": { "type": { "returnType": "number" } },
    "y": { "type": { "returnType": "number" } },
    "vDirection": { "type": { "returnType": "VerticalDirection | null" } },
    "hDirection": { "type": { "returnType": "HorizontalDirection | null" } },
    "dragSource": { "type": { "returnType": "DragSource" } },
    "dragItem": { "type": { "returnType": "DragItem" } },
    "fromNudge": { "type": { "returnType": "boolean" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "dropZoneTarget": { "type": { "returnType": "HTMLElement" } }
  },
  "DragSourceAndListener": {
    "dragSource": { "type": { "returnType": "DragListenerParams" } },
    "mouseDownListener": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void"
      }
    },
    "touchEnabled": { "type": { "returnType": "boolean" } },
    "touchStartListener": {
      "type": { "returnType": "((touchEvent: TouchEvent) => void) | null" }
    }
  },
  "DragListenerParams": {
    "dragStartPixels": {
      "description": "/** After how many pixels of dragging should the drag operation start. Default is 4px. */",
      "type": { "returnType": "number" }
    },
    "eElement": {
      "description": "/** Dom element to add the drag handling to */",
      "type": { "returnType": "HTMLElement" }
    },
    "skipMouseEvent": {
      "description": "/** Some places may wish to ignore certain events, eg range selection ignores shift clicks */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "boolean"
      }
    },
    "onDragStart": {
      "description": "/** Callback for drag starting */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void"
      }
    },
    "onDragStop": {
      "description": "/** Callback for drag stopping */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void"
      }
    },
    "onDragging": {
      "description": "/** Callback for mouse move while dragging */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void"
      }
    }
  },
  "CellPosition": {
    "column": {
      "description": "/** The grid column */",
      "type": { "returnType": "Column" }
    },
    "rowIndex": {
      "description": "/** A positive number from 0 to n, where n is the last row the grid is rendering\n * or -1 if you want to navigate to the grid header */",
      "type": { "returnType": "number" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or undefined/null (for not pinned) */",
      "type": { "returnType": "string | null" }
    }
  },
  "AbstractColDef": {
    "headerName": {
      "description": "/** The name to render in the column header */",
      "type": { "returnType": "string" }
    },
    "columnGroupShow": {
      "description": "/** Whether to show the column when the group is open / closed. */",
      "type": { "returnType": "string" }
    },
    "headerClass": {
      "description": "/** CSS class for the header */",
      "type": { "returnType": "HeaderClass" }
    },
    "toolPanelClass": {
      "description": "/** CSS class for the toolPanel */",
      "type": { "returnType": "ToolPanelClass" }
    },
    "headerValueGetter": {
      "description": "/** Expression or function to get the cells value. */",
      "type": { "returnType": "string | Function" }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]" }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to true to not include this column in the Columns Tool Panel */",
      "type": { "returnType": "boolean" }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to true to not include this column / filter in the Filters Tool Panel */",
      "type": { "returnType": "boolean" }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string" }
    },
    "tooltipComponent": {
      "type": { "returnType": "{ new(): ITooltipComp; } | string" }
    },
    "tooltipComponentFramework": { "type": { "returnType": "any" } },
    "tooltipComponentParams": { "type": { "returnType": "any" } },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Allows the user to suppress certain keyboard events in the grid header */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
        "returnType": "boolean"
      }
    }
  },
  "ColGroupDef": {
    "children": {
      "description": "/** Columns in this group */",
      "type": { "returnType": "(ColDef | ColGroupDef)[]" }
    },
    "groupId": {
      "description": "/** Group ID */",
      "type": { "returnType": "string" }
    },
    "openByDefault": {
      "description": "/** Open by Default */",
      "type": { "returnType": "boolean" }
    },
    "marryChildren": {
      "description": "/** If true, group cannot be broken up by column moving, child columns will always appear side by side, however you can rearrange child columns within the group */",
      "type": { "returnType": "boolean" }
    },
    "headerGroupComponent": {
      "description": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used* */",
      "type": { "returnType": "string | { new(): IHeaderGroupComp; }" }
    },
    "headerGroupComponentFramework": {
      "description": "/** The custom header group component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default AG Grid is used* */",
      "type": { "returnType": "any" }
    },
    "headerGroupComponentParams": {
      "description": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used* */",
      "type": { "returnType": "any" }
    },
    "headerName": {
      "description": "/** The name to render in the column header */",
      "type": { "returnType": "string" }
    },
    "columnGroupShow": {
      "description": "/** Whether to show the column when the group is open / closed. */",
      "type": { "returnType": "string" }
    },
    "headerClass": {
      "description": "/** CSS class for the header */",
      "type": { "returnType": "HeaderClass" }
    },
    "toolPanelClass": {
      "description": "/** CSS class for the toolPanel */",
      "type": { "returnType": "ToolPanelClass" }
    },
    "headerValueGetter": {
      "description": "/** Expression or function to get the cells value. */",
      "type": { "returnType": "string | Function" }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]" }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to true to not include this column in the Columns Tool Panel */",
      "type": { "returnType": "boolean" }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to true to not include this column / filter in the Filters Tool Panel */",
      "type": { "returnType": "boolean" }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string" }
    },
    "tooltipComponent": {
      "type": { "returnType": "{ new(): ITooltipComp; } | string" }
    },
    "tooltipComponentFramework": { "type": { "returnType": "any" } },
    "tooltipComponentParams": { "type": { "returnType": "any" } },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Allows the user to suppress certain keyboard events in the grid header */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
        "returnType": "boolean"
      }
    }
  },
  "IAggFunc": {},
  "IAggFuncParams": {
    "values": {
      "description": "/** Values to aggregate */",
      "type": { "returnType": "any[]" }
    },
    "column": {
      "description": "/** Column the aggregation function is working on */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef of the aggregation column */",
      "type": { "returnType": "ColDef" }
    },
    "rowNode": {
      "description": "/** The parent RowNode, where the aggregation result will be shown */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** data (if any) of the parent RowNode */",
      "type": { "returnType": "any" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "HeaderClassParams": {
    "api": { "type": { "returnType": "GridApi" } },
    "colDef": { "type": { "returnType": "AbstractColDef" } },
    "column": { "type": { "returnType": "Column | null" } },
    "columnGroup": {
      "type": { "returnType": "ColumnGroup | OriginalColumnGroup | null" }
    },
    "context": { "type": { "returnType": "any" } }
  },
  "HeaderClass": {},
  "ToolPanelClassParams": {
    "api": { "type": { "returnType": "GridApi" } },
    "colDef": { "type": { "returnType": "AbstractColDef" } },
    "column": { "type": { "returnType": "Column | null" } },
    "columnGroup": {
      "type": { "returnType": "ColumnGroup | OriginalColumnGroup | null" }
    },
    "context": { "type": { "returnType": "any" } }
  },
  "ToolPanelClass": {},
  "ColDef": {
    "colId": {
      "description": "/** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n * If both field and colId are missing, a unique ID will be generated.\n * This ID is used to identify the column in the API for sorting, filtering etc. */",
      "type": { "returnType": "string" }
    },
    "sort": {
      "description": "/** If sorting by default, set it here. Set to 'asc' or 'desc' */",
      "type": { "returnType": "string | null" }
    },
    "initialSort": { "type": { "returnType": "string" } },
    "sortIndex": {
      "description": "/** If sorting more than one column by default, specifies order in which the sorting should be applied. */",
      "type": { "returnType": "number | null" }
    },
    "initialSortIndex": { "type": { "returnType": "number" } },
    "sortedAt": {
      "description": "/** @deprecated since v24 - use sortIndex instead\n */",
      "type": { "returnType": "number" }
    },
    "sortingOrder": {
      "description": "/** The sort order, provide an array with any of the following in any order ['asc','desc',null] */",
      "type": { "returnType": "(string | null)[]" }
    },
    "field": {
      "description": "/** The field of the row to get the cells data from */",
      "type": { "returnType": "string" }
    },
    "type": {
      "description": "/** A comma separated string or array of strings containing ColumnType keys which can be used as a template for a column.\n * This helps to reduce duplication of properties when you have a lot of common column properties. */",
      "type": { "returnType": "string | string[]" }
    },
    "hide": {
      "description": "/** Set to true for this column to be hidden. Naturally you might think, it would make more sense to call this field 'visible' and mark it false to hide,\n * however we want all default values to be false and we want columns to be visible by default. */",
      "type": { "returnType": "boolean" }
    },
    "initialHide": { "type": { "returnType": "boolean" } },
    "pinned": {
      "description": "/** Whether this column is pinned or not. */",
      "type": { "returnType": "boolean | string | null" }
    },
    "initialPinned": { "type": { "returnType": "boolean | string" } },
    "tooltipField": {
      "description": "/** The field where we get the tooltip on the object */",
      "type": { "returnType": "string" }
    },
    "tooltipValueGetter": {
      "description": "/** The function used to calculate the tooltip of the object, tooltipField takes precedence */",
      "type": {
        "arguments": { "params": "ITooltipParams" },
        "returnType": "string"
      }
    },
    "valueGetter": {
      "description": "/** Expression or function to get the cells value. */",
      "type": { "returnType": "string | ValueGetterFunc" }
    },
    "filterValueGetter": {
      "description": "/** Expression or function to get the cells value for filtering. */",
      "type": { "returnType": "string | ValueGetterFunc" }
    },
    "valueSetter": {
      "description": "/** If not using a field, then this puts the value into the cell */",
      "type": { "returnType": "string | ValueSetterFunc" }
    },
    "keyCreator": {
      "description": "/** Function to return the key for a value - use this if the value is an object (not a primitive type) and you\n * want to a) group by this field or b) use set filter on this field. */",
      "type": { "arguments": { "value": "any" }, "returnType": "string" }
    },
    "width": {
      "description": "/** Actual width, in pixels, of the cell */",
      "type": { "returnType": "number" }
    },
    "initialWidth": {
      "description": "/** Default width, in pixels, of the cell */",
      "type": { "returnType": "number" }
    },
    "minWidth": {
      "description": "/** Min width, in pixels, of the cell */",
      "type": { "returnType": "number" }
    },
    "maxWidth": {
      "description": "/** Max width, in pixels, of the cell */",
      "type": { "returnType": "number" }
    },
    "flex": {
      "description": "/** Sets the grow factor of a column. It specifies how much of the remaining\n * space should be assigned to the column. */",
      "type": { "returnType": "number" }
    },
    "initialFlex": { "type": { "returnType": "number" } },
    "autoHeight": {
      "description": "/** True if this column should stretch rows height to fit contents */",
      "type": { "returnType": "boolean" }
    },
    "wrapText": {
      "description": "/** True if this column should wrap cell contents - typically used with autoHeight */",
      "type": { "returnType": "boolean" }
    },
    "cellClass": {
      "description": "/** Class to use for the cell. Can be string, array of strings, or function. */",
      "type": { "returnType": "string | string[] | CellClassFunc" }
    },
    "cellStyle": {
      "description": "/** An object of css values. Or a function returning an object of css values. */",
      "type": {
        "returnType": "{ [cssProperty: string]: string } | CellStyleFunc"
      }
    },
    "cellRenderer": {
      "description": "/** A function for rendering a cell. */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "cellRendererFramework": { "type": { "returnType": "any" } },
    "cellRendererParams": { "type": { "returnType": "any" } },
    "cellRendererSelector": {
      "type": { "returnType": "CellRendererSelectorFunc" }
    },
    "cellEditor": {
      "description": "/** Cell editor */",
      "type": { "returnType": "string | { new(): ICellEditorComp; }" }
    },
    "cellEditorFramework": { "type": { "returnType": "any" } },
    "cellEditorParams": { "type": { "returnType": "any" } },
    "cellEditorSelector": {
      "type": { "returnType": "CellEditorSelectorFunc" }
    },
    "cellEditorPopup": { "type": { "returnType": "boolean" } },
    "cellEditorPopupPosition": { "type": { "returnType": "string" } },
    "pinnedRowCellRenderer": {
      "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "pinnedRowCellRendererFramework": {
      "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
      "type": { "returnType": "any" }
    },
    "pinnedRowCellRendererParams": {
      "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
      "type": { "returnType": "any" }
    },
    "valueFormatter": {
      "description": "/** A function to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */",
      "type": { "returnType": "string | ValueFormatterFunc" }
    },
    "pinnedRowValueFormatter": {
      "description": "/** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned.\n */",
      "type": { "returnType": "string | ValueFormatterFunc" }
    },
    "valueParser": {
      "description": "/** Gets called after editing, converts the value in the cell. */",
      "type": { "returnType": "string | ValueParserFunc" }
    },
    "aggFunc": {
      "description": "/** Name of function to use for aggregation. One of [sum,min,max,first,last] or a function. */",
      "type": { "returnType": "string | IAggFunc | null" }
    },
    "initialAggFunc": { "type": { "returnType": "string | IAggFunc" } },
    "allowedAggFuncs": {
      "description": "/** Agg funcs allowed on this column. If missing, all installed agg funcs are allowed.\n * Can be eg ['sum','avg']. This will restrict what the GUI allows to select only. */",
      "type": { "returnType": "string[]" }
    },
    "rowGroupIndex": {
      "description": "/** To group by this column by default, either provide an index (eg rowGroupIndex=1), or set rowGroup=true. */",
      "type": { "returnType": "number | null" }
    },
    "rowGroup": { "type": { "returnType": "boolean" } },
    "initialRowGroupIndex": { "type": { "returnType": "number" } },
    "initialRowGroup": { "type": { "returnType": "boolean" } },
    "showRowGroup": {
      "description": "/** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */",
      "type": { "returnType": "string | boolean" }
    },
    "pivotIndex": {
      "description": "/** To pivot by this column by default, either provide an index (eg pivotIndex=1), or set pivot=true. */",
      "type": { "returnType": "number | null" }
    },
    "pivot": { "type": { "returnType": "boolean" } },
    "initialPivotIndex": { "type": { "returnType": "number" } },
    "initialPivot": { "type": { "returnType": "boolean" } },
    "comparator": {
      "description": "/** Comparator function for custom sorting. */",
      "type": {
        "arguments": {
          "valueA": "any",
          "valueB": "any",
          "nodeA": "RowNode",
          "nodeB": "RowNode",
          "isInverted": "boolean"
        },
        "returnType": "number"
      }
    },
    "equals": {
      "description": "/** Comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed. */",
      "type": {
        "arguments": { "valueA": "any", "valueB": "any" },
        "returnType": "boolean"
      }
    },
    "pivotComparator": {
      "description": "/** Comparator for ordering the pivot columns */",
      "type": {
        "arguments": { "valueA": "string", "valueB": "string" },
        "returnType": "number"
      }
    },
    "checkboxSelection": {
      "description": "/** Set to true to render a selection checkbox in the column. */",
      "type": { "returnType": "boolean | CheckboxSelectionCallback" }
    },
    "headerCheckboxSelection": {
      "description": "/** If true, a 'select all' checkbox will be put into the header */",
      "type": { "returnType": "boolean | HeaderCheckboxSelectionCallback" }
    },
    "headerCheckboxSelectionFilteredOnly": {
      "description": "/** If true, the header checkbox selection will work on filtered items */",
      "type": { "returnType": "boolean" }
    },
    "rowDrag": {
      "description": "/** For grid row dragging, set to true to enable row dragging within the grid */",
      "type": { "returnType": "boolean | RowDragCallback" }
    },
    "rowDragText": {
      "description": "/** To configure the text to be displayed in the floating div while dragging a row when rowDrag is true */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string"
      }
    },
    "dndSource": {
      "description": "/** For native drag and drop, set to true to enable drag source */",
      "type": { "returnType": "boolean | DndSourceCallback" }
    },
    "dndSourceOnRowDrag": {
      "description": "/** For native drag and drop, set to true to allow custom onRowDrag processing */",
      "type": {
        "arguments": {
          "params": "{ rowNode: RowNode; dragEvent: DragEvent; }"
        },
        "returnType": "void"
      }
    },
    "suppressMenu": {
      "description": "/** Set to true if no menu should be shown for this column header. */",
      "type": { "returnType": "boolean" }
    },
    "menuTabs": {
      "description": "/** The menu tabs to show, and in which order, the valid values for this property are:\n * filterMenuTab, generalMenuTab, columnsMenuTab * */",
      "type": { "returnType": "string[]" }
    },
    "sortable": {
      "description": "/** Set to true if sorting allowed for this column. */",
      "type": { "returnType": "boolean" }
    },
    "suppressMovable": {
      "description": "/** Set to true to not allow moving this column via dragging it's header */",
      "type": { "returnType": "boolean" }
    },
    "suppressCellFlash": {
      "description": "/** Set to true to not flash this column for value changes */",
      "type": { "returnType": "boolean" }
    },
    "lockPosition": {
      "description": "/** Set to true to make sure this column is always first. Other columns, if movable, cannot move before this column. */",
      "type": { "returnType": "boolean" }
    },
    "lockVisible": {
      "description": "/** Set to true to block the user showing / hiding the column, the column can only be shown / hidden via definitions or API */",
      "type": { "returnType": "boolean" }
    },
    "lockPinned": {
      "description": "/** Set to true to block the user pinning the column, the column can only be pinned via definitions or API */",
      "type": { "returnType": "boolean" }
    },
    "unSortIcon": {
      "description": "/** Set to true if you want the unsorted icon to be shown when no sort is applied to this column. */",
      "type": { "returnType": "boolean" }
    },
    "suppressSizeToFit": {
      "description": "/** Set to true if you want this columns width to be fixed during 'size to fit' operation. */",
      "type": { "returnType": "boolean" }
    },
    "resizable": {
      "description": "/** Set to true if this column should be resizable */",
      "type": { "returnType": "boolean" }
    },
    "suppressAutoSize": {
      "description": "/** Set to true if you do not want this column to be auto-resizable by double clicking it's edge. */",
      "type": { "returnType": "boolean" }
    },
    "suppressKeyboardEvent": {
      "description": "/** Allows the user to suppress certain keyboard events in the grid cell */",
      "type": {
        "arguments": { "params": "SuppressKeyboardEventParams" },
        "returnType": "boolean"
      }
    },
    "enableRowGroup": {
      "description": "/** If true, GUI will allow adding this columns as a row group */",
      "type": { "returnType": "boolean" }
    },
    "enablePivot": {
      "description": "/** If true, GUI will allow adding this columns as a pivot */",
      "type": { "returnType": "boolean" }
    },
    "enableValue": {
      "description": "/** If true, GUI will allow adding this columns as a value */",
      "type": { "returnType": "boolean" }
    },
    "editable": {
      "description": "/** Set to true if this col is editable, otherwise false. Can also be a function to have different rows editable. */",
      "type": { "returnType": "boolean | EditableCallback" }
    },
    "colSpan": {
      "type": {
        "arguments": { "params": "ColSpanParams" },
        "returnType": "number"
      }
    },
    "rowSpan": {
      "type": {
        "arguments": { "params": "RowSpanParams" },
        "returnType": "number"
      }
    },
    "suppressPaste": {
      "description": "/** Set to true if this col should not be allowed take new values from the clipboard . */",
      "type": { "returnType": "boolean | SuppressPasteCallback" }
    },
    "suppressNavigable": {
      "description": "/** Set to true if this col should not be navigable with the tab key. Can also be a function to have different rows editable. */",
      "type": { "returnType": "boolean | SuppressNavigableCallback" }
    },
    "getQuickFilterText": {
      "description": "/** To create the quick filter text for this column, if toString is not good enough on the value. */",
      "type": {
        "arguments": { "params": "GetQuickFilterTextParams" },
        "returnType": "string"
      }
    },
    "newValueHandler": {
      "description": "/** Callbacks for editing. See editing section for further details.\n * Return true if the update was successful, or false if not.\n * If false, then skips the UI refresh and no events are emitted.\n * Return false if the values are the same (ie no update). */",
      "type": {
        "arguments": { "params": "NewValueParams" },
        "returnType": "boolean"
      }
    },
    "singleClickEdit": {
      "description": "/** If true, this cell will be in editing mode after first click. */",
      "type": { "returnType": "boolean" }
    },
    "template": {
      "description": "/** Cell template to use for cell. Useful for AngularJS cells. */",
      "type": { "returnType": "string" }
    },
    "templateUrl": {
      "description": "/** Cell template URL to load template from to use for cell. Useful for AngularJS cells. */",
      "type": { "returnType": "string" }
    },
    "cellClassRules": {
      "description": "/** Rules for applying css classes */",
      "type": { "returnType": "CellClassRules" }
    },
    "onCellValueChanged": {
      "description": "/** Callbacks for editing.See editing section for further details. */",
      "type": {
        "arguments": { "event": "NewValueParams" },
        "returnType": "void"
      }
    },
    "onCellClicked": {
      "description": "/** Function callback, gets called when a cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent" },
        "returnType": "void"
      }
    },
    "onCellDoubleClicked": {
      "description": "/** Function callback, gets called when a cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent" },
        "returnType": "void"
      }
    },
    "onCellContextMenu": {
      "description": "/** Function callback, gets called when a cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent" },
        "returnType": "void"
      }
    },
    "icons": {
      "description": "/** Icons for this column. Leave blank to use default. */",
      "type": { "returnType": "{ [key: string]: Function | string; }" }
    },
    "enableCellChangeFlash": {
      "description": "/** If true, grid will flash cell after cell is refreshed */",
      "type": { "returnType": "boolean" }
    },
    "pivotValueColumn": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "Column | null" }
    },
    "pivotTotalColumnIds": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]" }
    },
    "headerComponent": {
      "description": "/** The custom header component to be used for rendering the component header. If none specified the default AG Grid is used* */",
      "type": { "returnType": "string | { new(): any; }" }
    },
    "headerComponentFramework": {
      "description": "/** The custom header component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default AG Grid is used* */",
      "type": { "returnType": "any" }
    },
    "headerComponentParams": {
      "description": "/** The custom header component parameters* */",
      "type": { "returnType": "any" }
    },
    "suppressFillHandle": {
      "description": "/** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */",
      "type": { "returnType": "boolean" }
    },
    "floatingFilter": {
      "description": "/** Whether to display a floating filter for this column. */",
      "type": { "returnType": "boolean" }
    },
    "refData": { "type": { "returnType": "{ [key: string]: string; }" } },
    "chartDataType": {
      "description": "/** Defines the column data type used when charting */",
      "type": { "returnType": "'category' | 'series' | 'time' | 'excluded'" }
    },
    "columnsMenuParams": {
      "description": "/** Params to customise the columns menu behaviour and appearance */",
      "type": { "returnType": "ColumnsMenuParams" }
    },
    "headerName": {
      "description": "/** The name to render in the column header */",
      "type": { "returnType": "string" }
    },
    "columnGroupShow": {
      "description": "/** Whether to show the column when the group is open / closed. */",
      "type": { "returnType": "string" }
    },
    "headerClass": {
      "description": "/** CSS class for the header */",
      "type": { "returnType": "HeaderClass" }
    },
    "toolPanelClass": {
      "description": "/** CSS class for the toolPanel */",
      "type": { "returnType": "ToolPanelClass" }
    },
    "headerValueGetter": {
      "description": "/** Expression or function to get the cells value. */",
      "type": { "returnType": "string | Function" }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]" }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to true to not include this column in the Columns Tool Panel */",
      "type": { "returnType": "boolean" }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to true to not include this column / filter in the Filters Tool Panel */",
      "type": { "returnType": "boolean" }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string" }
    },
    "tooltipComponent": {
      "type": { "returnType": "{ new(): ITooltipComp; } | string" }
    },
    "tooltipComponentFramework": { "type": { "returnType": "any" } },
    "tooltipComponentParams": { "type": { "returnType": "any" } },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Allows the user to suppress certain keyboard events in the grid header */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
        "returnType": "boolean"
      }
    },
    "filter": {
      "description": "/** One of the built in filter names: [set, number, text, date], or a filter function */",
      "type": { "returnType": "IFilterType" }
    },
    "filterFramework": { "type": { "returnType": "any" } },
    "filterParams": {
      "description": "/** The filter params are specific to each filter! */",
      "type": { "returnType": "any" }
    },
    "floatingFilterComponent": {
      "description": "/** The custom component to be used for rendering the floating filter. If none is specified the default AG Grid is used. * */",
      "type": { "returnType": "IFloatingFilterType" }
    },
    "floatingFilterComponentParams": { "type": { "returnType": "any" } },
    "floatingFilterComponentFramework": { "type": { "returnType": "any" } }
  },
  "ColumnFunctionCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "CheckboxSelectionCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "CheckboxSelectionCallback": {},
  "RowDragCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "RowDragCallback": {},
  "DndSourceCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "DndSourceCallback": {},
  "EditableCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "EditableCallback": {},
  "SuppressPasteCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "SuppressPasteCallback": {},
  "SuppressNavigableCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "SuppressNavigableCallback": {},
  "HeaderCheckboxSelectionCallbackParams": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "HeaderCheckboxSelectionCallback": {},
  "IsColumnFunc": {},
  "IsColumnFuncParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "GetQuickFilterTextParams": {
    "value": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "data": { "type": { "returnType": "any" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ColumnsMenuParams": {
    "suppressSyncLayoutWithGrid": {
      "description": "/** To suppress updating the layout of columns\n * as they are rearranged in the grid */",
      "type": { "returnType": "boolean" }
    },
    "suppressColumnFilter": {
      "description": "/** To suppress Column Filter section */",
      "type": { "returnType": "boolean" }
    },
    "suppressColumnSelectAll": {
      "description": "/** To suppress Select / Un-select all widget */",
      "type": { "returnType": "boolean" }
    },
    "suppressColumnExpandAll": {
      "description": "/** To suppress Expand / Collapse all widget */",
      "type": { "returnType": "boolean" }
    },
    "contractColumnSelection": {
      "description": "/** By default, column groups start expanded.\n * Pass true to default to contracted groups */",
      "type": { "returnType": "boolean" }
    }
  },
  "BaseColDefParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "BaseWithValueColDefParams": {
    "value": { "type": { "returnType": "any" } },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ValueGetterParams": {
    "getValue": {
      "type": { "arguments": { "field": "string" }, "returnType": "any" }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ValueGetterFunc": {},
  "NewValueParams": {
    "oldValue": { "type": { "returnType": "any" } },
    "newValue": { "type": { "returnType": "any" } },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ValueSetterParams": {
    "oldValue": { "type": { "returnType": "any" } },
    "newValue": { "type": { "returnType": "any" } },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ValueSetterFunc": {},
  "ValueParserParams": {
    "oldValue": { "type": { "returnType": "any" } },
    "newValue": { "type": { "returnType": "any" } },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ValueParserFunc": {},
  "ValueFormatterParams": {
    "value": { "type": { "returnType": "any" } },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ValueFormatterFunc": {},
  "ColSpanParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "RowSpanParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "SuppressKeyboardEventParams": {
    "event": {
      "description": "/** The keyboard event the grid received */",
      "type": { "returnType": "KeyboardEvent" }
    },
    "editing": {
      "description": "/** Whether the cell is editing or not */",
      "type": { "returnType": "boolean" }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any" }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "SuppressHeaderKeyboardEventParams": {
    "column": { "type": { "returnType": "Column | ColumnGroup" } },
    "colDef": { "type": { "returnType": "ColDef | ColGroupDef | null" } },
    "headerRowIndex": {
      "description": "/** The index of the header row of the current focused header */",
      "type": { "returnType": "number" }
    },
    "event": {
      "description": "/** The keyboard event the grid received */",
      "type": { "returnType": "KeyboardEvent" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "CellClassParams": {
    "colDef": {
      "description": "/** The colDef associated with the column for this cell */",
      "type": { "returnType": "ColDef" }
    },
    "value": {
      "description": "/** The value to be rendered */",
      "type": { "returnType": "any" }
    },
    "data": {
      "description": "/** The data associated with this row from rowData */",
      "type": { "returnType": "any" }
    },
    "node": {
      "description": "/** The RowNode associated with this row */",
      "type": { "returnType": "RowNode" }
    },
    "rowIndex": {
      "description": "/** The index of the row */",
      "type": { "returnType": "number" }
    },
    "$scope": {
      "description": "/** If using AngularJs, is the row's child scope, otherwise null */",
      "type": { "returnType": "any" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "CellClassFunc": {},
  "CellStyleFunc": {},
  "CellClassRules": {},
  "SelectorFunc": {},
  "CellRendererSelectorFunc": {},
  "CellEditorSelectorFunc": {},
  "CellRendererSelectorResult": {
    "component": {
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "frameworkComponent": { "type": { "returnType": "any" } },
    "params": { "type": { "returnType": "any" } }
  },
  "CellEditorSelectorResult": {
    "component": {
      "type": { "returnType": "{ new(): ICellEditorComp; } | string" }
    },
    "frameworkComponent": { "type": { "returnType": "any" } },
    "params": { "type": { "returnType": "any" } }
  },
  "ColumnGroupChild": {
    "getUniqueId": { "type": { "arguments": {}, "returnType": "string" } },
    "getActualWidth": { "type": { "arguments": {}, "returnType": "number" } },
    "getMinWidth": {
      "type": { "arguments": {}, "returnType": "number | null | undefined" }
    },
    "getLeft": { "type": { "arguments": {}, "returnType": "number | null" } },
    "getOldLeft": {
      "type": { "arguments": {}, "returnType": "number | null" }
    },
    "getDefinition": {
      "type": { "arguments": {}, "returnType": "AbstractColDef | null" }
    },
    "getColumnGroupShow": {
      "type": { "arguments": {}, "returnType": "string | undefined" }
    },
    "getParent": {
      "type": { "arguments": {}, "returnType": "ColumnGroupChild" }
    },
    "isResizable": { "type": { "arguments": {}, "returnType": "boolean" } },
    "setParent": {
      "type": {
        "arguments": { "parent": "ColumnGroup | null" },
        "returnType": "void"
      }
    },
    "isEmptyGroup": { "type": { "arguments": {}, "returnType": "boolean" } },
    "isMoving": { "type": { "arguments": {}, "returnType": "boolean" } },
    "getPinned": {
      "type": { "arguments": {}, "returnType": "string | null | undefined" }
    },
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async": "boolean",
          "options": "AddEventListenerOptions"
        },
        "returnType": "void"
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async": "boolean",
          "options": "AddEventListenerOptions"
        },
        "returnType": "void"
      }
    }
  },
  "GridOptions": {
    "suppressBrowserResizeObserver": {
      "description": "/** Set once in init, can never change */",
      "type": { "returnType": "boolean" }
    },
    "rowDrag": { "type": { "returnType": "boolean" } },
    "suppressRowDrag": { "type": { "returnType": "boolean" } },
    "rowDragManaged": { "type": { "returnType": "boolean" } },
    "suppressMoveWhenRowDragging": { "type": { "returnType": "boolean" } },
    "enableMultiRowDragging": { "type": { "returnType": "boolean" } },
    "ensureDomOrder": { "type": { "returnType": "boolean" } },
    "suppressAggFilteredOnly": { "type": { "returnType": "boolean" } },
    "showOpenedGroup": { "type": { "returnType": "boolean" } },
    "deltaRowDataMode": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "deltaColumnMode": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyColumnDefOrder": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "maintainColumnOrder": { "type": { "returnType": "boolean" } },
    "immutableData": { "type": { "returnType": "boolean" } },
    "immutableColumns": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "scrollbarWidth": { "type": { "returnType": "number" } },
    "suppressRowClickSelection": { "type": { "returnType": "boolean" } },
    "suppressRowHoverHighlight": { "type": { "returnType": "boolean" } },
    "columnHoverHighlight": { "type": { "returnType": "boolean" } },
    "suppressCellSelection": { "type": { "returnType": "boolean" } },
    "suppressClearOnFillReduction": { "type": { "returnType": "boolean" } },
    "suppressMaintainUnsortedOrder": { "type": { "returnType": "boolean" } },
    "sortingOrder": { "type": { "returnType": "(string | null)[]" } },
    "suppressMultiSort": { "type": { "returnType": "boolean" } },
    "multiSortKey": { "type": { "returnType": "string" } },
    "accentedSort": { "type": { "returnType": "boolean" } },
    "deltaSort": { "type": { "returnType": "boolean" } },
    "suppressHorizontalScroll": { "type": { "returnType": "boolean" } },
    "alwaysShowHorizontalScroll": { "type": { "returnType": "boolean" } },
    "alwaysShowVerticalScroll": { "type": { "returnType": "boolean" } },
    "debounceVerticalScrollbar": { "type": { "returnType": "boolean" } },
    "unSortIcon": { "type": { "returnType": "boolean" } },
    "rowBuffer": { "type": { "returnType": "number" } },
    "tooltipShowDelay": { "type": { "returnType": "number" } },
    "tooltipMouseTrack": { "type": { "returnType": "boolean" } },
    "enableRtl": { "type": { "returnType": "boolean" } },
    "enableBrowserTooltips": { "type": { "returnType": "boolean" } },
    "colResizeDefault": { "type": { "returnType": "string" } },
    "enableCellExpressions": { "type": { "returnType": "boolean" } },
    "enableCellTextSelection": { "type": { "returnType": "boolean" } },
    "enableGroupEdit": { "type": { "returnType": "boolean" } },
    "enterMovesDownAfterEdit": { "type": { "returnType": "boolean" } },
    "enterMovesDown": { "type": { "returnType": "boolean" } },
    "suppressMiddleClickScrolls": { "type": { "returnType": "boolean" } },
    "preventDefaultOnContextMenu": { "type": { "returnType": "boolean" } },
    "suppressPreventDefaultOnMouseWheel": {
      "type": { "returnType": "boolean" }
    },
    "suppressScrollOnNewData": { "type": { "returnType": "boolean" } },
    "suppressMenuHide": { "type": { "returnType": "boolean" } },
    "singleClickEdit": { "type": { "returnType": "boolean" } },
    "suppressClickEdit": { "type": { "returnType": "boolean" } },
    "tabIndex": { "type": { "returnType": "number" } },
    "suppressKeyboardEvent": {
      "description": "/** Allows user to suppress certain keyboard events */",
      "type": {
        "arguments": { "params": "SuppressKeyboardEventParams" },
        "returnType": "boolean"
      }
    },
    "stopEditingWhenGridLosesFocus": {
      "description": "/** @deprecated Use stopEditingWhenCellsLoseFocus instead\n */",
      "type": { "returnType": "boolean" }
    },
    "stopEditingWhenCellsLoseFocus": { "type": { "returnType": "boolean" } },
    "debug": { "type": { "returnType": "boolean" } },
    "icons": {
      "type": { "returnType": "{ [key: string]: Function | string; }" }
    },
    "angularCompileRows": { "type": { "returnType": "boolean" } },
    "angularCompileFilters": { "type": { "returnType": "boolean" } },
    "suppressLoadingOverlay": { "type": { "returnType": "boolean" } },
    "suppressNoRowsOverlay": { "type": { "returnType": "boolean" } },
    "suppressAutoSize": { "type": { "returnType": "boolean" } },
    "autoSizePadding": { "type": { "returnType": "number" } },
    "skipHeaderOnAutoSize": { "type": { "returnType": "boolean" } },
    "animateRows": { "type": { "returnType": "boolean" } },
    "suppressColumnMoveAnimation": { "type": { "returnType": "boolean" } },
    "suppressMovableColumns": { "type": { "returnType": "boolean" } },
    "suppressDragLeaveHidesColumns": { "type": { "returnType": "boolean" } },
    "suppressMakeColumnVisibleAfterUnGroup": {
      "type": { "returnType": "boolean" }
    },
    "suppressParentsInRowNodes": { "type": { "returnType": "boolean" } },
    "suppressFieldDotNotation": { "type": { "returnType": "boolean" } },
    "suppressCopyRowsToClipboard": { "type": { "returnType": "boolean" } },
    "copyHeadersToClipboard": { "type": { "returnType": "boolean" } },
    "clipboardDeliminator": { "type": { "returnType": "string" } },
    "suppressClipboardPaste": { "type": { "returnType": "boolean" } },
    "suppressClipboardApi": { "type": { "returnType": "boolean" } },
    "suppressLastEmptyLineOnPaste": { "type": { "returnType": "boolean" } },
    "suppressAggFuncInHeader": { "type": { "returnType": "boolean" } },
    "suppressAggAtRootLevel": { "type": { "returnType": "boolean" } },
    "suppressFocusAfterRefresh": { "type": { "returnType": "boolean" } },
    "rowModelType": { "type": { "returnType": "string" } },
    "pivotMode": { "type": { "returnType": "boolean" } },
    "pivotColumnGroupTotals": { "type": { "returnType": "string" } },
    "pivotRowTotals": { "type": { "returnType": "string" } },
    "suppressExpandablePivotGroups": { "type": { "returnType": "boolean" } },
    "suppressEnterpriseResetOnNewColumns": {
      "type": { "returnType": "boolean" }
    },
    "enableRangeSelection": { "type": { "returnType": "boolean" } },
    "enableRangeHandle": { "type": { "returnType": "boolean" } },
    "enableFillHandle": { "type": { "returnType": "boolean" } },
    "fillHandleDirection": { "type": { "returnType": "string" } },
    "suppressMultiRangeSelection": { "type": { "returnType": "boolean" } },
    "rowGroupPanelShow": { "type": { "returnType": "string" } },
    "pivotPanelShow": { "type": { "returnType": "string" } },
    "suppressContextMenu": { "type": { "returnType": "boolean" } },
    "allowContextMenuWithControlKey": { "type": { "returnType": "boolean" } },
    "rememberGroupStateWhenNewData": {
      "description": "/** @deprecated - no longer needed, transaction updates keep group state\n */",
      "type": { "returnType": "boolean" }
    },
    "suppressModelUpdateAfterUpdateTransaction": {
      "type": { "returnType": "boolean" }
    },
    "viewportRowModelPageSize": { "type": { "returnType": "number" } },
    "viewportRowModelBufferSize": { "type": { "returnType": "number" } },
    "enableCellChangeFlash": { "type": { "returnType": "boolean" } },
    "cellFlashDelay": { "type": { "returnType": "number" } },
    "cellFadeDelay": { "type": { "returnType": "number" } },
    "allowShowChangeAfterFilter": { "type": { "returnType": "boolean" } },
    "quickFilterText": { "type": { "returnType": "string" } },
    "cacheQuickFilter": { "type": { "returnType": "boolean" } },
    "aggFuncs": { "type": { "returnType": "{ [key: string]: IAggFunc; }" } },
    "suppressColumnVirtualisation": { "type": { "returnType": "boolean" } },
    "functionsReadOnly": { "type": { "returnType": "boolean" } },
    "functionsPassive": { "type": { "returnType": "boolean" } },
    "maxConcurrentDatasourceRequests": { "type": { "returnType": "number" } },
    "maxBlocksInCache": { "type": { "returnType": "number" } },
    "purgeClosedRowNodes": { "type": { "returnType": "boolean" } },
    "domLayout": { "type": { "returnType": "string" } },
    "suppressChangeDetection": { "type": { "returnType": "boolean" } },
    "aggregateOnlyChangedColumns": { "type": { "returnType": "boolean" } },
    "valueCache": { "type": { "returnType": "boolean" } },
    "valueCacheNeverExpires": { "type": { "returnType": "boolean" } },
    "batchUpdateWaitMillis": { "type": { "returnType": "number" } },
    "asyncTransactionWaitMillis": { "type": { "returnType": "number" } },
    "suppressRowTransform": { "type": { "returnType": "boolean" } },
    "suppressSetColumnStateEvents": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "suppressColumnStateEvents": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "allowDragFromColumnsToolPanel": { "type": { "returnType": "boolean" } },
    "suppressMaxRenderedRowRestriction": {
      "type": { "returnType": "boolean" }
    },
    "excludeChildrenWhenTreeDataFiltering": {
      "type": { "returnType": "boolean" }
    },
    "undoRedoCellEditing": { "type": { "returnType": "boolean" } },
    "undoRedoCellEditingLimit": { "type": { "returnType": "number" } },
    "cacheOverflowSize": { "type": { "returnType": "number" } },
    "infiniteInitialRowCount": { "type": { "returnType": "number" } },
    "paginationPageSize": { "type": { "returnType": "number" } },
    "cacheBlockSize": { "type": { "returnType": "number" } },
    "blockLoadDebounceMillis": { "type": { "returnType": "number" } },
    "paginationAutoPageSize": { "type": { "returnType": "boolean" } },
    "suppressPaginationPanel": { "type": { "returnType": "boolean" } },
    "pagination": { "type": { "returnType": "boolean" } },
    "paginateChildRows": { "type": { "returnType": "boolean" } },
    "editType": { "type": { "returnType": "string" } },
    "suppressTouch": { "type": { "returnType": "boolean" } },
    "suppressAsyncEvents": { "type": { "returnType": "boolean" } },
    "embedFullWidthRows": { "type": { "returnType": "boolean" } },
    "deprecatedEmbedFullWidthRows": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "excelStyles": { "type": { "returnType": "ExcelStyle[]" } },
    "floatingFilter": {
      "description": "/** @deprecated Use floatingFilter on the colDef instead\n */",
      "type": { "returnType": "boolean" }
    },
    "suppressExcelExport": { "type": { "returnType": "boolean" } },
    "suppressCsvExport": { "type": { "returnType": "boolean" } },
    "colWidth": { "type": { "returnType": "number" } },
    "minColWidth": { "type": { "returnType": "number" } },
    "maxColWidth": { "type": { "returnType": "number" } },
    "suppressPropertyNamesCheck": { "type": { "returnType": "boolean" } },
    "serverSideSortingAlwaysResets": { "type": { "returnType": "boolean" } },
    "serverSideFilteringAlwaysResets": { "type": { "returnType": "boolean" } },
    "serverSideStoreType": { "type": { "returnType": "ServerSideStoreType" } },
    "getServerSideStoreParams": {
      "type": {
        "arguments": { "params": "GetServerSideStoreParamsParams" },
        "returnType": "ServerSideStoreParams"
      }
    },
    "isServerSideGroupOpenByDefault": {
      "type": {
        "arguments": { "params": "IsServerSideGroupOpenByDefaultParams" },
        "returnType": "boolean"
      }
    },
    "isGroupOpenByDefault": {
      "type": {
        "arguments": { "params": "IsGroupOpenByDefaultParams" },
        "returnType": "boolean"
      }
    },
    "statusBar": {
      "type": { "returnType": "{ statusPanels: StatusPanelDef[]; }" }
    },
    "localeText": { "type": { "returnType": "{ [key: string]: string }" } },
    "localeTextFunc": {
      "type": {
        "arguments": { "key": "string", "defaultValue": "string" },
        "returnType": "string"
      }
    },
    "suppressAnimationFrame": { "type": { "returnType": "boolean" } },
    "defaultColGroupDef": { "type": { "returnType": "Partial<ColGroupDef>" } },
    "defaultColDef": { "type": { "returnType": "ColDef" } },
    "defaultExportParams": {
      "description": "/** @deprecated Use defaultCsvExportParams or defaultExcelExportParams\n */",
      "type": { "returnType": "CsvExportParams | ExcelExportParams" }
    },
    "defaultCsvExportParams": { "type": { "returnType": "CsvExportParams" } },
    "defaultExcelExportParams": {
      "type": { "returnType": "ExcelExportParams" }
    },
    "pivotSuppressAutoColumn": { "type": { "returnType": "boolean" } },
    "autoGroupColumnDef": { "type": { "returnType": "ColDef" } },
    "groupSelectsChildren": { "type": { "returnType": "boolean" } },
    "groupSelectsFiltered": { "type": { "returnType": "boolean" } },
    "groupIncludeFooter": { "type": { "returnType": "boolean" } },
    "groupIncludeTotalFooter": { "type": { "returnType": "boolean" } },
    "groupRemoveSingleChildren": { "type": { "returnType": "boolean" } },
    "groupRemoveLowestSingleChildren": { "type": { "returnType": "boolean" } },
    "groupHideOpenParents": { "type": { "returnType": "boolean" } },
    "groupSuppressBlankHeader": { "type": { "returnType": "boolean" } },
    "groupMaintainOrder": { "type": { "returnType": "boolean" } },
    "groupDisplayType": { "type": { "returnType": "RowGroupingDisplayType" } },
    "groupMultiAutoColumn": {
      "description": "/** @deprecated - Use groupDisplayType = 'multipleColumns' instead\n */",
      "type": { "returnType": "boolean" }
    },
    "groupUseEntireRow": {
      "description": "/** @deprecated - Use groupDisplayType = 'groupRows' instead\n */",
      "type": { "returnType": "boolean" }
    },
    "groupSuppressAutoColumn": {
      "description": "/** @deprecated - Use groupDisplayType = 'custom' instead\n */",
      "type": { "returnType": "boolean" }
    },
    "enableOldSetFilterModel": { "type": { "returnType": "boolean" } },
    "enableCharts": { "type": { "returnType": "boolean" } },
    "context": { "type": { "returnType": "any" } },
    "rowStyle": {
      "type": { "returnType": "{ [cssProperty: string]: string }" }
    },
    "rowClass": { "type": { "returnType": "string | string[]" } },
    "groupDefaultExpanded": { "type": { "returnType": "number" } },
    "alignedGrids": { "type": { "returnType": "GridOptions[]" } },
    "rowSelection": { "type": { "returnType": "string" } },
    "suppressRowDeselection": { "type": { "returnType": "boolean" } },
    "rowDeselection": {
      "description": "/** @deprecated - rowDeselection is now true by default and should be suppressed by using suppressRowDeselection\n */",
      "type": { "returnType": "boolean" }
    },
    "rowMultiSelectWithClick": { "type": { "returnType": "boolean" } },
    "isRowSelectable": { "type": { "returnType": "IsRowSelectable" } },
    "overlayLoadingTemplate": { "type": { "returnType": "string" } },
    "overlayNoRowsTemplate": { "type": { "returnType": "string" } },
    "rowHeight": { "type": { "returnType": "number" } },
    "detailRowHeight": { "type": { "returnType": "number" } },
    "popupParent": { "type": { "returnType": "HTMLElement" } },
    "masterDetail": { "type": { "returnType": "boolean" } },
    "keepDetailRows": { "type": { "returnType": "boolean" } },
    "keepDetailRowsCount": { "type": { "returnType": "number" } },
    "isRowMaster": { "type": { "returnType": "IsRowMaster" } },
    "detailCellRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "detailCellRendererFramework": { "type": { "returnType": "any" } },
    "detailCellRendererParams": { "type": { "returnType": "any" } },
    "detailRowAutoHeight": { "type": { "returnType": "boolean" } },
    "rowData": { "type": { "returnType": "any[]" } },
    "pinnedTopRowData": { "type": { "returnType": "any[]" } },
    "pinnedBottomRowData": { "type": { "returnType": "any[]" } },
    "sideBar": {
      "type": { "returnType": "SideBarDef | string | boolean | null" }
    },
    "columnDefs": { "type": { "returnType": "(ColDef | ColGroupDef)[]" } },
    "columnTypes": { "type": { "returnType": "{ [key: string]: ColDef; }" } },
    "datasource": { "type": { "returnType": "IDatasource" } },
    "viewportDatasource": { "type": { "returnType": "IViewportDatasource" } },
    "serverSideDatasource": {
      "type": { "returnType": "IServerSideDatasource" }
    },
    "headerHeight": { "type": { "returnType": "number" } },
    "pivotHeaderHeight": { "type": { "returnType": "number" } },
    "groupHeaderHeight": { "type": { "returnType": "number" } },
    "pivotGroupHeaderHeight": { "type": { "returnType": "number" } },
    "floatingFiltersHeight": { "type": { "returnType": "number" } },
    "paginationNumberFormatter": {
      "type": {
        "arguments": { "params": "PaginationNumberFormatterParams" },
        "returnType": "string"
      }
    },
    "postProcessPopup": {
      "type": {
        "arguments": { "params": "PostProcessPopupParams" },
        "returnType": "void"
      }
    },
    "frameworkComponents": {
      "type": { "returnType": "{ [p: string]: { new(): any; }; } | any" }
    },
    "components": { "type": { "returnType": "{ [p: string]: any; }" } },
    "groupRowRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "groupRowRendererFramework": { "type": { "returnType": "any" } },
    "groupRowRendererParams": { "type": { "returnType": "any" } },
    "groupRowInnerRenderer": {
      "description": "/** @deprecated - this is now groupRowRendererParams.innerRenderer\n */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "groupRowInnerRendererFramework": {
      "description": "/** @deprecated - this is now groupRowRendererParams.innerRendererFramework\n */",
      "type": { "returnType": "any" }
    },
    "createChartContainer": {
      "type": { "arguments": { "params": "ChartRef" }, "returnType": "void" }
    },
    "fillOperation": {
      "type": {
        "arguments": { "params": "FillOperationParams" },
        "returnType": "any"
      }
    },
    "isExternalFilterPresent": {
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "doesExternalFilterPass": {
      "type": { "arguments": { "node": "RowNode" }, "returnType": "boolean" }
    },
    "getRowStyle": {
      "type": {
        "arguments": { "params": "RowClassParams" },
        "returnType": "{ [cssProperty: string]: string; }"
      }
    },
    "getRowClass": {
      "type": {
        "arguments": { "params": "RowClassParams" },
        "returnType": "string | string[] | undefined"
      }
    },
    "rowClassRules": { "type": { "returnType": "RowClassRules" } },
    "getRowHeight": {
      "type": {
        "arguments": { "params": "RowHeightParams" },
        "returnType": "number | undefined | null"
      }
    },
    "sendToClipboard": {
      "type": {
        "arguments": { "params": "SendToClipboardParams" },
        "returnType": "void"
      }
    },
    "processDataFromClipboard": {
      "type": {
        "arguments": { "params": "ProcessDataFromClipboardParams" },
        "returnType": "string[][] | null"
      }
    },
    "navigateToNextHeader": {
      "type": {
        "arguments": { "params": "NavigateToNextHeaderParams" },
        "returnType": "HeaderPosition"
      }
    },
    "tabToNextHeader": {
      "type": {
        "arguments": { "params": "TabToNextHeaderParams" },
        "returnType": "HeaderPosition"
      }
    },
    "navigateToNextCell": {
      "type": {
        "arguments": { "params": "NavigateToNextCellParams" },
        "returnType": "CellPosition"
      }
    },
    "tabToNextCell": {
      "type": {
        "arguments": { "params": "TabToNextCellParams" },
        "returnType": "CellPosition"
      }
    },
    "getDocument": { "type": { "arguments": {}, "returnType": "Document" } },
    "defaultGroupSortComparator": {
      "description": "/** @deprecated - Use defaultGroupOrderComparator instead\n */",
      "type": {
        "arguments": { "nodeA": "RowNode", "nodeB": "RowNode" },
        "returnType": "number"
      }
    },
    "defaultGroupOrderComparator": {
      "type": {
        "arguments": { "nodeA": "RowNode", "nodeB": "RowNode" },
        "returnType": "number"
      }
    },
    "loadingCellRenderer": {
      "type": { "returnType": "{ new(): ICellRenderer; } | string" }
    },
    "loadingCellRendererFramework": { "type": { "returnType": "any" } },
    "loadingCellRendererParams": { "type": { "returnType": "any" } },
    "loadingOverlayComponent": {
      "type": { "returnType": "{ new(): ILoadingOverlayComp; } | string" }
    },
    "loadingOverlayComponentFramework": { "type": { "returnType": "any" } },
    "loadingOverlayComponentParams": { "type": { "returnType": "any" } },
    "noRowsOverlayComponent": {
      "type": { "returnType": "{ new(): INoRowsOverlayComp; } | string" }
    },
    "noRowsOverlayComponentFramework": { "type": { "returnType": "any" } },
    "noRowsOverlayComponentParams": { "type": { "returnType": "any" } },
    "fullWidthCellRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "fullWidthCellRendererFramework": { "type": { "returnType": "any" } },
    "fullWidthCellRendererParams": { "type": { "returnType": "any" } },
    "isFullWidthCell": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "groupRowAggNodes": {
      "type": { "arguments": { "nodes": "RowNode[]" }, "returnType": "any" }
    },
    "getBusinessKeyForNode": {
      "type": { "arguments": { "node": "RowNode" }, "returnType": "string" }
    },
    "getDataPath": { "type": { "returnType": "GetDataPath" } },
    "treeData": { "type": { "returnType": "boolean" } },
    "treeDataDisplayType": { "type": { "returnType": "TreeDataDisplayType" } },
    "isServerSideGroup": { "type": { "returnType": "IsServerSideGroup" } },
    "isApplyServerSideTransaction": {
      "type": { "returnType": "IsApplyServerSideTransaction" }
    },
    "getServerSideGroupKey": {
      "type": { "returnType": "GetServerSideGroupKey" }
    },
    "getContextMenuItems": { "type": { "returnType": "GetContextMenuItems" } },
    "getMainMenuItems": { "type": { "returnType": "GetMainMenuItems" } },
    "getChartToolbarItems": {
      "type": { "returnType": "GetChartToolbarItems" }
    },
    "getRowNodeId": { "type": { "returnType": "GetRowNodeIdFunc" } },
    "getChildCount": {
      "type": { "arguments": { "dataItem": "any" }, "returnType": "number" }
    },
    "processRowPostCreate": {
      "type": {
        "arguments": { "params": "ProcessRowParams" },
        "returnType": "void"
      }
    },
    "processCellForClipboard": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "any"
      }
    },
    "processHeaderForClipboard": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "any"
      }
    },
    "processCellFromClipboard": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "any"
      }
    },
    "processSecondaryColDef": {
      "type": { "arguments": { "colDef": "ColDef" }, "returnType": "void" }
    },
    "processSecondaryColGroupDef": {
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef" },
        "returnType": "void"
      }
    },
    "postSort": {
      "type": { "arguments": { "nodes": "RowNode[]" }, "returnType": "void" }
    },
    "chartThemes": { "type": { "returnType": "string[]" } },
    "customChartThemes": {
      "type": { "returnType": "{ [name: string]: AgChartTheme }" }
    },
    "chartThemeOverrides": {
      "type": { "returnType": "AgChartThemeOverrides" }
    },
    "processChartOptions": {
      "description": "/** @deprecated\n */",
      "type": {
        "arguments": { "params": "ProcessChartOptionsParams" },
        "returnType": "ChartOptions<any>"
      }
    },
    "allowProcessChartOptions": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "onColumnEverythingChanged": {
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "columnEverythingChanged": {
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "onToolPanelVisibleChanged": {
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "toolPanelVisibleChanged": {
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "onNewColumnsLoaded": {
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "newColumnsLoaded": {
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "onColumnPivotModeChanged": {
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "columnPivotModeChanged": {
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "onColumnRowGroupChanged": {
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "columnRowGroupChanged": {
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "onColumnPivotChanged": {
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "columnPivotChanged": {
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "onGridColumnsChanged": {
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "gridColumnsChanged": {
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "onColumnValueChanged": {
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "columnValueChanged": {
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "onColumnMoved": {
      "type": {
        "arguments": { "event": "ColumnMovedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "columnMoved": {
      "type": {
        "arguments": { "event": "ColumnMovedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "onColumnVisible": {
      "type": {
        "arguments": { "event": "ColumnVisibleEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "columnVisible": {
      "type": {
        "arguments": { "event": "ColumnVisibleEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "onColumnPinned": {
      "type": {
        "arguments": { "event": "ColumnPinnedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "columnPinned": {
      "type": {
        "arguments": { "event": "ColumnPinnedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "onColumnGroupOpened": {
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "columnGroupOpened": {
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "onColumnResized": {
      "type": {
        "arguments": { "event": "ColumnResizedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "columnResized": {
      "type": {
        "arguments": { "event": "ColumnResizedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "onDisplayedColumnsChanged": {
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "displayedColumnsChanged": {
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "onVirtualColumnsChanged": {
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "virtualColumnsChanged": {
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "onRowGroupOpened": {
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "onRowDataChanged": {
      "type": {
        "arguments": { "event": "RowDataChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "rowDataChanged": {
      "type": {
        "arguments": { "event": "RowDataChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "onRowDataUpdated": {
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "rowDataUpdated": {
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "onPinnedRowDataChanged": {
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "pinnedRowDataChanged": {
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "onRangeSelectionChanged": {
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "rangeSelectionChanged": {
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "onColumnRowGroupChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "columnRowGroupChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "onColumnPivotChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "columnPivotChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "onColumnValueChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "columnValueChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "onColumnAggFuncChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "columnAggFuncChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "onModelUpdated": {
      "type": {
        "arguments": { "event": "ModelUpdatedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "modelUpdated": {
      "type": {
        "arguments": { "event": "ModelUpdatedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "onCellKeyDown": {
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent | FullWidthCellKeyDownEvent"
        },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "cellKeyDown": {
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent | FullWidthCellKeyDownEvent"
        },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "onCellKeyPress": {
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent | FullWidthCellKeyPressEvent"
        },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "cellKeyPress": {
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent | FullWidthCellKeyPressEvent"
        },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "onCellClicked": {
      "type": {
        "arguments": { "event": "CellClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "cellClicked": {
      "type": {
        "arguments": { "event": "CellClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "onCellMouseDown": {
      "type": {
        "arguments": { "event": "CellMouseDownEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "cellMouseDown": {
      "type": {
        "arguments": { "event": "CellMouseDownEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "onCellDoubleClicked": {
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "cellDoubleClicked": {
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "onCellContextMenu": {
      "type": {
        "arguments": { "event": "CellContextMenuEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "cellContextMenu": {
      "type": {
        "arguments": { "event": "CellContextMenuEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "onCellValueChanged": {
      "type": {
        "arguments": { "event": "CellValueChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "cellValueChanged": {
      "type": {
        "arguments": { "event": "CellValueChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "onCellMouseOver": {
      "type": {
        "arguments": { "event": "CellMouseOverEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "cellMouseOver": {
      "type": {
        "arguments": { "event": "CellMouseOverEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "onCellMouseOut": {
      "type": {
        "arguments": { "event": "CellMouseOutEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "cellMouseOut": {
      "type": {
        "arguments": { "event": "CellMouseOutEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "onRowValueChanged": {
      "type": {
        "arguments": { "event": "RowValueChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "rowValueChanged": {
      "type": {
        "arguments": { "event": "RowValueChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "onRowEditingStarted": {
      "type": {
        "arguments": { "event": "RowEditingStartedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "rowEditingStarted": {
      "type": {
        "arguments": { "event": "RowEditingStartedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "onRowEditingStopped": {
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "rowEditingStopped": {
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "onCellEditingStarted": {
      "type": {
        "arguments": { "event": "CellEditingStartedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "cellEditingStarted": {
      "type": {
        "arguments": { "event": "CellEditingStartedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "onCellEditingStopped": {
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "cellEditingStopped": {
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "onCellFocused": {
      "type": {
        "arguments": { "event": "CellFocusedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "cellFocused": {
      "type": {
        "arguments": { "event": "CellFocusedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "onRowSelected": {
      "type": {
        "arguments": { "event": "RowSelectedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "rowSelected": {
      "type": {
        "arguments": { "event": "RowSelectedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "onSelectionChanged": {
      "type": {
        "arguments": { "event": "SelectionChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "selectionChanged": {
      "type": {
        "arguments": { "event": "SelectionChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "onFilterOpened": {
      "type": {
        "arguments": { "event": "FilterOpenedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "filterOpened": {
      "type": {
        "arguments": { "event": "FilterOpenedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "onFilterChanged": {
      "type": {
        "arguments": { "event": "FilterChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "filterChanged": {
      "type": {
        "arguments": { "event": "FilterChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "onFilterModified": {
      "type": {
        "arguments": { "event": "FilterModifiedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "filterModified": {
      "type": {
        "arguments": { "event": "FilterModifiedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "onSortChanged": {
      "type": {
        "arguments": { "event": "SortChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "sortChanged": {
      "type": {
        "arguments": { "event": "SortChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "onVirtualRowRemoved": {
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "virtualRowRemoved": {
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "onRowClicked": {
      "type": {
        "arguments": { "event": "RowClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "rowClicked": {
      "type": {
        "arguments": { "event": "RowClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "onRowDoubleClicked": {
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "rowDoubleClicked": {
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "onGridReady": {
      "type": {
        "arguments": { "event": "GridReadyEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "gridReady": {
      "type": {
        "arguments": { "event": "GridReadyEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "onViewportChanged": {
      "type": {
        "arguments": { "event": "ViewportChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "viewportChanged": {
      "type": {
        "arguments": { "event": "ViewportChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "onDragStarted": {
      "type": {
        "arguments": { "event": "DragStartedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "dragStarted": {
      "type": {
        "arguments": { "event": "DragStartedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "onDragStopped": {
      "type": {
        "arguments": { "event": "DragStoppedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "dragStopped": {
      "type": {
        "arguments": { "event": "DragStoppedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "onPaginationChanged": {
      "type": {
        "arguments": { "event": "PaginationChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "paginationChanged": {
      "type": {
        "arguments": { "event": "PaginationChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "onRowDragEnter": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "rowDragEnter": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "onRowDragMove": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "rowDragMove": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "onRowDragLeave": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "rowDragLeave": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "onRowDragEnd": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "rowDragEnd": {
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "onPasteStart": {
      "type": {
        "arguments": { "event": "PasteStartEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "pasteStart": {
      "type": {
        "arguments": { "event": "PasteStartEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "onPasteEnd": {
      "type": {
        "arguments": { "event": "PasteEndEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "pasteEnd": {
      "type": {
        "arguments": { "event": "PasteEndEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "onFillStart": {
      "type": {
        "arguments": { "event": "FillStartEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFillStart" }
    },
    "fillStart": {
      "type": {
        "arguments": { "event": "FillStartEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFillStart" }
    },
    "onFillEnd": {
      "type": {
        "arguments": { "event": "FillEndEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFillEnd" }
    },
    "fillEnd": {
      "type": {
        "arguments": { "event": "FillEndEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFillEnd" }
    },
    "onBodyScroll": {
      "type": {
        "arguments": { "event": "BodyScrollEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "bodyScroll": {
      "type": {
        "arguments": { "event": "BodyScrollEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "onFirstDataRendered": {
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "firstDataRendered": {
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "onExpandOrCollapseAll": {
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "expandOrCollapseAll": {
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "onChartCreated": {
      "type": {
        "arguments": { "event": "ChartCreated" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "chartCreated": {
      "type": {
        "arguments": { "event": "ChartCreated" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "onChartRangeSelectionChanged": {
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "chartRangeSelectionChanged": {
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "onChartOptionsChanged": {
      "type": {
        "arguments": { "event": "ChartOptionsChanged" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "chartOptionsChanged": {
      "type": {
        "arguments": { "event": "ChartOptionsChanged" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "onChartDestroyed": {
      "type": {
        "arguments": { "event": "ChartDestroyed" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "chartDestroyed": {
      "type": {
        "arguments": { "event": "ChartDestroyed" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "onComponentStateChanged": {
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "componentStateChanged": {
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "onAsyncTransactionsFlushed": {
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "asyncTransactionsFlushed": {
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "onGridSizeChanged": {
      "type": {
        "arguments": { "event": "GridSizeChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "gridSizeChanged": {
      "type": {
        "arguments": { "event": "GridSizeChangedEvent" },
        "returnType": "void"
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "api": { "type": { "returnType": "GridApi | null" } },
    "columnApi": { "type": { "returnType": "ColumnApi | null" } }
  },
  "RowGroupingDisplayType": {},
  "TreeDataDisplayType": {},
  "FillOperationParams": {
    "event": {
      "description": "/** The mouse event for the fill operation. */",
      "type": { "returnType": "MouseEvent" }
    },
    "values": {
      "description": "/** The values that have been processed by the fill operation. */",
      "type": { "returnType": "any[]" }
    },
    "rowNode": {
      "description": "/** The RowNode of the current cell being changed. */",
      "type": { "returnType": "RowNode" }
    },
    "column": {
      "description": "/** The Column of the current cell being changed. */",
      "type": { "returnType": "Column" }
    },
    "initialValues": {
      "description": "/** The values that were present before processing started. */",
      "type": { "returnType": "any[]" }
    },
    "currentIndex": {
      "description": "/** The index of the current processed value. */",
      "type": { "returnType": "number" }
    },
    "currentCellValue": {
      "description": "/** The value of the cell being currently processed by the Fill Operation. */",
      "type": { "returnType": "any" }
    },
    "direction": {
      "description": "/** The direction of the Fill Operation. */",
      "type": { "returnType": "'up' | 'down' | 'left' | 'right'" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "GetDataPath": {},
  "IsServerSideGroup": {},
  "IsApplyServerSideTransaction": {},
  "IsApplyServerSideTransactionParams": {
    "transaction": { "type": { "returnType": "ServerSideTransaction" } },
    "parentNode": { "type": { "returnType": "RowNode" } },
    "storeInfo": { "type": { "returnType": "any" } }
  },
  "GetServerSideGroupKey": {},
  "IsRowMaster": {},
  "IsRowSelectable": {},
  "RowClassRules": {},
  "RowClassParams": {
    "data": {
      "description": "/** The data associated with this row from rowData */",
      "type": { "returnType": "any" }
    },
    "node": {
      "description": "/** The RowNode associated with this row */",
      "type": { "returnType": "RowNode" }
    },
    "rowIndex": {
      "description": "/** The index of the row */",
      "type": { "returnType": "number" }
    },
    "$scope": {
      "description": "/** If using AngularJs, is the row's child scope, otherwise null */",
      "type": { "returnType": "any" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "RowHeightParams": {
    "data": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "api": { "type": { "returnType": "GridApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "SendToClipboardParams": { "data": { "type": { "returnType": "string" } } },
  "ProcessChartOptionsParams": {
    "type": { "type": { "returnType": "ChartType" } },
    "options": { "type": { "returnType": "ChartOptions<any>" } }
  },
  "ProcessChartParams": {
    "type": { "type": { "returnType": "ChartType" } },
    "options": { "type": { "returnType": "AgChartOptions" } },
    "chart": { "type": { "returnType": "any" } }
  },
  "GetContextMenuItemsParams": {
    "defaultItems": { "type": { "returnType": "string[] | undefined" } },
    "column": { "type": { "returnType": "Column" } },
    "node": { "type": { "returnType": "RowNode" } },
    "value": { "type": { "returnType": "any" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "GetContextMenuItems": {},
  "GetChartToolbarItemsParams": {
    "defaultItems": { "type": { "returnType": "ChartMenuOptions[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "GetChartToolbarItems": {},
  "MenuItemDef": {
    "name": {
      "description": "/** Name of the menu item */",
      "type": { "returnType": "string" }
    },
    "disabled": {
      "description": "/** It the item should be enabled / disabled */",
      "type": { "returnType": "boolean" }
    },
    "shortcut": {
      "description": "/** Shortcut (just display text, saying the shortcut here does nothing) */",
      "type": { "returnType": "string" }
    },
    "action": {
      "description": "/** Function that gets executed when item is chosen */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "checked": {
      "description": "/** Set to true to provide a check beside the option */",
      "type": { "returnType": "boolean" }
    },
    "icon": {
      "description": "/** The icon to display, either a DOM element or HTML string */",
      "type": { "returnType": "HTMLElement | string" }
    },
    "subMenu": {
      "description": "/** If this item is a sub menu, contains a list of menu item definitions */",
      "type": { "returnType": "(MenuItemDef | string)[] | IComponent<any>" }
    },
    "cssClasses": {
      "description": "/** CSS classes to apply to the menu item */",
      "type": { "returnType": "string[]" }
    },
    "tooltip": {
      "description": "/** Tooltip for the menu item */",
      "type": { "returnType": "string" }
    }
  },
  "GetMainMenuItemsParams": {
    "column": {
      "description": "/** The column that was clicked */",
      "type": { "returnType": "Column" }
    },
    "defaultItems": {
      "description": "/** List of the items that would be displayed by default */",
      "type": { "returnType": "string[]" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "GetMainMenuItems": {},
  "GetRowNodeIdFunc": {},
  "ProcessRowParams": {
    "eRow": { "type": { "returnType": "HTMLElement" } },
    "ePinnedLeftRow": { "type": { "returnType": "HTMLElement" } },
    "ePinnedRightRow": { "type": { "returnType": "HTMLElement" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "node": { "type": { "returnType": "RowNode" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "addRenderedRowListener": {
      "type": {
        "arguments": { "eventType": "string", "listener": "Function" },
        "returnType": "void"
      }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "NavigateToNextHeaderParams": {
    "key": {
      "description": "/** The key for the arrow key pressed,\n * left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */",
      "type": { "returnType": "string" }
    },
    "previousHeaderPosition": {
      "description": "/** The header that currently has focus */",
      "type": { "returnType": "HeaderPosition | null" }
    },
    "nextHeaderPosition": {
      "description": "/** The header the grid would normally pick as the next header for this navigation */",
      "type": { "returnType": "HeaderPosition | null" }
    },
    "headerRowCount": {
      "description": "/** The number of header rows present in the grid */",
      "type": { "returnType": "number" }
    },
    "event": { "type": { "returnType": "KeyboardEvent" } }
  },
  "TabToNextHeaderParams": {
    "backwards": {
      "description": "/** True if the Shift key is also down */",
      "type": { "returnType": "boolean" }
    },
    "previousHeaderPosition": {
      "description": "/** The header that currently has focus */",
      "type": { "returnType": "HeaderPosition | null" }
    },
    "nextHeaderPosition": {
      "description": "/** The header the grid would normally pick as the next header for this navigation */",
      "type": { "returnType": "HeaderPosition | null" }
    },
    "headerRowCount": {
      "description": "/** The number of header rows present in the grid */",
      "type": { "returnType": "number" }
    }
  },
  "NavigateToNextCellParams": {
    "key": {
      "description": "/** The keycode for the arrow key pressed:\n * left = 37, up = 38, right = 39, down = 40 */",
      "type": { "returnType": "number" }
    },
    "previousCellPosition": {
      "description": "/** The cell that currently has focus */",
      "type": { "returnType": "CellPosition" }
    },
    "nextCellPosition": {
      "description": "/** The cell the grid would normally pick as the next cell for navigation */",
      "type": { "returnType": "CellPosition | null" }
    },
    "event": { "type": { "returnType": "KeyboardEvent | null" } }
  },
  "TabToNextCellParams": {
    "backwards": {
      "description": "/** True if the Shift key is also down */",
      "type": { "returnType": "boolean" }
    },
    "editing": {
      "description": "/** True if the current cell is editing\n * (you may want to skip cells that are not editable, as the grid will enter the next cell in editing mode also if tabbing) */",
      "type": { "returnType": "boolean" }
    },
    "previousCellPosition": {
      "description": "/** The cell that currently has focus */",
      "type": { "returnType": "CellPosition" }
    },
    "nextCellPosition": {
      "description": "/** The cell the grid would normally pick as the next cell for navigation */",
      "type": { "returnType": "CellPosition" }
    }
  },
  "PostProcessPopupParams": {
    "column": {
      "description": "/** If popup is for a column, this gives the Column */",
      "type": { "returnType": "Column | null" }
    },
    "rowNode": {
      "description": "/** If popup is for a row, this gives the RowNode */",
      "type": { "returnType": "RowNode" }
    },
    "ePopup": {
      "description": "/** The popup we are showing */",
      "type": { "returnType": "HTMLElement" }
    },
    "type": {
      "description": "/** The different types are:\n * 'contextMenu', 'columnMenu', 'aggFuncSelect', 'popupCellEditor' */",
      "type": { "returnType": "string" }
    },
    "eventSource": {
      "description": "/** If the popup is as a result of a button click (eg menu button),\n * this is the component that the user clicked */",
      "type": { "returnType": "HTMLElement | null" }
    },
    "mouseEvent": {
      "description": "/** If the popup is as a result of a click or touch,\n * this is the event - eg user showing context menu */",
      "type": { "returnType": "MouseEvent | Touch | null" }
    }
  },
  "PaginationNumberFormatterParams": {
    "value": { "type": { "returnType": "number" } }
  },
  "ProcessDataFromClipboardParams": {
    "data": {
      "description": "/** 2D array of all cells from the clipboard */",
      "type": { "returnType": "string[][]" }
    }
  },
  "ChartRef": {
    "chartId": { "type": { "returnType": "string" } },
    "chart": { "type": { "returnType": "any" } },
    "chartElement": { "type": { "returnType": "HTMLElement" } },
    "destroyChart": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "ServerSideStoreType": {},
  "ServerSideStoreParams": {
    "storeType": { "type": { "returnType": "ServerSideStoreType" } },
    "maxBlocksInCache": { "type": { "returnType": "number" } },
    "cacheBlockSize": { "type": { "returnType": "number" } }
  },
  "GetServerSideStoreParamsParams": {
    "level": { "type": { "returnType": "number" } },
    "parentRowNode": { "type": { "returnType": "RowNode" } },
    "rowGroupColumns": { "type": { "returnType": "Column[]" } },
    "pivotColumns": { "type": { "returnType": "Column[]" } },
    "pivotMode": { "type": { "returnType": "boolean" } }
  },
  "IsServerSideGroupOpenByDefaultParams": {
    "data": { "type": { "returnType": "any" } },
    "rowNode": { "type": { "returnType": "RowNode" } }
  },
  "IsGroupOpenByDefaultParams": {
    "rowNode": { "type": { "returnType": "RowNode" } },
    "rowGroupColumn": { "type": { "returnType": "Column" } },
    "level": { "type": { "returnType": "number" } },
    "field": { "type": { "returnType": "string" } },
    "key": { "type": { "returnType": "string" } }
  },
  "OriginalColumnGroupChild": {
    "isVisible": { "type": { "arguments": {}, "returnType": "boolean" } },
    "getColumnGroupShow": {
      "type": { "arguments": {}, "returnType": "string | undefined" }
    },
    "getId": { "type": { "arguments": {}, "returnType": "string" } },
    "setOriginalParent": {
      "type": {
        "arguments": { "originalParent": "OriginalColumnGroup | null" },
        "returnType": "void"
      }
    }
  },
  "SetSelectedParams": {
    "newValue": { "type": { "returnType": "boolean" } },
    "clearSelection": { "type": { "returnType": "boolean" } },
    "suppressFinishActions": { "type": { "returnType": "boolean" } },
    "rangeSelect": { "type": { "returnType": "boolean" } },
    "groupSelectsFiltered": { "type": { "returnType": "boolean" } }
  },
  "RowNodeEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "DataChangedEvent": {
    "oldData": { "type": { "returnType": "any" } },
    "newData": { "type": { "returnType": "any" } },
    "update": { "type": { "returnType": "boolean" } },
    "node": { "type": { "returnType": "RowNode" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellChangedEvent": {
    "column": { "type": { "returnType": "Column" } },
    "newValue": { "type": { "returnType": "any" } },
    "oldValue": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowHighlightPosition": {},
  "RowPosition": {
    "rowIndex": {
      "description": "/** A positive number from 0 to n, where n is the last row the grid is rendering\n * or -1 if you want to navigate to the grid header */",
      "type": { "returnType": "number" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or undefined/null (for not pinned) */",
      "type": { "returnType": "string | null" }
    }
  },
  "ToolPanelDef": {
    "id": { "type": { "returnType": "string" } },
    "labelDefault": { "type": { "returnType": "string" } },
    "labelKey": { "type": { "returnType": "string" } },
    "minWidth": { "type": { "returnType": "number" } },
    "maxWidth": { "type": { "returnType": "number" } },
    "width": { "type": { "returnType": "number" } },
    "iconKey": { "type": { "returnType": "string" } },
    "toolPanel": {
      "type": { "returnType": "{ new(): IToolPanelComp } | string" }
    },
    "toolPanelFramework": { "type": { "returnType": "any" } },
    "toolPanelParams": { "type": { "returnType": "any" } }
  },
  "SideBarDef": {
    "toolPanels": { "type": { "returnType": "(ToolPanelDef | string) []" } },
    "defaultToolPanel": { "type": { "returnType": "string" } },
    "hiddenByDefault": { "type": { "returnType": "boolean" } },
    "position": { "type": { "returnType": "'left' | 'right'" } }
  },
  "SASS_PROPERTIES": {},
  "HardCodedSize": {},
  "ModelUpdatedEvent": {
    "animate": {
      "description": "/** If true, the grid will try and animate the rows to the new positions */",
      "type": { "returnType": "boolean | undefined" }
    },
    "keepRenderedRows": {
      "description": "/** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n * it's the same data but sorted or filtered, in which case this is true, and rows\n * can animate around (eg rowNode id 24 is the same row node as last time). */",
      "type": { "returnType": "boolean | undefined" }
    },
    "newData": {
      "description": "/** If true, then this update was a result of setRowData() getting called. This\n * gets the grid to scroll to the top again. */",
      "type": { "returnType": "boolean | undefined" }
    },
    "newPage": {
      "description": "/** True when pagination and a new page is navigated to. */",
      "type": { "returnType": "boolean" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "PaginationChangedEvent": {
    "animate": {
      "description": "/** True if rows were animated to new position */",
      "type": { "returnType": "boolean" }
    },
    "keepRenderedRows": {
      "description": "/** True if rows were kept (otherwise complete redraw) */",
      "type": { "returnType": "boolean" }
    },
    "newData": {
      "description": "/** True if data was new (i.e user set new data) */",
      "type": { "returnType": "boolean" }
    },
    "newPage": {
      "description": "/** True if user went to a new page */",
      "type": { "returnType": "boolean" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "AgEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "AgGridEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ToolPanelVisibleChangedEvent": {
    "source": { "type": { "returnType": "string | undefined" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnPivotModeChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "VirtualColumnsChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnEverythingChangedEvent": {
    "source": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "NewColumnsLoadedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "GridColumnsChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "DisplayedColumnsChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDataChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDataUpdatedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "PinnedRowDataChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "SelectionChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FilterChangedEvent": {
    "afterDataChange": {
      "description": "/** True if the filter was changed as a result of data changing */",
      "type": { "returnType": "boolean" }
    },
    "afterFloatingFilter": {
      "description": "/** True if filter was changed via floating filter */",
      "type": { "returnType": "boolean" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FilterModifiedEvent": {
    "filterInstance": { "type": { "returnType": "IFilterComp" } },
    "column": { "type": { "returnType": "Column" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FilterOpenedEvent": {
    "column": {
      "description": "/** Column / OriginalColumnGroup that contains the filter */",
      "type": { "returnType": "Column | OriginalColumnGroup" }
    },
    "source": {
      "description": "/** Source of the open request */",
      "type": { "returnType": "FilterRequestSource" }
    },
    "eGui": {
      "description": "/** Parent element of the filter */",
      "type": { "returnType": "HTMLElement" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "SortChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "GridReadyEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "DisplayedColumnsWidthChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnHoverChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "BodyHeightChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ComponentStateChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnPanelItemDragStartEvent": {
    "column": { "type": { "returnType": "Column | OriginalColumnGroup" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnPanelItemDragEndEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "DragEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "HTMLElement" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "DragStartedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "HTMLElement" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "DragStoppedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "HTMLElement" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "CheckboxChangedEvent": {
    "id": { "type": { "returnType": "string" } },
    "name": { "type": { "returnType": "string" } },
    "selected": { "type": { "returnType": "boolean" } },
    "previousValue": { "type": { "returnType": "boolean | undefined" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "GridSizeChangedEvent": {
    "clientWidth": {
      "description": "/** The grid's DIV's clientWidth */",
      "type": { "returnType": "number" }
    },
    "clientHeight": {
      "description": "/** The grid's DIV's clientHeight */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDragEvent": {
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode" }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]" }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over. */",
      "type": { "returnType": "number" }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either 'up', 'down' or null. */",
      "type": { "returnType": "string" }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent" }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over. */",
      "type": { "returnType": "number" }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over. */",
      "type": { "returnType": "RowNode" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDragEnterEvent": {
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode" }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]" }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over. */",
      "type": { "returnType": "number" }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either 'up', 'down' or null. */",
      "type": { "returnType": "string" }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent" }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over. */",
      "type": { "returnType": "number" }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over. */",
      "type": { "returnType": "RowNode" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDragEndEvent": {
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode" }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]" }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over. */",
      "type": { "returnType": "number" }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either 'up', 'down' or null. */",
      "type": { "returnType": "string" }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent" }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over. */",
      "type": { "returnType": "number" }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over. */",
      "type": { "returnType": "RowNode" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDragMoveEvent": {
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode" }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]" }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over. */",
      "type": { "returnType": "number" }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either 'up', 'down' or null. */",
      "type": { "returnType": "string" }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent" }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over. */",
      "type": { "returnType": "number" }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over. */",
      "type": { "returnType": "RowNode" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDragLeaveEvent": {
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode" }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]" }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over. */",
      "type": { "returnType": "number" }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either 'up', 'down' or null. */",
      "type": { "returnType": "string" }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent" }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over. */",
      "type": { "returnType": "number" }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over. */",
      "type": { "returnType": "RowNode" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "PasteStartEvent": {
    "source": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "PasteEndEvent": {
    "source": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FillStartEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FillEndEvent": {
    "initialRange": { "type": { "returnType": "CellRange" } },
    "finalRange": { "type": { "returnType": "CellRange" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ViewportChangedEvent": {
    "firstRow": {
      "description": "/** Index of the first rendered row */",
      "type": { "returnType": "number" }
    },
    "lastRow": {
      "description": "/** Index of the last rendered row */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FirstDataRenderedEvent": {
    "firstRow": {
      "description": "/** Index of the first rendered row */",
      "type": { "returnType": "number" }
    },
    "lastRow": {
      "description": "/** Index of the last rendered row */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RangeSelectionChangedEvent": {
    "id": { "type": { "returnType": "string" } },
    "finished": { "type": { "returnType": "boolean" } },
    "started": { "type": { "returnType": "boolean" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ChartCreated": {
    "chartId": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ChartRangeSelectionChanged": {
    "id": { "type": { "returnType": "string" } },
    "chartId": { "type": { "returnType": "string" } },
    "cellRange": { "type": { "returnType": "CellRangeParams" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ChartOptionsChanged": {
    "chartId": { "type": { "returnType": "string" } },
    "chartType": { "type": { "returnType": "ChartType" } },
    "chartThemeName": { "type": { "returnType": "string" } },
    "chartOptions": { "type": { "returnType": "ChartOptions<any>" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ChartDestroyed": {
    "chartId": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnGroupOpenedEvent": {
    "columnGroup": { "type": { "returnType": "OriginalColumnGroup" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ItemsAddedEvent": {
    "items": { "type": { "returnType": "RowNode[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ScrollDirection": {},
  "BodyScrollEvent": {
    "direction": { "type": { "returnType": "ScrollDirection" } },
    "left": { "type": { "returnType": "number" } },
    "top": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FlashCellsEvent": {
    "cells": { "type": { "returnType": "any" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "PaginationPixelOffsetChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellFocusedEvent": {
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null" }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | null" }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "string | null" }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean" }
    },
    "forceBrowserFocus": {
      "description": "/** Whether browser focus is also set (false when editing) */",
      "type": { "returnType": "boolean" }
    },
    "floating": { "type": { "returnType": "string | null" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ExpandCollapseAllEvent": {
    "source": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnEventType": {},
  "ColumnEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnResizedEvent": {
    "finished": {
      "description": "/** Set to true for last event in a sequence of move events */",
      "type": { "returnType": "boolean" }
    },
    "flexColumns": {
      "description": "/** Any columns resized due to flex */",
      "type": { "returnType": "Column[] | null" }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnPivotChangedEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnRowGroupChangedEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnValueChangedEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnMovedEvent": {
    "toIndex": {
      "description": "/** The position the column was moved to */",
      "type": { "returnType": "number" }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnVisibleEvent": {
    "visible": {
      "description": "/** True if column was set to visible, false if set to hide */",
      "type": { "returnType": "boolean" }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnPinnedEvent": {
    "pinned": {
      "description": "/** Either 'left', 'right', or null (it not pinned) */",
      "type": { "returnType": "string | null" }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null" }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null" }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowGroupOpenedEvent": {
    "expanded": {
      "description": "/** True if the group is expanded. */",
      "type": { "returnType": "boolean" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowValueChangedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowSelectedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "VirtualRowRemovedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowClickedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowDoubleClickedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowEditingStartedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowEditingStoppedEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FullWidthCellKeyDownEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "FullWidthCellKeyPressEvent": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellKeyDownEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellKeyPressEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellClickedEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellMouseDownEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellDoubleClickedEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellMouseOverEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellMouseOutEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellContextMenuEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellEditingStartedEvent": {
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellEditingStoppedEvent": {
    "oldValue": {
      "description": "/** The old value before editing */",
      "type": { "returnType": "any" }
    },
    "newValue": {
      "description": "/** The new value after editing */",
      "type": { "returnType": "any" }
    },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "CellValueChangedEvent": {
    "oldValue": { "type": { "returnType": "any" } },
    "newValue": { "type": { "returnType": "any" } },
    "source": { "type": { "returnType": "string | undefined" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any" }
    },
    "node": { "type": { "returnType": "RowNode" } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null" }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "AsyncTransactionsFlushed": {
    "results": {
      "type": {
        "returnType": "(RowNodeTransaction | ServerSideTransactionResult) []"
      }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnRequestEvent": {
    "columns": { "type": { "returnType": "Column[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnRowGroupChangeRequestEvent": {
    "columns": { "type": { "returnType": "Column[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnPivotChangeRequestEvent": {
    "columns": { "type": { "returnType": "Column[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnValueChangeRequestEvent": {
    "columns": { "type": { "returnType": "Column[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColumnAggFuncChangeRequestEvent": {
    "aggFunc": { "type": { "returnType": "any" } },
    "columns": { "type": { "returnType": "Column[]" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ScrollVisibilityChangedEvent": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "StoreUpdatedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "LeftPinnedWidthChangedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RightPinnedWidthChangedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "RowContainerHeightChanged": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "DisplayedRowsChangedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "IFilterLocaleText": {
    "applyFilter": { "type": { "returnType": "string" } },
    "clearFilter": { "type": { "returnType": "string" } },
    "resetFilter": { "type": { "returnType": "string" } },
    "cancelFilter": { "type": { "returnType": "string" } },
    "filterOoo": { "type": { "returnType": "string" } },
    "empty": { "type": { "returnType": "string" } },
    "equals": { "type": { "returnType": "string" } },
    "notEqual": { "type": { "returnType": "string" } },
    "lessThan": { "type": { "returnType": "string" } },
    "greaterThan": { "type": { "returnType": "string" } },
    "inRange": { "type": { "returnType": "string" } },
    "inRangeStart": { "type": { "returnType": "string" } },
    "inRangeEnd": { "type": { "returnType": "string" } },
    "lessThanOrEqual": { "type": { "returnType": "string" } },
    "greaterThanOrEqual": { "type": { "returnType": "string" } },
    "contains": { "type": { "returnType": "string" } },
    "notContains": { "type": { "returnType": "string" } },
    "startsWith": { "type": { "returnType": "string" } },
    "endsWith": { "type": { "returnType": "string" } },
    "andCondition": { "type": { "returnType": "string" } },
    "orCondition": { "type": { "returnType": "string" } },
    "dateFormatOoo": { "type": { "returnType": "string" } }
  },
  "IFilterTitleLocaleText": {
    "textFilter": { "type": { "returnType": "string" } },
    "numberFilter": { "type": { "returnType": "string" } },
    "dateFilter": { "type": { "returnType": "string" } },
    "setFilter": { "type": { "returnType": "string" } }
  },
  "FilterRequestSource": {},
  "FilterWrapper": {
    "compiledElement": { "type": { "returnType": "any" } },
    "column": { "type": { "returnType": "Column" } },
    "filterPromise": {
      "type": { "returnType": "AgPromise<IFilterComp> | null" }
    },
    "scope": { "type": { "returnType": "any" } },
    "guiPromise": { "type": { "returnType": "AgPromise<HTMLElement | null>" } }
  },
  "IFloatingFilterParams": {
    "column": { "type": { "returnType": "Column" } },
    "filterParams": { "type": { "returnType": "IFilterParams" } },
    "currentParentModel": { "type": { "arguments": {}, "returnType": "any" } },
    "parentFilterInstance": {
      "type": {
        "arguments": { "callback": "(filterInstance: IFilterComp) => void" },
        "returnType": "void"
      }
    },
    "showParentFilter": { "type": { "arguments": {}, "returnType": "void" } },
    "suppressFilterButton": { "type": { "returnType": "boolean" } },
    "api": { "type": { "returnType": "GridApi" } },
    "onFloatingFilterChanged": {
      "description": "/** @deprecated in v21, use parentFilterInstance() callback instead and tell filter directly\n */",
      "type": { "arguments": { "change": "any" }, "returnType": "boolean" }
    }
  },
  "IFloatingFilter": {
    "onParentModelChanged": {
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent": "FilterChangedEvent | null"
        },
        "returnType": "void"
      }
    }
  },
  "IFloatingFilterComp": {
    "onParentModelChanged": {
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent": "FilterChangedEvent | null"
        },
        "returnType": "void"
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IFloatingFilterParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "BaseFloatingFilterChange": {
    "model": { "type": { "returnType": "ProvidedFilterModel" } },
    "apply": { "type": { "returnType": "boolean" } }
  },
  "DateFilterModel": {
    "dateFrom": { "type": { "returnType": "string | null" } },
    "dateTo": { "type": { "returnType": "string | null" } },
    "type": { "type": { "returnType": "string | null" } },
    "filterType": { "type": { "returnType": "string" } }
  },
  "IDateFilterParams": {
    "comparator": { "type": { "returnType": "IDateComparatorFunc" } },
    "browserDatePicker": { "type": { "returnType": "boolean" } },
    "minValidYear": { "type": { "returnType": "number" } },
    "inRangeInclusive": { "type": { "returnType": "boolean" } },
    "includeBlanksInEquals": { "type": { "returnType": "boolean" } },
    "includeBlanksInLessThan": { "type": { "returnType": "boolean" } },
    "includeBlanksInGreaterThan": { "type": { "returnType": "boolean" } },
    "includeBlanksInRange": { "type": { "returnType": "boolean" } },
    "nullComparator": {
      "description": "/** @deprecated in v21\n */",
      "type": { "returnType": "NullComparator" }
    },
    "filterOptions": {
      "type": { "returnType": "(IFilterOptionDef | string)[]" }
    },
    "defaultOption": { "type": { "returnType": "string" } },
    "defaultJoinOperator": { "type": { "returnType": "JoinOperator" } },
    "suppressAndOrCondition": { "type": { "returnType": "boolean" } },
    "alwaysShowBothConditions": { "type": { "returnType": "boolean" } },
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "IDateComparatorFunc": {},
  "NumberFilterModel": {
    "filter": { "type": { "returnType": "number | null" } },
    "filterTo": { "type": { "returnType": "number | null" } },
    "type": { "type": { "returnType": "string | null" } },
    "filterType": { "type": { "returnType": "string" } }
  },
  "INumberFilterParams": {
    "allowedCharPattern": { "type": { "returnType": "string" } },
    "numberParser": {
      "type": {
        "arguments": { "text": "string | null" },
        "returnType": "number"
      }
    },
    "inRangeInclusive": { "type": { "returnType": "boolean" } },
    "includeBlanksInEquals": { "type": { "returnType": "boolean" } },
    "includeBlanksInLessThan": { "type": { "returnType": "boolean" } },
    "includeBlanksInGreaterThan": { "type": { "returnType": "boolean" } },
    "includeBlanksInRange": { "type": { "returnType": "boolean" } },
    "nullComparator": {
      "description": "/** @deprecated in v21\n */",
      "type": { "returnType": "NullComparator" }
    },
    "filterOptions": {
      "type": { "returnType": "(IFilterOptionDef | string)[]" }
    },
    "defaultOption": { "type": { "returnType": "string" } },
    "defaultJoinOperator": { "type": { "returnType": "JoinOperator" } },
    "suppressAndOrCondition": { "type": { "returnType": "boolean" } },
    "alwaysShowBothConditions": { "type": { "returnType": "boolean" } },
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "FilterButtonType": {},
  "IProvidedFilterParams": {
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "NullComparator": {
    "equals": { "type": { "returnType": "boolean" } },
    "lessThan": { "type": { "returnType": "boolean" } },
    "greaterThan": { "type": { "returnType": "boolean" } }
  },
  "IScalarFilterParams": {
    "inRangeInclusive": { "type": { "returnType": "boolean" } },
    "includeBlanksInEquals": { "type": { "returnType": "boolean" } },
    "includeBlanksInLessThan": { "type": { "returnType": "boolean" } },
    "includeBlanksInGreaterThan": { "type": { "returnType": "boolean" } },
    "includeBlanksInRange": { "type": { "returnType": "boolean" } },
    "nullComparator": {
      "description": "/** @deprecated in v21\n */",
      "type": { "returnType": "NullComparator" }
    },
    "filterOptions": {
      "type": { "returnType": "(IFilterOptionDef | string)[]" }
    },
    "defaultOption": { "type": { "returnType": "string" } },
    "defaultJoinOperator": { "type": { "returnType": "JoinOperator" } },
    "suppressAndOrCondition": { "type": { "returnType": "boolean" } },
    "alwaysShowBothConditions": { "type": { "returnType": "boolean" } },
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "Comparator": { "meta": { "typeParams": ["T"] } },
  "JoinOperator": {},
  "ISimpleFilterParams": {
    "filterOptions": {
      "type": { "returnType": "(IFilterOptionDef | string)[]" }
    },
    "defaultOption": { "type": { "returnType": "string" } },
    "defaultJoinOperator": { "type": { "returnType": "JoinOperator" } },
    "suppressAndOrCondition": { "type": { "returnType": "boolean" } },
    "alwaysShowBothConditions": { "type": { "returnType": "boolean" } },
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ISimpleFilterModel": {
    "type": { "type": { "returnType": "string | null" } },
    "filterType": { "type": { "returnType": "string" } }
  },
  "ICombinedSimpleModel": {
    "operator": { "type": { "returnType": "JoinOperator" } },
    "condition1": { "type": { "returnType": "M" } },
    "condition2": { "type": { "returnType": "M" } },
    "meta": { "typeParams": ["M extends ISimpleFilterModel"] },
    "filterType": { "type": { "returnType": "string" } }
  },
  "ConditionPosition": {},
  "TextFilterModel": {
    "filter": { "type": { "returnType": "string | null" } },
    "type": { "type": { "returnType": "string | null" } },
    "filterType": { "type": { "returnType": "string" } }
  },
  "TextComparator": {},
  "TextFormatter": {},
  "ITextFilterParams": {
    "textCustomComparator": { "type": { "returnType": "TextComparator" } },
    "caseSensitive": { "type": { "returnType": "boolean" } },
    "textFormatter": {
      "type": { "arguments": { "from": "string" }, "returnType": "string" }
    },
    "trimInput": { "type": { "returnType": "boolean" } },
    "filterOptions": {
      "type": { "returnType": "(IFilterOptionDef | string)[]" }
    },
    "defaultOption": { "type": { "returnType": "string" } },
    "defaultJoinOperator": { "type": { "returnType": "JoinOperator" } },
    "suppressAndOrCondition": { "type": { "returnType": "boolean" } },
    "alwaysShowBothConditions": { "type": { "returnType": "boolean" } },
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "GridParams": {
    "globalEventListener": { "type": { "returnType": "Function" } },
    "$scope": { "type": { "returnType": "any" } },
    "$compile": { "type": { "returnType": "any" } },
    "frameworkOverrides": { "type": { "returnType": "IFrameworkOverrides" } },
    "providedBeanInstances": {
      "type": { "returnType": "{ [key: string]: any; }" }
    },
    "modules": { "type": { "returnType": "Module[]" } }
  },
  "StartEditingCellParams": {
    "rowIndex": { "type": { "returnType": "number" } },
    "colKey": { "type": { "returnType": "string | Column" } },
    "rowPinned": { "type": { "returnType": "string" } },
    "keyPress": { "type": { "returnType": "number" } },
    "charPress": { "type": { "returnType": "string" } }
  },
  "GetCellsParams": {
    "rowNodes": { "type": { "returnType": "RowNode[]" } },
    "columns": { "type": { "returnType": "(string | Column)[]" } }
  },
  "RefreshCellsParams": {
    "force": { "type": { "returnType": "boolean" } },
    "suppressFlash": { "type": { "returnType": "boolean" } },
    "rowNodes": { "type": { "returnType": "RowNode[]" } },
    "columns": { "type": { "returnType": "(string | Column)[]" } }
  },
  "FlashCellsParams": {
    "flashDelay": { "type": { "returnType": "number" } },
    "fadeDelay": { "type": { "returnType": "number" } },
    "rowNodes": { "type": { "returnType": "RowNode[]" } },
    "columns": { "type": { "returnType": "(string | Column)[]" } }
  },
  "GetCellRendererInstancesParams": {
    "rowNodes": { "type": { "returnType": "RowNode[]" } },
    "columns": { "type": { "returnType": "(string | Column)[]" } }
  },
  "GetCellEditorInstancesParams": {
    "rowNodes": { "type": { "returnType": "RowNode[]" } },
    "columns": { "type": { "returnType": "(string | Column)[]" } }
  },
  "RedrawRowsParams": { "rowNodes": { "type": { "returnType": "RowNode[]" } } },
  "CreateRangeChartParams": {
    "cellRange": { "type": { "returnType": "CellRangeParams" } },
    "chartType": { "type": { "returnType": "ChartType" } },
    "chartThemeName": { "type": { "returnType": "string" } },
    "chartContainer": { "type": { "returnType": "HTMLElement" } },
    "suppressChartRanges": { "type": { "returnType": "boolean" } },
    "aggFunc": { "type": { "returnType": "string | IAggFunc" } },
    "chartThemeOverrides": {
      "type": { "returnType": "AgChartThemeOverrides" }
    },
    "unlinkChart": { "type": { "returnType": "boolean" } },
    "processChartOptions": {
      "description": "/** @deprecated since v24.0.0, use `chartThemeOverrides` instead\n */",
      "type": {
        "arguments": { "params": "ProcessChartOptionsParams" },
        "returnType": "ChartOptions<any>"
      }
    }
  },
  "CreatePivotChartParams": {
    "chartType": { "type": { "returnType": "ChartType" } },
    "chartThemeName": { "type": { "returnType": "string" } },
    "chartContainer": { "type": { "returnType": "HTMLElement" } },
    "chartThemeOverrides": {
      "type": { "returnType": "AgChartThemeOverrides" }
    },
    "unlinkChart": { "type": { "returnType": "boolean" } },
    "processChartOptions": {
      "description": "/** @deprecated since v24.0.0, use `chartThemeOverrides` instead\n */",
      "type": {
        "arguments": { "params": "ProcessChartOptionsParams" },
        "returnType": "ChartOptions<any>"
      }
    }
  },
  "CreateCrossFilterChartParams": {
    "cellRange": { "type": { "returnType": "CellRangeParams" } },
    "chartType": { "type": { "returnType": "ChartType" } },
    "chartThemeName": { "type": { "returnType": "string" } },
    "chartContainer": { "type": { "returnType": "HTMLElement" } },
    "suppressChartRanges": { "type": { "returnType": "boolean" } },
    "aggFunc": { "type": { "returnType": "string | IAggFunc" } },
    "chartThemeOverrides": {
      "type": { "returnType": "AgChartThemeOverrides" }
    },
    "unlinkChart": { "type": { "returnType": "boolean" } }
  },
  "DetailGridInfo": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "id": { "type": { "returnType": "string" } }
  },
  "IFakeHScrollComp": {
    "setHeight": {
      "type": { "arguments": { "height": "number" }, "returnType": "void" }
    },
    "setViewportHeight": {
      "type": { "arguments": { "height": "number" }, "returnType": "void" }
    },
    "setContainerHeight": {
      "type": { "arguments": { "height": "number" }, "returnType": "void" }
    },
    "setRightSpacerFixedWidth": {
      "type": { "arguments": { "width": "number" }, "returnType": "void" }
    },
    "setLeftSpacerFixedWidth": {
      "type": { "arguments": { "width": "number" }, "returnType": "void" }
    },
    "setInvisibleStyles": {
      "type": {
        "arguments": { "isInvisible": "boolean" },
        "returnType": "void"
      }
    },
    "includeLeftSpacerScrollerCss": {
      "type": {
        "arguments": { "cssClass": "string", "include": "boolean" },
        "returnType": "void"
      }
    },
    "includeRightSpacerScrollerCss": {
      "type": {
        "arguments": { "cssClass": "string", "include": "boolean" },
        "returnType": "void"
      }
    }
  },
  "RowAnimationCssClasses": {},
  "IGridBodyComp": {
    "setColumnMovingCss": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setCellSelectableCss": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setTopHeight": {
      "type": { "arguments": { "height": "number" }, "returnType": "void" }
    },
    "setTopDisplay": {
      "type": { "arguments": { "display": "string" }, "returnType": "void" }
    },
    "setBottomHeight": {
      "type": { "arguments": { "height": "number" }, "returnType": "void" }
    },
    "setBottomDisplay": {
      "type": { "arguments": { "display": "string" }, "returnType": "void" }
    },
    "setColumnCount": {
      "type": { "arguments": { "count": "number" }, "returnType": "void" }
    },
    "setRowCount": {
      "type": { "arguments": { "count": "number" }, "returnType": "void" }
    },
    "setRowAnimationCssOnBodyViewport": {
      "type": {
        "arguments": { "cssClass": "string", "animate": "boolean" },
        "returnType": "void"
      }
    },
    "setAlwaysVerticalScrollClass": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setPinnedTopBottomOverflowY": {
      "type": { "arguments": { "overflow": "string" }, "returnType": "void" }
    },
    "registerBodyViewportResizeListener": {
      "type": {
        "arguments": { "listener": "(() => void)" },
        "returnType": "void"
      }
    },
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void"
      }
    }
  },
  "NavigateParams": {
    "scrollIndex": { "type": { "returnType": "number" } },
    "scrollType": { "type": { "returnType": "'top' | 'bottom' | null" } },
    "scrollColumn": { "type": { "returnType": "Column | null" } },
    "focusIndex": { "type": { "returnType": "number" } },
    "focusColumn": { "type": { "returnType": "Column" } }
  },
  "RenderParams": { "rows": { "type": { "returnType": "RowNode" } } },
  "RenderRowsFeature": {
    "render": {
      "type": { "arguments": { "rows": "RowNode[]" }, "returnType": "void" }
    }
  },
  "RowContainerName": {},
  "IRowContainerComp": {
    "setViewportHeight": {
      "type": { "arguments": { "height": "string" }, "returnType": "void" }
    },
    "setRowCtrls": {
      "type": { "arguments": { "rowCtrls": "RowCtrl[]" }, "returnType": "void" }
    },
    "setDomOrder": {
      "type": { "arguments": { "domOrder": "boolean" }, "returnType": "void" }
    },
    "setContainerWidth": {
      "type": { "arguments": { "width": "string" }, "returnType": "void" }
    }
  },
  "RowDropZoneEvents": {
    "onDragEnter": {
      "type": {
        "arguments": { "params": "RowDragEnterEvent" },
        "returnType": "void"
      }
    },
    "onDragLeave": {
      "type": {
        "arguments": { "params": "RowDragLeaveEvent" },
        "returnType": "void"
      }
    },
    "onDragging": {
      "type": {
        "arguments": { "params": "RowDragMoveEvent" },
        "returnType": "void"
      }
    },
    "onDragStop": {
      "type": {
        "arguments": { "params": "RowDragEndEvent" },
        "returnType": "void"
      }
    }
  },
  "RowDropZoneParams": {
    "getContainer": {
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "onDragEnter": {
      "type": {
        "arguments": { "params": "RowDragEnterEvent" },
        "returnType": "void"
      }
    },
    "onDragLeave": {
      "type": {
        "arguments": { "params": "RowDragLeaveEvent" },
        "returnType": "void"
      }
    },
    "onDragging": {
      "type": {
        "arguments": { "params": "RowDragMoveEvent" },
        "returnType": "void"
      }
    },
    "onDragStop": {
      "type": {
        "arguments": { "params": "RowDragEndEvent" },
        "returnType": "void"
      }
    }
  },
  "SetScrollsVisibleParams": {
    "horizontalScrollShowing": { "type": { "returnType": "boolean" } },
    "verticalScrollShowing": { "type": { "returnType": "boolean" } }
  },
  "IGridComp": {
    "setRtlClass": {
      "type": { "arguments": { "cssClass": "string" }, "returnType": "void" }
    },
    "destroyGridUi": { "type": { "arguments": {}, "returnType": "void" } },
    "forceFocusOutOfContainer": {
      "type": { "arguments": { "up": "boolean" }, "returnType": "void" }
    },
    "addOrRemoveKeyboardFocusClass": {
      "type": { "arguments": { "value": "boolean" }, "returnType": "void" }
    },
    "getFocusableContainers": {
      "type": { "arguments": {}, "returnType": "HTMLElement[]" }
    },
    "setCursor": {
      "type": {
        "arguments": { "value": "string | null" },
        "returnType": "void"
      }
    },
    "setUserSelect": {
      "type": {
        "arguments": { "value": "string | null" },
        "returnType": "void"
      }
    },
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void"
      }
    }
  },
  "PropertyChangedEvent": {
    "currentValue": { "type": { "returnType": "any" } },
    "previousValue": { "type": { "returnType": "any" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "DropListener": {
    "getIconName": {
      "type": { "arguments": {}, "returnType": "string | null" }
    },
    "onDragEnter": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "onDragLeave": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "onDragging": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    },
    "onDragStop": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void"
      }
    }
  },
  "IGridHeaderComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setHeightAndMinHeight": {
      "type": { "arguments": { "height": "string" }, "returnType": "void" }
    }
  },
  "IHeaderParams": {
    "column": { "type": { "returnType": "Column" } },
    "displayName": { "type": { "returnType": "string" } },
    "enableSorting": { "type": { "returnType": "boolean" } },
    "enableMenu": { "type": { "returnType": "boolean" } },
    "showColumnMenu": {
      "type": { "arguments": { "source": "HTMLElement" }, "returnType": "void" }
    },
    "progressSort": {
      "type": { "arguments": { "multiSort": "boolean" }, "returnType": "void" }
    },
    "setSort": {
      "type": {
        "arguments": { "sort": "string", "multiSort": "boolean" },
        "returnType": "void"
      }
    },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "eGridHeader": { "type": { "returnType": "HTMLElement" } },
    "api": { "type": { "returnType": "GridApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "template": { "type": { "returnType": "string" } }
  },
  "IHeader": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean"
      }
    }
  },
  "IHeaderComp": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean"
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "HeaderNavigationDirection": {},
  "HeaderPosition": {
    "headerRowIndex": {
      "description": "/** A number from 0 to n, where n is the last header row the grid is rendering */",
      "type": { "returnType": "number" }
    },
    "column": {
      "description": "/** The grid column or column group */",
      "type": { "returnType": "Column | ColumnGroup" }
    }
  },
  "SelectionCount": {
    "selected": { "type": { "returnType": "number" } },
    "notSelected": { "type": { "returnType": "number" } }
  },
  "IHeaderGroupParams": {
    "columnGroup": { "type": { "returnType": "ColumnGroup" } },
    "displayName": { "type": { "returnType": "string" } },
    "setExpanded": {
      "type": { "arguments": { "expanded": "boolean" }, "returnType": "void" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "IHeaderGroup": {},
  "IHeaderGroupComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IHeaderGroupParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "HeaderRowType": {},
  "IHeaderRowContainerComp": {},
  "HorizontalResizeParams": {
    "eResizeBar": { "type": { "returnType": "HTMLElement" } },
    "dragStartPixels": { "type": { "returnType": "number" } },
    "onResizeStart": {
      "type": { "arguments": { "shiftKey": "boolean" }, "returnType": "void" }
    },
    "onResizing": {
      "type": { "arguments": { "delta": "number" }, "returnType": "void" }
    },
    "onResizeEnd": {
      "type": { "arguments": { "delta": "number" }, "returnType": "void" }
    }
  },
  "ILogger": {
    "log": {
      "type": { "arguments": { "message": "string" }, "returnType": "void" }
    }
  },
  "BaseExportParams": {
    "allColumns": { "type": { "returnType": "boolean" } },
    "columnKeys": { "type": { "returnType": "(string | Column)[]" } },
    "fileName": { "type": { "returnType": "string" } },
    "onlySelected": { "type": { "returnType": "boolean" } },
    "onlySelectedAllPages": { "type": { "returnType": "boolean" } },
    "skipColumnGroupHeaders": { "type": { "returnType": "boolean" } },
    "skipColumnHeaders": { "type": { "returnType": "boolean" } },
    "skipRowGroups": { "type": { "returnType": "boolean" } },
    "skipPinnedTop": { "type": { "returnType": "boolean" } },
    "skipPinnedBottom": { "type": { "returnType": "boolean" } },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean"
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string"
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string"
      }
    },
    "columnGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipHeader": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    }
  },
  "ExportParams": {
    "prependContent": { "type": { "returnType": "T" } },
    "appendContent": { "type": { "returnType": "T" } },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n */",
      "type": { "returnType": "T" }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n */",
      "type": { "returnType": "T" }
    },
    "getCustomContentBelowRow": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "T | undefined"
      }
    },
    "meta": { "typeParams": ["T"] },
    "allColumns": { "type": { "returnType": "boolean" } },
    "columnKeys": { "type": { "returnType": "(string | Column)[]" } },
    "fileName": { "type": { "returnType": "string" } },
    "onlySelected": { "type": { "returnType": "boolean" } },
    "onlySelectedAllPages": { "type": { "returnType": "boolean" } },
    "skipColumnGroupHeaders": { "type": { "returnType": "boolean" } },
    "skipColumnHeaders": { "type": { "returnType": "boolean" } },
    "skipRowGroups": { "type": { "returnType": "boolean" } },
    "skipPinnedTop": { "type": { "returnType": "boolean" } },
    "skipPinnedBottom": { "type": { "returnType": "boolean" } },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean"
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string"
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string"
      }
    },
    "columnGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipHeader": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    }
  },
  "PackageFileParams": { "meta": { "typeParams": ["T"] } },
  "CsvCell": {
    "data": { "type": { "returnType": "CsvCellData" } },
    "mergeAcross": { "type": { "returnType": "number" } }
  },
  "CsvCellData": { "value": { "type": { "returnType": "string | null" } } },
  "CsvCustomContent": {},
  "CsvExportParams": {
    "columnSeparator": { "type": { "returnType": "string" } },
    "suppressQuotes": { "type": { "returnType": "boolean" } },
    "prependContent": { "type": { "returnType": "CsvCustomContent" } },
    "appendContent": { "type": { "returnType": "CsvCustomContent" } },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n */",
      "type": { "returnType": "CsvCustomContent" }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n */",
      "type": { "returnType": "CsvCustomContent" }
    },
    "getCustomContentBelowRow": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "CsvCustomContent | undefined"
      }
    },
    "allColumns": { "type": { "returnType": "boolean" } },
    "columnKeys": { "type": { "returnType": "(string | Column)[]" } },
    "fileName": { "type": { "returnType": "string" } },
    "onlySelected": { "type": { "returnType": "boolean" } },
    "onlySelectedAllPages": { "type": { "returnType": "boolean" } },
    "skipColumnGroupHeaders": { "type": { "returnType": "boolean" } },
    "skipColumnHeaders": { "type": { "returnType": "boolean" } },
    "skipRowGroups": { "type": { "returnType": "boolean" } },
    "skipPinnedTop": { "type": { "returnType": "boolean" } },
    "skipPinnedBottom": { "type": { "returnType": "boolean" } },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean"
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string"
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string"
      }
    },
    "columnGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipHeader": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    }
  },
  "ShouldRowBeSkippedParams": {
    "node": { "type": { "returnType": "RowNode" } },
    "api": { "type": { "returnType": "GridApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ProcessCellForExportParams": {
    "value": { "type": { "returnType": "any" } },
    "accumulatedRowIndex": { "type": { "returnType": "number" } },
    "node": { "type": { "returnType": "RowNode | null" } },
    "column": { "type": { "returnType": "Column" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "type": { "type": { "returnType": "string" } }
  },
  "ProcessHeaderForExportParams": {
    "column": { "type": { "returnType": "Column" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ProcessGroupHeaderForExportParams": {
    "columnGroup": { "type": { "returnType": "ColumnGroup" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ProcessRowGroupForExportParams": {
    "node": { "type": { "returnType": "RowNode" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ContainerType": {},
  "IAfterGuiAttachedParams": {
    "container": { "type": { "returnType": "ContainerType" } },
    "hidePopup": { "type": { "arguments": {}, "returnType": "void" } },
    "suppressFocus": { "type": { "returnType": "boolean" } }
  },
  "FontStyle": {},
  "FontWeight": {},
  "AgChartThemeName": {},
  "AgChartThemePalette": {
    "fills": { "type": { "returnType": "string[]" } },
    "strokes": { "type": { "returnType": "string[]" } }
  },
  "AgChartThemeOptions": {
    "palette": { "type": { "returnType": "AgChartThemePalette" } },
    "overrides": { "type": { "returnType": "AgChartThemeOverrides" } }
  },
  "AgChartTheme": {
    "baseTheme": { "type": { "returnType": "AgChartThemeName" } },
    "palette": { "type": { "returnType": "AgChartThemePalette" } },
    "overrides": { "type": { "returnType": "AgChartThemeOverrides" } }
  },
  "AgChartThemeOverrides": {
    "cartesian": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgCartesianSeriesTheme>"
      }
    },
    "column": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgBarSeriesOptions>"
      }
    },
    "bar": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgBarSeriesOptions>"
      }
    },
    "line": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgLineSeriesOptions>"
      }
    },
    "area": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgAreaSeriesOptions>"
      }
    },
    "scatter": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgScatterSeriesOptions>"
      }
    },
    "histogram": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgHistogramSeriesOptions>"
      }
    },
    "polar": {
      "type": {
        "returnType": "AgPolarChartOptions<AgPolarAxesTheme, AgPolarSeriesTheme>"
      }
    },
    "pie": {
      "type": {
        "returnType": "AgPolarChartOptions<AgPolarAxesTheme, AgPieSeriesOptions>"
      }
    },
    "common": { "type": { "returnType": "any" } }
  },
  "AgCartesianAxesTheme": {
    "number": { "type": { "returnType": "Omit<AgNumberAxisOptions, 'type'>" } },
    "category": {
      "type": { "returnType": "Omit<AgCategoryAxisOptions, 'type'>" }
    },
    "groupedCategory": {
      "type": { "returnType": "Omit<AgGroupedCategoryAxisOptions, 'type'>" }
    },
    "time": { "type": { "returnType": "Omit<AgTimeAxisOptions, 'type'>" } }
  },
  "AgCartesianSeriesTheme": {
    "line": { "type": { "returnType": "AgLineSeriesOptions" } },
    "scatter": { "type": { "returnType": "AgScatterSeriesOptions" } },
    "area": { "type": { "returnType": "AgAreaSeriesOptions" } },
    "bar": { "type": { "returnType": "AgBarSeriesOptions" } },
    "histogram": { "type": { "returnType": "AgHistogramSeriesOptions" } }
  },
  "AgPolarAxesTheme": {},
  "AgPolarSeriesTheme": {
    "pie": { "type": { "returnType": "AgPieSeriesOptions" } }
  },
  "AgChartPaddingOptions": {
    "top": { "type": { "returnType": "number" } },
    "right": { "type": { "returnType": "number" } },
    "bottom": { "type": { "returnType": "number" } },
    "left": { "type": { "returnType": "number" } }
  },
  "AgChartLabelOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgDropShadowOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "color": { "type": { "returnType": "string" } },
    "xOffset": { "type": { "returnType": "number" } },
    "yOffset": { "type": { "returnType": "number" } },
    "blue": { "type": { "returnType": "number" } }
  },
  "AgChartCaptionOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "padding": { "type": { "returnType": "AgChartPaddingOptions" } },
    "text": { "type": { "returnType": "string" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgNavigatorMaskOptions": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "fillOpacity": { "type": { "returnType": "number" } }
  },
  "AgNavigatorHandleOptions": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "gripLineGap": { "type": { "returnType": "number" } },
    "gripLineLength": { "type": { "returnType": "number" } }
  },
  "AgNavigatorOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "height": { "type": { "returnType": "number" } },
    "margin": { "type": { "returnType": "number" } },
    "min": { "type": { "returnType": "number" } },
    "max": { "type": { "returnType": "number" } },
    "mask": { "type": { "returnType": "AgNavigatorMaskOptions" } },
    "minHandle": { "type": { "returnType": "AgNavigatorHandleOptions" } },
    "maxHandle": { "type": { "returnType": "AgNavigatorHandleOptions" } }
  },
  "AgChartLegendPosition": {},
  "AgChartLegendMarkerOptions": {
    "size": { "type": { "returnType": "number" } },
    "shape": { "type": { "returnType": "string | (new () => any)" } },
    "padding": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "AgChartLegendLabelOptions": {
    "color": { "type": { "returnType": "string" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } }
  },
  "AgChartLegendItemOptions": {
    "marker": { "type": { "returnType": "AgChartLegendMarkerOptions" } },
    "label": { "type": { "returnType": "AgChartLegendLabelOptions" } },
    "paddingX": { "type": { "returnType": "number" } },
    "paddingY": { "type": { "returnType": "number" } }
  },
  "AgChartLegendOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "position": { "type": { "returnType": "AgChartLegendPosition" } },
    "spacing": { "type": { "returnType": "number" } },
    "item": { "type": { "returnType": "AgChartLegendItemOptions" } },
    "layoutHorizontalSpacing": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "layoutVerticalSpacing": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "itemSpacing": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "markerShape": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string | (new () => any)" }
    },
    "markerSize": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "strokeWidth": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "color": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "fontStyle": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "FontStyle" }
    },
    "fontWeight": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "FontWeight" }
    },
    "fontSize": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "fontFamily": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    }
  },
  "AgBaseChartOptions": {
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "any[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "autoSize": { "type": { "returnType": "boolean" } },
    "padding": { "type": { "returnType": "AgChartPaddingOptions" } },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }"
      }
    },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "subtitle": { "type": { "returnType": "AgChartCaptionOptions" } },
    "tooltipClass": { "type": { "returnType": "string" } },
    "tooltipTracking": { "type": { "returnType": "boolean" } },
    "navigator": { "type": { "returnType": "AgNavigatorOptions" } },
    "legend": { "type": { "returnType": "AgChartLegendOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "theme": { "type": { "returnType": "string | AgChartTheme" } }
  },
  "AgBaseAxisOptions": { "keys": { "type": { "returnType": "string[]" } } },
  "AgCartesianAxisPosition": {},
  "AgAxisLineOptions": {
    "width": { "type": { "returnType": "number" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgAxisTickOptions": {
    "width": { "type": { "returnType": "number" } },
    "size": { "type": { "returnType": "number" } },
    "color": { "type": { "returnType": "string" } },
    "count": { "type": { "returnType": "any" } }
  },
  "AgAxisLabelFormatterParams": {
    "value": { "type": { "returnType": "any" } },
    "index": { "type": { "returnType": "number" } },
    "fractionDigits": { "type": { "returnType": "number" } },
    "formatter": {
      "type": { "arguments": { "x": "any" }, "returnType": "string" }
    }
  },
  "AgAxisLabelOptions": {
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "padding": { "type": { "returnType": "number" } },
    "color": { "type": { "returnType": "string" } },
    "rotation": { "type": { "returnType": "number" } },
    "format": { "type": { "returnType": "string" } },
    "formatter": {
      "type": {
        "arguments": { "params": "AgAxisLabelFormatterParams" },
        "returnType": "string"
      }
    }
  },
  "AgAxisGridStyle": {
    "stroke": { "type": { "returnType": "string" } },
    "lineDash": { "type": { "returnType": "number[]" } }
  },
  "AgBaseCartesianAxisOptions": {
    "position": { "type": { "returnType": "AgCartesianAxisPosition" } },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "line": { "type": { "returnType": "AgAxisLineOptions" } },
    "tick": { "type": { "returnType": "AgAxisTickOptions" } },
    "label": { "type": { "returnType": "AgAxisLabelOptions" } },
    "gridStyle": { "type": { "returnType": "AgAxisGridStyle[]" } },
    "keys": { "type": { "returnType": "string[]" } }
  },
  "AgNumberAxisOptions": {
    "type": { "type": { "returnType": "'number'" } },
    "nice": { "type": { "returnType": "boolean" } },
    "min": { "type": { "returnType": "number" } },
    "max": { "type": { "returnType": "number" } },
    "position": { "type": { "returnType": "AgCartesianAxisPosition" } },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "line": { "type": { "returnType": "AgAxisLineOptions" } },
    "tick": { "type": { "returnType": "AgAxisTickOptions" } },
    "label": { "type": { "returnType": "AgAxisLabelOptions" } },
    "gridStyle": { "type": { "returnType": "AgAxisGridStyle[]" } },
    "keys": { "type": { "returnType": "string[]" } }
  },
  "AgCategoryAxisOptions": {
    "type": { "type": { "returnType": "'category'" } },
    "paddingInner": { "type": { "returnType": "number" } },
    "paddingOuter": { "type": { "returnType": "number" } },
    "position": { "type": { "returnType": "AgCartesianAxisPosition" } },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "line": { "type": { "returnType": "AgAxisLineOptions" } },
    "tick": { "type": { "returnType": "AgAxisTickOptions" } },
    "label": { "type": { "returnType": "AgAxisLabelOptions" } },
    "gridStyle": { "type": { "returnType": "AgAxisGridStyle[]" } },
    "keys": { "type": { "returnType": "string[]" } }
  },
  "AgGroupedCategoryAxisOptions": {
    "type": { "type": { "returnType": "'groupedCategory'" } },
    "position": { "type": { "returnType": "AgCartesianAxisPosition" } },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "line": { "type": { "returnType": "AgAxisLineOptions" } },
    "tick": { "type": { "returnType": "AgAxisTickOptions" } },
    "label": { "type": { "returnType": "AgAxisLabelOptions" } },
    "gridStyle": { "type": { "returnType": "AgAxisGridStyle[]" } },
    "keys": { "type": { "returnType": "string[]" } }
  },
  "AgTimeAxisOptions": {
    "type": { "type": { "returnType": "'time'" } },
    "nice": { "type": { "returnType": "boolean" } },
    "position": { "type": { "returnType": "AgCartesianAxisPosition" } },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "line": { "type": { "returnType": "AgAxisLineOptions" } },
    "tick": { "type": { "returnType": "AgAxisTickOptions" } },
    "label": { "type": { "returnType": "AgAxisLabelOptions" } },
    "gridStyle": { "type": { "returnType": "AgAxisGridStyle[]" } },
    "keys": { "type": { "returnType": "string[]" } }
  },
  "AgCartesianAxisOptions": {},
  "AgPolarAxisOptions": {},
  "AgBaseSeriesOptions": {
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgTooltipRendererResult": {
    "title": { "type": { "returnType": "string" } },
    "content": { "type": { "returnType": "string" } }
  },
  "AgSeriesTooltipRendererParams": {
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgCartesianSeriesTooltipRendererParams": {
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgPolarSeriesTooltipRendererParams": {
    "angleKey": { "type": { "returnType": "string" } },
    "angleValue": { "type": { "returnType": "any" } },
    "angleName": { "type": { "returnType": "string" } },
    "radiusKey": { "type": { "returnType": "string" } },
    "radiusValue": { "type": { "returnType": "any" } },
    "radiusName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgScatterSeriesTooltipRendererParams": {
    "sizeKey": { "type": { "returnType": "string" } },
    "sizeName": { "type": { "returnType": "string" } },
    "labelKey": { "type": { "returnType": "string" } },
    "labelName": { "type": { "returnType": "string" } },
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgSeriesMarker": {
    "enabled": { "type": { "returnType": "boolean" } },
    "shape": { "type": { "returnType": "string" } },
    "size": { "type": { "returnType": "number" } },
    "maxSize": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "AgCartesianSeriesMarkerFormatterParams": {
    "xKey": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } }
  },
  "AgCartesianSeriesMarkerFormat": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "size": { "type": { "returnType": "number" } }
  },
  "AgCartesianSeriesMarker": {
    "formatter": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesMarkerFormatterParams" },
        "returnType": "AgCartesianSeriesMarkerFormat"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "shape": { "type": { "returnType": "string" } },
    "size": { "type": { "returnType": "number" } },
    "maxSize": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "AgSeriesTooltip": { "enabled": { "type": { "returnType": "boolean" } } },
  "AgLineSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } }
  },
  "AgLineSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: any; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgLineSeriesOptions": {
    "type": { "type": { "returnType": "'line'" } },
    "marker": { "type": { "returnType": "AgCartesianSeriesMarker" } },
    "label": { "type": { "returnType": "AgLineSeriesLabelOptions" } },
    "xKey": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "xName": { "type": { "returnType": "string" } },
    "yName": { "type": { "returnType": "string" } },
    "title": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "strokeOpacity": { "type": { "returnType": "number" } },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "tooltip": { "type": { "returnType": "AgLineSeriesTooltip" } },
    "tooltipRenderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgScatterSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgScatterSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } }
  },
  "AgScatterSeriesLabelOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgScatterSeriesOptions": {
    "type": { "type": { "returnType": "'scatter'" } },
    "marker": { "type": { "returnType": "AgCartesianSeriesMarker" } },
    "label": { "type": { "returnType": "AgScatterSeriesLabelOptions" } },
    "xKey": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "xName": { "type": { "returnType": "string" } },
    "yName": { "type": { "returnType": "string" } },
    "title": { "type": { "returnType": "string" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "fillOpacity": { "type": { "returnType": "number" } },
    "strokeOpacity": { "type": { "returnType": "number" } },
    "tooltip": { "type": { "returnType": "AgScatterSeriesTooltip" } },
    "tooltipRenderer": {
      "type": {
        "arguments": { "params": "AgScatterSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgAreaSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "format": { "type": { "returnType": "string" } },
    "enabled": { "type": { "returnType": "boolean" } }
  },
  "AgAreaSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: any; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgAreaSeriesOptions": {
    "type": { "type": { "returnType": "'area'" } },
    "marker": { "type": { "returnType": "AgCartesianSeriesMarker" } },
    "label": { "type": { "returnType": "AgAreaSeriesLabelOptions" } },
    "xKey": { "type": { "returnType": "string" } },
    "yKeys": { "type": { "returnType": "string[]" } },
    "xName": { "type": { "returnType": "string" } },
    "yNames": { "type": { "returnType": "string[]" } },
    "fills": { "type": { "returnType": "string[]" } },
    "strokes": { "type": { "returnType": "string[]" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "fillOpacity": { "type": { "returnType": "number" } },
    "strokeOpacity": { "type": { "returnType": "number" } },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "shadow": { "type": { "returnType": "AgDropShadowOptions" } },
    "tooltip": { "type": { "returnType": "AgAreaSeriesTooltip" } },
    "tooltipRenderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgBarSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: number; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgBarSeriesFormatterParams": {
    "datum": { "type": { "returnType": "any" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "highlighted": { "type": { "returnType": "boolean" } },
    "xKey": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } }
  },
  "AgBarSeriesFormat": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "AgBarSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } }
  },
  "AgBarSeriesOptions": {
    "type": { "type": { "returnType": "'bar' | 'column'" } },
    "grouped": { "type": { "returnType": "boolean" } },
    "normalizedTo": { "type": { "returnType": "number" } },
    "xKey": { "type": { "returnType": "string" } },
    "yKeys": { "type": { "returnType": "string[] | string[][]" } },
    "xName": { "type": { "returnType": "string" } },
    "yNames": {
      "type": { "returnType": "string[] | { [key in string]: string }" }
    },
    "fills": { "type": { "returnType": "string[]" } },
    "strokes": { "type": { "returnType": "string[]" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "fillOpacity": { "type": { "returnType": "number" } },
    "strokeOpacity": { "type": { "returnType": "number" } },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "shadow": { "type": { "returnType": "AgDropShadowOptions" } },
    "label": { "type": { "returnType": "AgBarSeriesLabelOptions" } },
    "tooltip": { "type": { "returnType": "AgBarSeriesTooltip" } },
    "tooltipRenderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "formatter": {
      "type": {
        "arguments": { "params": "AgBarSeriesFormatterParams" },
        "returnType": "AgBarSeriesFormat"
      }
    },
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgHistogramSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: number; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgHistogramSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } }
  },
  "AgHistogramSeriesOptions": {
    "type": { "type": { "returnType": "'histogram'" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "fillOpacity": { "type": { "returnType": "number" } },
    "strokeOpacity": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "xKey": { "type": { "returnType": "string" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yName": { "type": { "returnType": "string" } },
    "areaPlot": { "type": { "returnType": "boolean" } },
    "bins": { "type": { "returnType": "[number, number][]" } },
    "binCount": { "type": { "returnType": "number" } },
    "aggregation": { "type": { "returnType": "'count' | 'sum' | 'mean'" } },
    "shadow": { "type": { "returnType": "AgDropShadowOptions" } },
    "label": { "type": { "returnType": "AgHistogramSeriesLabelOptions" } },
    "tooltip": { "type": { "returnType": "AgHistogramSeriesTooltip" } },
    "tooltipRenderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgPieSeriesLabelOptions": {
    "offset": { "type": { "returnType": "number" } },
    "minAngle": { "type": { "returnType": "number" } },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgPieSeriesFormatterParams": {
    "datum": { "type": { "returnType": "any" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "highlighted": { "type": { "returnType": "boolean" } },
    "angleKey": { "type": { "returnType": "string" } },
    "radiusKey": { "type": { "returnType": "string" } }
  },
  "AgPieSeriesFormat": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "AgPieSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgPieSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } }
  },
  "AgPieTitleOptions": {
    "showInLegend": { "type": { "returnType": "boolean" } },
    "enabled": { "type": { "returnType": "boolean" } },
    "padding": { "type": { "returnType": "AgChartPaddingOptions" } },
    "text": { "type": { "returnType": "string" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgPieSeriesOptions": {
    "type": { "type": { "returnType": "'pie'" } },
    "title": { "type": { "returnType": "AgPieTitleOptions" } },
    "label": { "type": { "returnType": "AgPieSeriesLabelOptions" } },
    "callout": {
      "type": {
        "returnType": "{\n        colors?: string[];\n        length?: number;\n        strokeWidth?: number;\n    }"
      }
    },
    "angleKey": { "type": { "returnType": "string" } },
    "angleName": { "type": { "returnType": "string" } },
    "radiusKey": { "type": { "returnType": "string" } },
    "radiusName": { "type": { "returnType": "string" } },
    "labelKey": { "type": { "returnType": "string" } },
    "labelName": { "type": { "returnType": "string" } },
    "fills": { "type": { "returnType": "string[]" } },
    "strokes": { "type": { "returnType": "string[]" } },
    "fillOpacity": { "type": { "returnType": "number" } },
    "strokeOpacity": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "rotation": { "type": { "returnType": "number" } },
    "outerRadiusOffset": { "type": { "returnType": "number" } },
    "innerRadiusOffset": { "type": { "returnType": "number" } },
    "shadow": { "type": { "returnType": "AgDropShadowOptions" } },
    "tooltip": { "type": { "returnType": "AgPieSeriesTooltip" } },
    "tooltipRenderer": {
      "type": {
        "arguments": { "params": "AgPieSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult"
      }
    },
    "formatter": {
      "type": {
        "arguments": { "params": "AgPieSeriesFormatterParams" },
        "returnType": "AgPieSeriesFormat"
      }
    },
    "tooltipEnabled": { "type": { "returnType": "boolean" } },
    "data": { "type": { "returnType": "any[]" } },
    "visible": { "type": { "returnType": "boolean" } },
    "showInLegend": { "type": { "returnType": "boolean" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        fill?: string;\n        stroke?: string;\n        strokeWidth?: number;\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }"
      }
    }
  },
  "AgPieSeriesTooltipRendererParams": {
    "labelKey": { "type": { "returnType": "string" } },
    "labelName": { "type": { "returnType": "string" } },
    "angleKey": { "type": { "returnType": "string" } },
    "angleValue": { "type": { "returnType": "any" } },
    "angleName": { "type": { "returnType": "string" } },
    "radiusKey": { "type": { "returnType": "string" } },
    "radiusValue": { "type": { "returnType": "any" } },
    "radiusName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AgCartesianSeriesOptions": {},
  "AgPolarSeriesOptions": {},
  "AgCartesianChartOptions": {
    "type": {
      "type": {
        "returnType": "'cartesian' | 'groupedCategory' | 'line' | 'bar' | 'column' | 'area' | 'scatter'"
      }
    },
    "axes": { "type": { "returnType": "TAxisOptions" } },
    "series": { "type": { "returnType": "TSeriesOptions" } },
    "meta": { "typeParams": ["TAxisOptions", "TSeriesOptions"] },
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "any[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "autoSize": { "type": { "returnType": "boolean" } },
    "padding": { "type": { "returnType": "AgChartPaddingOptions" } },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }"
      }
    },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "subtitle": { "type": { "returnType": "AgChartCaptionOptions" } },
    "tooltipClass": { "type": { "returnType": "string" } },
    "tooltipTracking": { "type": { "returnType": "boolean" } },
    "navigator": { "type": { "returnType": "AgNavigatorOptions" } },
    "legend": { "type": { "returnType": "AgChartLegendOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "theme": { "type": { "returnType": "string | AgChartTheme" } }
  },
  "AgPolarChartOptions": {
    "type": { "type": { "returnType": "'polar' | 'pie'" } },
    "axes": { "type": { "returnType": "TAxisOptions" } },
    "series": { "type": { "returnType": "TSeriesOptions" } },
    "meta": { "typeParams": ["TAxisOptions", "TSeriesOptions"] },
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "any[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "autoSize": { "type": { "returnType": "boolean" } },
    "padding": { "type": { "returnType": "AgChartPaddingOptions" } },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }"
      }
    },
    "title": { "type": { "returnType": "AgChartCaptionOptions" } },
    "subtitle": { "type": { "returnType": "AgChartCaptionOptions" } },
    "tooltipClass": { "type": { "returnType": "string" } },
    "tooltipTracking": { "type": { "returnType": "boolean" } },
    "navigator": { "type": { "returnType": "AgNavigatorOptions" } },
    "legend": { "type": { "returnType": "AgChartLegendOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "theme": { "type": { "returnType": "string | AgChartTheme" } }
  },
  "AgChartOptions": {},
  "IAggFuncService": {
    "addAggFuncs": {
      "type": {
        "arguments": { "aggFuncs": "{ [key: string]: IAggFunc; }" },
        "returnType": "void"
      }
    },
    "addAggFunc": {
      "type": {
        "arguments": { "key": "string", "aggFunc": "IAggFunc" },
        "returnType": "void"
      }
    },
    "clear": { "type": { "arguments": {}, "returnType": "void" } },
    "getDefaultAggFunc": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "string | null"
      }
    },
    "getFuncNames": {
      "type": { "arguments": { "column": "Column" }, "returnType": "string[]" }
    }
  },
  "IAggregationStage": {
    "aggregateValues": {
      "type": {
        "arguments": {
          "values": "any[]",
          "aggFuncOrString": "string | IAggFunc"
        },
        "returnType": "any"
      }
    }
  },
  "ICellEditor": {
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n * appear in a popup, so is not constrained to the boundaries of the cell.\n * This is great if you want to, for example, provide you own custom dropdown list\n * for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n * should cover the cell, or \"under\" if it should be positioned below leaving the\n * cell value visible. If this method is not present, the default is \"over\". */",
      "type": { "arguments": {}, "returnType": "string | undefined" }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n * used and the grid will continue editing. Use this to make a decision on editing\n * inside the init() function, eg maybe you want to only start editing if the user\n * hits a numeric key, but not a letter, if the editor is for numbers. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n * value will not be used. The editing will have no impact on the record. Use this\n * if you do not want a new value from your gui, i.e. you want to cancel the editing. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getFrameworkComponentInstance": {
      "description": "/** If using a framework this returns the underlying component instance, so you can call\n * methods on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    }
  },
  "ICellEditorParams": {
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any" }
    },
    "keyPress": {
      "description": "/** Key code of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "number | null" }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null" }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef" }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean" }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any" }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any" }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void"
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property enterMovesDownAfterEdit=true */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit": "boolean" },
        "returnType": "void"
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement" }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's colDef.valueParser */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's colDef.valueFormatter */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    }
  },
  "ICellEditorComp": {
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the component will appear in a popup, and it will be\n * constrained to the boundaries of the popupParent. This is great if you want to, for example, provide you own\n * custom dropdown list for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n * should cover the cell, or \"under\" if it should be positioned below leaving the\n * cell value visible. If this method is not present, the default is \"over\". */",
      "type": { "arguments": {}, "returnType": "string | undefined" }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n * used and the grid will continue editing. Use this to make a decision on editing\n * inside the init() function, eg maybe you want to only start editing if the user\n * hits a numeric key, but not a letter, if the editor is for numbers. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n * value will not be used. The editing will have no impact on the record. Use this\n * if you do not want a new value from your gui, i.e. you want to cancel the editing. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "focusIn": {
      "description": "/** Called when focus is within the component */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "focusOut": {
      "description": "/** Called when focus is leaving the component */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getFrameworkComponentInstance": {
      "description": "/** If using a framework this returns the underlying component instance, so you can call\n * methods on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "ChartType": {},
  "ChartMenuOptions": {},
  "SeriesOptions": {
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "ChartTooltip": {
    "enabled": { "type": { "returnType": "boolean" } },
    "class": { "type": { "returnType": "string" } },
    "tracking": { "type": { "returnType": "boolean" } },
    "delay": { "type": { "returnType": "number" } }
  },
  "ChartOptions": {
    "document": { "type": { "returnType": "Document" } },
    "seriesDefaults": { "type": { "returnType": "T" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "padding": { "type": { "returnType": "PaddingOptions" } },
    "background": { "type": { "returnType": "BackgroundOptions" } },
    "title": { "type": { "returnType": "CaptionOptions" } },
    "subtitle": { "type": { "returnType": "CaptionOptions" } },
    "navigator": { "type": { "returnType": "NavigatorOptions" } },
    "legend": { "type": { "returnType": "LegendOptions" } },
    "tooltip": { "type": { "returnType": "ChartTooltip" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } },
    "meta": { "typeParams": ["T extends SeriesOptions"] }
  },
  "PaddingOptions": {
    "top": { "type": { "returnType": "number" } },
    "right": { "type": { "returnType": "number" } },
    "bottom": { "type": { "returnType": "number" } },
    "left": { "type": { "returnType": "number" } }
  },
  "BackgroundOptions": {
    "fill": { "type": { "returnType": "string" } },
    "visible": { "type": { "returnType": "boolean" } }
  },
  "FontOptions": {
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "CaptionOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "text": { "type": { "returnType": "string" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "LegendOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "position": { "type": { "returnType": "LegendPosition" } },
    "spacing": { "type": { "returnType": "number" } },
    "item": { "type": { "returnType": "LegendItemOptions" } }
  },
  "LegendPosition": {},
  "LegendItemOptions": {
    "label": { "type": { "returnType": "LegendLabelOptions" } },
    "marker": { "type": { "returnType": "LegendMarkerOptions" } },
    "paddingX": { "type": { "returnType": "number" } },
    "paddingY": { "type": { "returnType": "number" } }
  },
  "LegendLabelOptions": {
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "NavigatorOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "height": { "type": { "returnType": "number" } },
    "min": { "type": { "returnType": "number" } },
    "max": { "type": { "returnType": "number" } },
    "mask": { "type": { "returnType": "NavigatorMaskOptions" } },
    "minHandle": { "type": { "returnType": "NavigatorHandleOptions" } },
    "maxHandle": { "type": { "returnType": "NavigatorHandleOptions" } }
  },
  "NavigatorMaskOptions": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "fillOpacity": { "type": { "returnType": "number" } }
  },
  "NavigatorHandleOptions": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "gripLineGap": { "type": { "returnType": "number" } },
    "gripLineLength": { "type": { "returnType": "number" } }
  },
  "MarkerShape": {},
  "LegendMarkerOptions": {
    "shape": { "type": { "returnType": "MarkerShape" } },
    "size": { "type": { "returnType": "number" } },
    "padding": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "CartesianChartOptions": {
    "xAxis": { "type": { "returnType": "AxisOptions" } },
    "yAxis": { "type": { "returnType": "AxisOptions" } },
    "navigator": { "type": { "returnType": "NavigatorOptions" } },
    "document": { "type": { "returnType": "Document" } },
    "seriesDefaults": { "type": { "returnType": "T" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "padding": { "type": { "returnType": "PaddingOptions" } },
    "background": { "type": { "returnType": "BackgroundOptions" } },
    "title": { "type": { "returnType": "CaptionOptions" } },
    "subtitle": { "type": { "returnType": "CaptionOptions" } },
    "legend": { "type": { "returnType": "LegendOptions" } },
    "tooltip": { "type": { "returnType": "ChartTooltip" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "PolarChartOptions": {
    "document": { "type": { "returnType": "Document" } },
    "seriesDefaults": { "type": { "returnType": "T" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "padding": { "type": { "returnType": "PaddingOptions" } },
    "background": { "type": { "returnType": "BackgroundOptions" } },
    "title": { "type": { "returnType": "CaptionOptions" } },
    "subtitle": { "type": { "returnType": "CaptionOptions" } },
    "navigator": { "type": { "returnType": "NavigatorOptions" } },
    "legend": { "type": { "returnType": "LegendOptions" } },
    "tooltip": { "type": { "returnType": "ChartTooltip" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "AxisOptions": {
    "type": { "type": { "returnType": "AxisType" } },
    "title": { "type": { "returnType": "CaptionOptions" } },
    "line": { "type": { "returnType": "AxisLineOptions" } },
    "tick": { "type": { "returnType": "AxisTickOptions" } },
    "label": { "type": { "returnType": "AxisLabelOptions" } },
    "gridStyle": { "type": { "returnType": "GridStyle[]" } }
  },
  "AxisType": {},
  "AxisLineOptions": {
    "width": { "type": { "returnType": "number" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AxisTickOptions": {
    "width": { "type": { "returnType": "number" } },
    "size": { "type": { "returnType": "number" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AxisLabelFormatterParams": {
    "value": { "type": { "returnType": "any" } },
    "index": { "type": { "returnType": "number" } },
    "fractionDigits": { "type": { "returnType": "number" } },
    "formatter": {
      "type": { "arguments": { "x": "any" }, "returnType": "string" }
    }
  },
  "AxisLabelOptions": {
    "padding": { "type": { "returnType": "number" } },
    "rotation": { "type": { "returnType": "number" } },
    "format": { "type": { "returnType": "string" } },
    "formatter": {
      "type": {
        "arguments": { "params": "AxisLabelFormatterParams" },
        "returnType": "string"
      }
    },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "GridStyle": {
    "stroke": { "type": { "returnType": "string" } },
    "lineDash": { "type": { "returnType": "number[]" } }
  },
  "HighlightOptions": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "series": {
      "type": {
        "returnType": "{\n        enabled?: boolean;\n        dimOpacity?: number;\n        strokeWidth?: number;\n    }"
      }
    }
  },
  "FillOptions": {
    "colors": { "type": { "returnType": "string[]" } },
    "opacity": { "type": { "returnType": "number" } }
  },
  "StrokeOptions": {
    "colors": { "type": { "returnType": "string[]" } },
    "opacity": { "type": { "returnType": "number" } },
    "width": { "type": { "returnType": "number" } }
  },
  "DropShadowOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "color": { "type": { "returnType": "string" } },
    "xOffset": { "type": { "returnType": "number" } },
    "yOffset": { "type": { "returnType": "number" } },
    "blur": { "type": { "returnType": "number" } }
  },
  "SeriesLabelOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "TooltipRendererResult": {
    "content": { "type": { "returnType": "string" } },
    "title": { "type": { "returnType": "string" } }
  },
  "TooltipOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "renderer": {
      "type": {
        "arguments": { "params": "TParams" },
        "returnType": "string | TooltipRendererResult"
      }
    },
    "meta": { "typeParams": ["TParams"] }
  },
  "TooltipRendererParams": {
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "CartesianTooltipRendererParams": {
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "BarSeriesOptions": {
    "shadow": { "type": { "returnType": "DropShadowOptions" } },
    "label": { "type": { "returnType": "BarSeriesLabelOptions" } },
    "tooltip": {
      "type": { "returnType": "TooltipOptions<BarTooltipRendererParams>" }
    },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "HistogramSeriesOptions": {
    "binCount": { "type": { "returnType": "number" } },
    "shadow": { "type": { "returnType": "DropShadowOptions" } },
    "label": { "type": { "returnType": "BarSeriesLabelOptions" } },
    "tooltip": {
      "type": { "returnType": "TooltipOptions<BarTooltipRendererParams>" }
    },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "BarSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: number; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "BarTooltipRendererParams": {
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "LineSeriesOptions": {
    "marker": { "type": { "returnType": "MarkerOptions" } },
    "label": { "type": { "returnType": "LineSeriesLabelOptions" } },
    "tooltip": {
      "type": { "returnType": "TooltipOptions<LineTooltipRendererParams>" }
    },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "LineSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: any; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "MarkerOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "shape": { "type": { "returnType": "MarkerShape" } },
    "size": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "formatter": { "type": { "returnType": "Function" } }
  },
  "LineTooltipRendererParams": {
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "ScatterSeriesLabelOptions": {
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "ScatterSeriesOptions": {
    "marker": { "type": { "returnType": "ScatterMarkerOptions" } },
    "label": { "type": { "returnType": "ScatterSeriesLabelOptions" } },
    "tooltip": {
      "type": { "returnType": "TooltipOptions<ScatterTooltipRendererParams>" }
    },
    "paired": { "type": { "returnType": "boolean" } },
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "ScatterMarkerOptions": {
    "maxSize": { "type": { "returnType": "number" } },
    "enabled": { "type": { "returnType": "boolean" } },
    "shape": { "type": { "returnType": "MarkerShape" } },
    "size": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "formatter": { "type": { "returnType": "Function" } }
  },
  "ScatterTooltipRendererParams": {
    "sizeKey": { "type": { "returnType": "string" } },
    "sizeName": { "type": { "returnType": "string" } },
    "labelKey": { "type": { "returnType": "string" } },
    "labelName": { "type": { "returnType": "string" } },
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AreaSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: any; }" },
        "returnType": "string"
      }
    },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "AreaSeriesOptions": {
    "marker": { "type": { "returnType": "MarkerOptions" } },
    "label": { "type": { "returnType": "AreaSeriesLabelOptions" } },
    "shadow": { "type": { "returnType": "DropShadowOptions" } },
    "tooltip": {
      "type": { "returnType": "TooltipOptions<AreaTooltipRendererParams>" }
    },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "AreaTooltipRendererParams": {
    "xKey": { "type": { "returnType": "string" } },
    "xValue": { "type": { "returnType": "any" } },
    "xName": { "type": { "returnType": "string" } },
    "yKey": { "type": { "returnType": "string" } },
    "yValue": { "type": { "returnType": "any" } },
    "yName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "PieTitleOptions": {
    "showInLegend": { "type": { "returnType": "boolean" } },
    "enabled": { "type": { "returnType": "boolean" } },
    "text": { "type": { "returnType": "string" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "PieSeriesOptions": {
    "title": { "type": { "returnType": "PieTitleOptions" } },
    "label": { "type": { "returnType": "PieSeriesLabelOptions" } },
    "callout": { "type": { "returnType": "PieSeriesCalloutOptions" } },
    "shadow": { "type": { "returnType": "DropShadowOptions" } },
    "tooltip": {
      "type": { "returnType": "TooltipOptions<PieTooltipRendererParams>" }
    },
    "lineDash": { "type": { "returnType": "number[]" } },
    "lineDashOffset": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "FillOptions" } },
    "stroke": { "type": { "returnType": "StrokeOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightOptions" } },
    "listeners": { "type": { "returnType": "{ [key in string]: Function }" } }
  },
  "PieSeriesLabelOptions": {
    "minAngle": { "type": { "returnType": "number" } },
    "offset": { "type": { "returnType": "number" } },
    "enabled": { "type": { "returnType": "boolean" } },
    "fontStyle": { "type": { "returnType": "FontStyle" } },
    "fontWeight": { "type": { "returnType": "FontWeight" } },
    "fontSize": { "type": { "returnType": "number" } },
    "fontFamily": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "PieSeriesCalloutOptions": {
    "length": { "type": { "returnType": "number" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "colors": { "type": { "returnType": "string[]" } }
  },
  "PieTooltipRendererParams": {
    "angleKey": { "type": { "returnType": "string" } },
    "angleValue": { "type": { "returnType": "any" } },
    "angleName": { "type": { "returnType": "string" } },
    "labelKey": { "type": { "returnType": "string" } },
    "labelName": { "type": { "returnType": "string" } },
    "datum": { "type": { "returnType": "any" } },
    "title": { "type": { "returnType": "string" } },
    "color": { "type": { "returnType": "string" } }
  },
  "GetChartImageDataUrlParams": {
    "chartId": { "type": { "returnType": "string" } },
    "fileFormat": { "type": { "returnType": "string" } }
  },
  "ChartModelType": {},
  "ChartModel": {
    "modelType": { "type": { "returnType": "ChartModelType" } },
    "chartId": { "type": { "returnType": "string" } },
    "chartType": { "type": { "returnType": "ChartType" } },
    "cellRange": { "type": { "returnType": "CellRangeParams" } },
    "chartThemeName": { "type": { "returnType": "string" } },
    "chartOptions": { "type": { "returnType": "ChartOptions<any>" } },
    "suppressChartRanges": { "type": { "returnType": "boolean" } },
    "aggFunc": { "type": { "returnType": "string | IAggFunc" } },
    "unlinkChart": { "type": { "returnType": "boolean" } }
  },
  "IChartService": {
    "getChartModels": {
      "type": { "arguments": {}, "returnType": "ChartModel[]" }
    },
    "getChartRef": {
      "type": {
        "arguments": { "chartId": "string" },
        "returnType": "ChartRef | undefined"
      }
    },
    "createRangeChart": {
      "type": {
        "arguments": { "params": "CreateRangeChartParams" },
        "returnType": "ChartRef | undefined"
      }
    },
    "createCrossFilterChart": {
      "type": {
        "arguments": { "params": "CreateCrossFilterChartParams" },
        "returnType": "ChartRef | undefined"
      }
    },
    "createChartFromCurrentRange": {
      "type": {
        "arguments": { "chartType": "ChartType" },
        "returnType": "ChartRef | undefined"
      }
    },
    "createPivotChart": {
      "type": {
        "arguments": { "params": "CreatePivotChartParams" },
        "returnType": "ChartRef | undefined"
      }
    },
    "restoreChart": {
      "type": {
        "arguments": { "model": "ChartModel", "chartContainer": "HTMLElement" },
        "returnType": "ChartRef | undefined"
      }
    },
    "getChartImageDataURL": {
      "type": {
        "arguments": { "params": "GetChartImageDataUrlParams" },
        "returnType": "string | undefined"
      }
    }
  },
  "ClientSideRowModelSteps": {},
  "IClientSideRowModel": {
    "onRowGroupOpened": {
      "type": { "arguments": {}, "returnType": "void" },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "type": { "arguments": {}, "returnType": "void" },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "updateRowData": {
      "type": {
        "arguments": {
          "rowDataTran": "RowDataTransaction",
          "rowNodeOrder": "{ [id: string]: number; } | null"
        },
        "returnType": "RowNodeTransaction | null"
      }
    },
    "setRowData": {
      "type": { "arguments": { "rowData": "any[]" }, "returnType": "void" }
    },
    "refreshModel": {
      "type": {
        "arguments": { "params": "RefreshModelParams" },
        "returnType": "void"
      }
    },
    "expandOrCollapseAll": {
      "type": { "arguments": { "expand": "boolean" }, "returnType": "void" }
    },
    "forEachLeafNode": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void"
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void"
      }
    },
    "forEachNodeAfterFilter": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void"
      }
    },
    "forEachNodeAfterFilterAndSort": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void"
      }
    },
    "resetRowHeights": { "type": { "arguments": {}, "returnType": "void" } },
    "onRowHeightChanged": { "type": { "arguments": {}, "returnType": "void" } },
    "batchUpdateRowData": {
      "type": {
        "arguments": {
          "rowDataTransaction": "RowDataTransaction",
          "callback": "(res: RowNodeTransaction) => void"
        },
        "returnType": "void"
      }
    },
    "flushAsyncTransactions": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getRootNode": { "type": { "arguments": {}, "returnType": "RowNode" } },
    "doAggregate": {
      "type": {
        "arguments": { "changedPath": "ChangedPath" },
        "returnType": "void"
      }
    },
    "getTopLevelNodes": {
      "type": { "arguments": {}, "returnType": "RowNode[] | null" }
    },
    "forEachPivotNode": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void"
      }
    },
    "ensureRowsAtPixel": {
      "type": {
        "arguments": {
          "rowNode": "RowNode[]",
          "pixel": "number",
          "increment": "number"
        },
        "returnType": "boolean"
      }
    },
    "highlightRowAtPixel": {
      "type": {
        "arguments": { "rowNode": "RowNode | null", "pixel": "number" },
        "returnType": "void"
      }
    },
    "getHighlightPosition": {
      "type": {
        "arguments": { "pixel": "number", "rowNode": "RowNode" },
        "returnType": "RowHighlightPosition"
      }
    },
    "getLastHighlightedRowNode": {
      "type": { "arguments": {}, "returnType": "RowNode | null" }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number"
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": { "arguments": { "pixel": "number" }, "returnType": "number" }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null"
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]"
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string" }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean"
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "RefreshModelParams": {
    "step": { "type": { "returnType": "ClientSideRowModelSteps" } },
    "groupState": { "type": { "returnType": "any" } },
    "keepRenderedRows": { "type": { "returnType": "boolean" } },
    "animate": { "type": { "returnType": "boolean" } },
    "keepEditingRows": { "type": { "returnType": "boolean" } },
    "rowNodeTransactions": { "type": { "returnType": "RowNodeTransaction[]" } },
    "rowNodeOrder": { "type": { "returnType": "{ [id: string]: number }" } },
    "newData": { "type": { "returnType": "boolean" } },
    "afterColumnsChanged": { "type": { "returnType": "boolean" } }
  },
  "IClipboardService": {
    "pasteFromClipboard": { "type": { "arguments": {}, "returnType": "void" } },
    "copyToClipboard": {
      "type": {
        "arguments": { "includeHeader": "boolean" },
        "returnType": "void"
      }
    },
    "copySelectedRowsToClipboard": {
      "type": {
        "arguments": {
          "includeHeader": "boolean",
          "columnKeys": "(string | Column)[]"
        },
        "returnType": "void"
      }
    },
    "copySelectedRangeToClipboard": {
      "type": {
        "arguments": { "includeHeader": "boolean" },
        "returnType": "void"
      }
    },
    "copyRangeDown": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "IColumnToolPanel": {
    "expandColumnGroups": {
      "type": { "arguments": { "groupIds": "string[]" }, "returnType": "void" }
    },
    "collapseColumnGroups": {
      "type": { "arguments": { "groupIds": "string[]" }, "returnType": "void" }
    },
    "setColumnLayout": {
      "type": {
        "arguments": { "colDefs": "(ColDef | ColGroupDef)[]" },
        "returnType": "void"
      }
    },
    "syncLayoutWithGrid": { "type": { "arguments": {}, "returnType": "void" } },
    "setPivotModeSectionVisible": {
      "type": { "arguments": { "visible": "boolean" }, "returnType": "void" }
    },
    "setRowGroupsSectionVisible": {
      "type": { "arguments": { "visible": "boolean" }, "returnType": "void" }
    },
    "setValuesSectionVisible": {
      "type": { "arguments": { "visible": "boolean" }, "returnType": "void" }
    },
    "setPivotSectionVisible": {
      "type": { "arguments": { "visible": "boolean" }, "returnType": "void" }
    }
  },
  "ColumnVO": {
    "id": { "type": { "returnType": "string" } },
    "displayName": { "type": { "returnType": "string" } },
    "field": { "type": { "returnType": "string" } },
    "aggFunc": { "type": { "returnType": "string" } }
  },
  "IComponent": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void"
      }
    },
    "meta": { "typeParams": ["T"] }
  },
  "IContextMenuFactory": {
    "onContextMenu": {
      "type": {
        "arguments": {
          "mouseEvent": "MouseEvent | null",
          "touchEvent": "TouchEvent | null",
          "rowNode": "RowNode | null",
          "column": "Column | null",
          "value": "any",
          "anchorToElement": "HTMLElement"
        },
        "returnType": "void"
      }
    },
    "hideActiveMenu": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "ICsvCreator": {
    "getDataAsCsv": {
      "type": {
        "arguments": { "params": "CsvExportParams" },
        "returnType": "string"
      }
    },
    "exportDataAsCsv": {
      "type": {
        "arguments": { "params": "CsvExportParams" },
        "returnType": "string"
      }
    }
  },
  "IDatasource": {
    "rowCount": {
      "description": "/** If you know up front how many rows are in the dataset, set it here. Otherwise leave blank. */",
      "type": { "returnType": "number" }
    },
    "getRows": {
      "description": "/** Callback the grid calls that you implement to fetch rows from the server. See below for params. */",
      "type": {
        "arguments": { "params": "IGetRowsParams" },
        "returnType": "void"
      }
    },
    "destroy": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "IGetRowsParams": {
    "startRow": {
      "description": "/** The first row index to get. */",
      "type": { "returnType": "number" }
    },
    "endRow": {
      "description": "/** The first row index to NOT get. */",
      "type": { "returnType": "number" }
    },
    "successCallback": {
      "description": "/** Callback to call for the result when successful. */",
      "type": {
        "arguments": { "rowsThisBlock": "any[]", "lastRow": "number" },
        "returnType": "void"
      }
    },
    "failCallback": {
      "description": "/** Callback to call when the request fails. */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "sortModel": {
      "description": "/** If doing server side sorting, contains the sort model */",
      "type": { "returnType": "any" }
    },
    "filterModel": {
      "description": "/** If doing server side filtering, contains the filter model */",
      "type": { "returnType": "any" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "IEventEmitter": {
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async": "boolean",
          "options": "AddEventListenerOptions"
        },
        "returnType": "void"
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async": "boolean",
          "options": "AddEventListenerOptions"
        },
        "returnType": "void"
      }
    }
  },
  "ExcelStyle": {
    "id": { "type": { "returnType": "string" } },
    "alignment": { "type": { "returnType": "ExcelAlignment" } },
    "borders": { "type": { "returnType": "ExcelBorders" } },
    "dataType": { "type": { "returnType": "ExcelDataType" } },
    "font": { "type": { "returnType": "ExcelFont" } },
    "interior": { "type": { "returnType": "ExcelInterior" } },
    "numberFormat": { "type": { "returnType": "ExcelNumberFormat" } },
    "protection": { "type": { "returnType": "ExcelProtection" } },
    "name": {
      "description": "/** @deprecated Legacy property\n */",
      "type": { "returnType": "string" }
    }
  },
  "ExcelAlignment": {
    "horizontal": {
      "type": {
        "returnType": "'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed'"
      }
    },
    "indent": { "type": { "returnType": "number" } },
    "readingOrder": {
      "type": { "returnType": "'RightToLeft' | 'LeftToRight' | 'Context'" }
    },
    "rotate": { "type": { "returnType": "number" } },
    "shrinkToFit": { "type": { "returnType": "boolean" } },
    "vertical": {
      "type": {
        "returnType": "'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed'"
      }
    },
    "wrapText": { "type": { "returnType": "boolean" } },
    "verticalText": {
      "description": "/** @deprecated Legacy property\n */",
      "type": { "returnType": "boolean" }
    }
  },
  "ExcelBorders": {
    "borderBottom": { "type": { "returnType": "ExcelBorder" } },
    "borderLeft": { "type": { "returnType": "ExcelBorder" } },
    "borderRight": { "type": { "returnType": "ExcelBorder" } },
    "borderTop": { "type": { "returnType": "ExcelBorder" } }
  },
  "ExcelBorder": {
    "color": { "type": { "returnType": "string" } },
    "lineStyle": {
      "type": {
        "returnType": "'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double'"
      }
    },
    "weight": { "type": { "returnType": "0 | 1 | 2 | 3" } }
  },
  "ExcelFont": {
    "bold": { "type": { "returnType": "boolean" } },
    "color": { "type": { "returnType": "string" } },
    "family": { "type": { "returnType": "string" } },
    "fontName": { "type": { "returnType": "string" } },
    "italic": { "type": { "returnType": "boolean" } },
    "outline": { "type": { "returnType": "boolean" } },
    "shadow": { "type": { "returnType": "boolean" } },
    "size": { "type": { "returnType": "number" } },
    "strikeThrough": { "type": { "returnType": "boolean" } },
    "underline": { "type": { "returnType": "'Single' | 'Double'" } },
    "verticalAlign": {
      "type": { "returnType": "'Superscript' | 'Subscript'" }
    },
    "charSet": {
      "description": "/** @deprecated Legacy property\n */",
      "type": { "returnType": "number" }
    }
  },
  "ExcelInterior": {
    "color": { "type": { "returnType": "string" } },
    "pattern": {
      "type": {
        "returnType": "'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross'"
      }
    },
    "patternColor": { "type": { "returnType": "string" } }
  },
  "ExcelNumberFormat": { "format": { "type": { "returnType": "string" } } },
  "ExcelProtection": {
    "protected": { "type": { "returnType": "boolean" } },
    "hideFormula": { "type": { "returnType": "boolean" } }
  },
  "ExcelWorksheet": {
    "name": { "type": { "returnType": "string" } },
    "table": { "type": { "returnType": "ExcelTable" } }
  },
  "ExcelTable": {
    "columns": { "type": { "returnType": "ExcelColumn[]" } },
    "rows": { "type": { "returnType": "ExcelRow[]" } }
  },
  "ExcelColumn": {
    "min": { "type": { "returnType": "number" } },
    "max": { "type": { "returnType": "number" } },
    "width": { "type": { "returnType": "number" } },
    "s": { "type": { "returnType": "number" } },
    "hidden": { "type": { "returnType": "boolean" } },
    "bestFit": { "type": { "returnType": "boolean" } }
  },
  "ExcelRow": {
    "index": { "type": { "returnType": "number" } },
    "collapsed": { "type": { "returnType": "boolean" } },
    "hidden": { "type": { "returnType": "boolean" } },
    "height": { "type": { "returnType": "number" } },
    "outlineLevel": { "type": { "returnType": "number" } },
    "s": { "type": { "returnType": "number" } },
    "cells": { "type": { "returnType": "ExcelCell[]" } }
  },
  "ExcelCell": {
    "ref": { "type": { "returnType": "string" } },
    "styleId": { "type": { "returnType": "string" } },
    "data": { "type": { "returnType": "ExcelData" } },
    "mergeAcross": { "type": { "returnType": "number" } }
  },
  "ExcelImage": {
    "id": { "type": { "returnType": "string" } },
    "base64": { "type": { "returnType": "string" } },
    "imageType": { "type": { "returnType": "'jpg' | 'png' | 'gif'" } },
    "altText": { "type": { "returnType": "string" } },
    "fitCell": { "type": { "returnType": "boolean" } },
    "transparency": { "type": { "returnType": "number" } },
    "rotation": { "type": { "returnType": "number" } },
    "recolor": {
      "type": { "returnType": "'Grayscale' | 'Sepia' | 'Washout'" }
    },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "position": {
      "type": {
        "returnType": "{\n        row?: number;\n        rowSpan?: number;\n        column?: number;\n        colSpan?: number;\n        offsetX?: number;\n        offsetY?: number;\n    }"
      }
    }
  },
  "ExcelDataType": {},
  "ExcelOOXMLDataType": {},
  "ExcelData": {
    "type": { "type": { "returnType": "ExcelDataType | ExcelOOXMLDataType" } },
    "value": { "type": { "returnType": "string | null" } }
  },
  "ExcelRelationship": {
    "Id": { "type": { "returnType": "string" } },
    "Type": { "type": { "returnType": "string" } },
    "Target": { "type": { "returnType": "string" } }
  },
  "ExcelContentType": {
    "name": { "type": { "returnType": "'Default' | 'Override'" } },
    "ContentType": { "type": { "returnType": "string" } },
    "Extension": { "type": { "returnType": "string" } },
    "PartName": { "type": { "returnType": "string" } }
  },
  "ExcelXMLTemplate": {
    "getTemplate": {
      "type": {
        "arguments": {
          "styleProperties": "ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell"
        },
        "returnType": "XmlElement"
      }
    }
  },
  "ExcelOOXMLTemplate": {
    "getTemplate": {
      "type": {
        "arguments": {
          "config": "any",
          "idx": "number",
          "currentSheet": "number"
        },
        "returnType": "XmlElement"
      }
    },
    "convertType": {
      "type": { "arguments": { "type": "string" }, "returnType": "string" }
    }
  },
  "ExcelFactoryMode": {},
  "ColumnWidthCallbackParams": {
    "column": { "type": { "returnType": "Column | null" } },
    "index": { "type": { "returnType": "number" } }
  },
  "RowHeightCallbackParams": {
    "rowIndex": { "type": { "returnType": "number" } }
  },
  "ExcelExportParams": {
    "author": { "type": { "returnType": "string" } },
    "autoConvertFormulas": { "type": { "returnType": "boolean" } },
    "columnWidth": {
      "type": {
        "returnType": "number | ((params: ColumnWidthCallbackParams) => number)"
      }
    },
    "exportMode": { "type": { "returnType": "'xlsx' | 'xml'" } },
    "fontSize": { "type": { "returnType": "number" } },
    "headerRowHeight": {
      "type": {
        "returnType": "number | ((params: RowHeightCallbackParams) => number)"
      }
    },
    "rowHeight": {
      "type": {
        "returnType": "number | ((params: RowHeightCallbackParams) => number)"
      }
    },
    "sheetName": { "type": { "returnType": "string" } },
    "margins": { "type": { "returnType": "ExcelSheetMargin" } },
    "pageSetup": { "type": { "returnType": "ExcelSheetPageSetup" } },
    "headerFooterConfig": {
      "type": { "returnType": "ExcelHeaderFooterConfig" }
    },
    "suppressTextAsCDATA": { "type": { "returnType": "boolean" } },
    "addImageToCell": {
      "type": {
        "arguments": {
          "rowIndex": "number",
          "column": "Column",
          "value": "string"
        },
        "returnType": "{ image: ExcelImage; value?: string; } | undefined"
      }
    },
    "prependContent": { "type": { "returnType": "ExcelCell[][]" } },
    "appendContent": { "type": { "returnType": "ExcelCell[][]" } },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n */",
      "type": { "returnType": "ExcelCell[][]" }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n */",
      "type": { "returnType": "ExcelCell[][]" }
    },
    "getCustomContentBelowRow": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "ExcelCell[][] | undefined"
      }
    },
    "allColumns": { "type": { "returnType": "boolean" } },
    "columnKeys": { "type": { "returnType": "(string | Column)[]" } },
    "fileName": { "type": { "returnType": "string" } },
    "onlySelected": { "type": { "returnType": "boolean" } },
    "onlySelectedAllPages": { "type": { "returnType": "boolean" } },
    "skipColumnGroupHeaders": { "type": { "returnType": "boolean" } },
    "skipColumnHeaders": { "type": { "returnType": "boolean" } },
    "skipRowGroups": { "type": { "returnType": "boolean" } },
    "skipPinnedTop": { "type": { "returnType": "boolean" } },
    "skipPinnedBottom": { "type": { "returnType": "boolean" } },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean"
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string"
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string"
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string"
      }
    },
    "columnGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipGroups": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "skipHeader": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    }
  },
  "ExcelExportMultipleSheetParams": {
    "author": { "type": { "returnType": "string" } },
    "data": { "type": { "returnType": "string[]" } },
    "fileName": { "type": { "returnType": "string" } },
    "fontSize": { "type": { "returnType": "number" } }
  },
  "ExcelHeaderFooterConfig": {
    "all": { "type": { "returnType": "ExcelHeaderFooter" } },
    "first": { "type": { "returnType": "ExcelHeaderFooter" } },
    "even": { "type": { "returnType": "ExcelHeaderFooter" } }
  },
  "ExcelHeaderFooter": {
    "header": { "type": { "returnType": "ExcelHeaderFooterContent[]" } },
    "footer": { "type": { "returnType": "ExcelHeaderFooterContent[]" } }
  },
  "ExcelHeaderFooterContent": {
    "value": { "type": { "returnType": "string" } },
    "position": { "type": { "returnType": "'Left' | 'Center' | 'Right'" } },
    "font": { "type": { "returnType": "ExcelFont" } }
  },
  "IExcelCreator": {
    "exportDataAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportParams" },
        "returnType": "void"
      }
    },
    "getDataAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportParams" },
        "returnType": "Blob | string | undefined"
      }
    },
    "getSheetDataForExcel": {
      "type": {
        "arguments": { "params": "ExcelExportParams" },
        "returnType": "string"
      }
    },
    "getMultipleSheetsAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportMultipleSheetParams" },
        "returnType": "Blob | undefined"
      }
    },
    "exportMultipleSheetsAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportMultipleSheetParams" },
        "returnType": "void"
      }
    },
    "setFactoryMode": {
      "description": "/** private methods */",
      "type": {
        "arguments": {
          "factoryMode": "ExcelFactoryMode",
          "exportMode": "'xml' | 'xlsx'"
        },
        "returnType": "void"
      }
    },
    "getFactoryMode": {
      "type": {
        "arguments": { "exportMode": "'xml' | 'xlsx'" },
        "returnType": "ExcelFactoryMode"
      }
    }
  },
  "ExcelSheetMargin": {
    "top": { "type": { "returnType": "number" } },
    "right": { "type": { "returnType": "number" } },
    "bottom": { "type": { "returnType": "number" } },
    "left": { "type": { "returnType": "number" } },
    "header": { "type": { "returnType": "number" } },
    "footer": { "type": { "returnType": "number" } }
  },
  "ExcelSheetPageSetup": {
    "orientation": { "type": { "returnType": "'Portrait' | 'Landscape'" } },
    "pageSize": {
      "type": {
        "returnType": "'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard'"
      }
    }
  },
  "IFilterType": {},
  "IFloatingFilterType": {},
  "IFilterDef": {
    "filter": {
      "description": "/** One of the built in filter names: [set, number, text, date], or a filter function */",
      "type": { "returnType": "IFilterType" }
    },
    "filterFramework": { "type": { "returnType": "any" } },
    "filterParams": {
      "description": "/** The filter params are specific to each filter! */",
      "type": { "returnType": "any" }
    },
    "floatingFilterComponent": {
      "description": "/** The custom component to be used for rendering the floating filter. If none is specified the default AG Grid is used. * */",
      "type": { "returnType": "IFloatingFilterType" }
    },
    "floatingFilterComponentParams": { "type": { "returnType": "any" } },
    "floatingFilterComponentFramework": { "type": { "returnType": "any" } }
  },
  "IFilter": {
    "isFilterActive": {
      "description": "/** This is used to let the grid know if the filter is active or not */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean"
      }
    },
    "getModel": {
      "description": "/** Gets the filter state for storing */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "setModel": {
      "description": "/** Restores the filter state. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>"
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getFrameworkComponentInstance": {
      "description": "/** If using React or Angular 2, returns the underlying component instance, so you can call methods\n * on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": { "arguments": { "model": "any" }, "returnType": "string" }
    }
  },
  "ProvidedFilterModel": {
    "filterType": { "type": { "returnType": "string" } }
  },
  "IFilterComp": {
    "isFilterActive": {
      "description": "/** This is used to let the grid know if the filter is active or not */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean"
      }
    },
    "getModel": {
      "description": "/** Gets the filter state for storing */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "setModel": {
      "description": "/** Restores the filter state. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>"
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getFrameworkComponentInstance": {
      "description": "/** If using React or Angular 2, returns the underlying component instance, so you can call methods\n * on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": { "arguments": { "model": "any" }, "returnType": "string" }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IFilterParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "IDoesFilterPassParams": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": { "type": { "returnType": "any" } }
  },
  "IFilterOptionDef": {
    "displayKey": { "type": { "returnType": "string" } },
    "displayName": { "type": { "returnType": "string" } },
    "test": {
      "type": {
        "arguments": { "filterValue": "any", "cellValue": "any" },
        "returnType": "boolean"
      }
    },
    "hideFilterInput": { "type": { "returnType": "boolean" } }
  },
  "IFilterParams": {
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "Filter": {
    "isFilterActive": {
      "description": "/** This is used to let the grid know if the filter is active or not */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean"
      }
    },
    "getModel": {
      "description": "/** Gets the filter state for storing */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "setModel": {
      "description": "/** Restores the filter state. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>"
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getFrameworkComponentInstance": {
      "description": "/** If using React or Angular 2, returns the underlying component instance, so you can call methods\n * on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": { "arguments": { "model": "any" }, "returnType": "string" }
    }
  },
  "IFiltersToolPanel": {
    "setFilterLayout": {
      "type": { "arguments": { "colDefs": "ColDef[]" }, "returnType": "void" }
    },
    "expandFilterGroups": {
      "type": { "arguments": { "groupIds": "string[]" }, "returnType": "void" }
    },
    "collapseFilterGroups": {
      "type": { "arguments": { "groupIds": "string[]" }, "returnType": "void" }
    },
    "expandFilters": {
      "type": { "arguments": { "colIds": "string[]" }, "returnType": "void" }
    },
    "collapseFilters": {
      "type": { "arguments": { "colIds": "string[]" }, "returnType": "void" }
    },
    "syncLayoutWithGrid": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "IFrameworkOverrides": {
    "setTimeout": {
      "description": "/** Because Angular 2+ uses Zones, you should not use setTimeout or setInterval (as it'll keep angular constantly doing dirty checks etc\n * So to get around this, we allow the framework to specify how to execute setTimeout. The default is to just call the browser setTimeout(). */",
      "type": {
        "arguments": { "action": "any", "timeout": "any" },
        "returnType": "void"
      }
    },
    "setInterval": {
      "type": {
        "arguments": { "action": "any", "interval": "any" },
        "returnType": "AgPromise<number>"
      }
    },
    "addEventListener": {
      "description": "/** Again because Angular uses Zones, we allow adding some events outside of Zone JS so that we do not kick off\n * the Angular change detection. We do this for some events ONLY, and not all events, just events that get fired\n * a lot (eg mouse move), but we need to make sure in AG Grid that we do NOT call any grid callbacks while processing\n * these events, as we will be outside of ZoneJS and hence Angular2 Change Detection won't work. However it's fine\n * for our code to result in AG Grid events (and Angular application action on these) as these go through\n * Event Emitter's.\n * \n * This was done by Niall and Sean. The problematic events are mouseover, mouseout, mouseenter and mouseleave. */",
      "type": {
        "arguments": {
          "element": "HTMLElement",
          "type": "string",
          "listener": "EventListenerOrEventListenerObject",
          "options": "boolean | AddEventListenerOptions"
        },
        "returnType": "void"
      }
    },
    "dispatchEvent": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "() => {}",
          "global": "boolean"
        },
        "returnType": "void"
      }
    },
    "frameworkComponent": {
      "type": { "arguments": { "name": "string" }, "returnType": "any" }
    }
  },
  "IImmutableService": {
    "createTransactionForRowData": {
      "type": {
        "arguments": { "data": "any[]" },
        "returnType": "([RowDataTransaction, { [id: string]: number } | null]) | undefined"
      }
    }
  },
  "IInfiniteRowModel": {
    "setDatasource": {
      "type": {
        "arguments": { "datasource": "IDatasource | undefined" },
        "returnType": "void"
      }
    },
    "refreshCache": { "type": { "arguments": {}, "returnType": "void" } },
    "purgeCache": { "type": { "arguments": {}, "returnType": "void" } },
    "setRowCount": {
      "type": {
        "arguments": { "rowCount": "number", "maxRowFound": "boolean" },
        "returnType": "void"
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number"
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": { "arguments": { "pixel": "number" }, "returnType": "number" }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null"
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]"
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void"
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string" }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean"
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "IMenu": {},
  "IMenuFactory": {
    "showMenuAfterButtonClick": {
      "type": {
        "arguments": {
          "column": "Column | null",
          "eventSource": "HTMLElement",
          "containerType": "ContainerType",
          "defaultTab": "string",
          "restrictToTabs": "string[]"
        },
        "returnType": "void"
      }
    },
    "showMenuAfterMouseEvent": {
      "type": {
        "arguments": {
          "column": "Column",
          "mouseEvent": "MouseEvent | Touch",
          "defaultTab": "string",
          "restrictToTabs": "string[]"
        },
        "returnType": "void"
      }
    },
    "isMenuEnabled": {
      "type": { "arguments": { "column": "Column" }, "returnType": "boolean" }
    },
    "hideActiveMenu": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "Module": {
    "moduleName": { "type": { "returnType": "string" } },
    "beans": { "type": { "returnType": "any[]" } },
    "agStackComponents": { "type": { "returnType": "ComponentMeta[]" } },
    "controllers": { "type": { "returnType": "ControllerMeta[]" } },
    "userComponents": {
      "type": { "returnType": "{componentName: string, componentClass: any}[]" }
    },
    "rowModels": {
      "type": { "returnType": "{[name: string]: { new(): IRowModel }}" }
    },
    "dependantModules": { "type": { "returnType": "Module[]" } }
  },
  "IPopupComponent": {
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the component will appear in a popup, and it will be\n * constrained to the boundaries of the popupParent. This is great if you want to, for example, provide you own\n * custom dropdown list for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "focusIn": {
      "description": "/** Called when focus is within the component */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "focusOut": {
      "description": "/** Called when focus is leaving the component */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "IRangeService": {
    "isEmpty": { "type": { "arguments": {}, "returnType": "boolean" } },
    "removeAllCellRanges": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getCellRangeCount": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "number"
      }
    },
    "isCellInAnyRange": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "boolean"
      }
    },
    "isCellInSpecificRange": {
      "type": {
        "arguments": { "cell": "CellPosition", "range": "CellRange" },
        "returnType": "boolean"
      }
    },
    "isBottomRightCell": {
      "type": {
        "arguments": { "cellRange": "CellRange", "cell": "CellPosition" },
        "returnType": "boolean"
      }
    },
    "isContiguousRange": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "boolean"
      }
    },
    "isMoreThanOneCell": {
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "onDragStart": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void"
      }
    },
    "onDragStop": { "type": { "arguments": {}, "returnType": "void" } },
    "onDragging": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void"
      }
    },
    "getCellRanges": {
      "type": { "arguments": {}, "returnType": "CellRange[]" }
    },
    "setRangeToCell": {
      "type": {
        "arguments": { "cell": "CellPosition", "appendRange": "boolean" },
        "returnType": "void"
      }
    },
    "setCellRange": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "void"
      }
    },
    "addCellRange": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "void"
      }
    },
    "extendLatestRangeInDirection": {
      "type": {
        "arguments": { "key": "number" },
        "returnType": "CellPosition | undefined"
      }
    },
    "extendLatestRangeToCell": {
      "type": { "arguments": { "cell": "CellPosition" }, "returnType": "void" }
    },
    "updateRangeEnd": {
      "type": {
        "arguments": {
          "cellRange": "CellRange",
          "cellPosition": "CellPosition",
          "silent": "boolean"
        },
        "returnType": "void"
      }
    },
    "getRangeStartRow": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "RowPosition"
      }
    },
    "getRangeEndRow": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "RowPosition"
      }
    },
    "createCellRangeFromCellRangeParams": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "CellRange | undefined"
      }
    },
    "setCellRanges": {
      "type": {
        "arguments": { "cellRanges": "CellRange[]" },
        "returnType": "void"
      }
    }
  },
  "ISelectionHandle": {
    "getGui": { "type": { "arguments": {}, "returnType": "HTMLElement" } },
    "getType": {
      "type": { "arguments": {}, "returnType": "SelectionHandleType" }
    },
    "refresh": {
      "type": { "arguments": { "cellCtrl": "CellCtrl" }, "returnType": "void" }
    }
  },
  "ISelectionHandleFactory": {
    "createSelectionHandle": {
      "type": {
        "arguments": { "type": "SelectionHandleType" },
        "returnType": "ISelectionHandle"
      }
    }
  },
  "SelectionHandleType": {},
  "CellRangeType": {},
  "CellRange": {
    "id": { "type": { "returnType": "string" } },
    "type": { "type": { "returnType": "CellRangeType" } },
    "startRow": { "type": { "returnType": "RowPosition" } },
    "endRow": { "type": { "returnType": "RowPosition" } },
    "columns": { "type": { "returnType": "Column[]" } },
    "startColumn": { "type": { "returnType": "Column" } }
  },
  "CellRangeParams": {
    "rowStartIndex": { "type": { "returnType": "number | null" } },
    "rowStartPinned": { "type": { "returnType": "string | null" } },
    "rowEndIndex": { "type": { "returnType": "number | null" } },
    "rowEndPinned": { "type": { "returnType": "string | null" } },
    "columnStart": { "type": { "returnType": "string | Column" } },
    "columnEnd": { "type": { "returnType": "string | Column" } },
    "columns": { "type": { "returnType": "(string | Column)[]" } }
  },
  "RangeSelection": {
    "start": { "type": { "returnType": "CellPosition" } },
    "end": { "type": { "returnType": "CellPosition" } },
    "columns": { "type": { "returnType": "Column[] | null" } }
  },
  "AddRangeSelectionParams": {
    "rowStart": { "type": { "returnType": "number" } },
    "floatingStart": { "type": { "returnType": "string" } },
    "rowEnd": { "type": { "returnType": "number" } },
    "floatingEnd": { "type": { "returnType": "string" } },
    "columnStart": { "type": { "returnType": "string | Column" } },
    "columnEnd": { "type": { "returnType": "string | Column" } }
  },
  "CellValue": {},
  "IRichCellEditorParams": {
    "values": { "type": { "returnType": "CellValue[]" } },
    "cellHeight": { "type": { "returnType": "number" } },
    "cellRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp } | ICellRendererFunc | string"
      }
    },
    "searchDebounceDelay": { "type": { "returnType": "number" } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any" }
    },
    "keyPress": {
      "description": "/** Key code of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "number | null" }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null" }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef" }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean" }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any" }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any" }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void"
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property enterMovesDownAfterEdit=true */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit": "boolean" },
        "returnType": "void"
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement" }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's colDef.valueParser */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's colDef.valueFormatter */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    }
  },
  "RowBounds": {
    "rowTop": { "type": { "returnType": "number" } },
    "rowHeight": { "type": { "returnType": "number" } },
    "rowIndex": { "type": { "returnType": "number" } }
  },
  "IRowModel": {
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number"
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": { "arguments": { "pixel": "number" }, "returnType": "number" }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null"
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]"
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void"
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string" }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean"
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "IRowNodeBlock": {
    "getDisplayIndexStart": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getDisplayIndexEnd": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getLastAccessed": { "type": { "arguments": {}, "returnType": "number" } },
    "getState": { "type": { "arguments": {}, "returnType": "string" } },
    "isAnyNodeOpen": {
      "type": { "arguments": { "rowCount": "number" }, "returnType": "boolean" }
    },
    "getBlockNumber": { "type": { "arguments": {}, "returnType": "number" } },
    "forEachNodeDeep": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence": "NumberSequence",
          "rowCount": "number"
        },
        "returnType": "void"
      }
    },
    "forEachNodeShallow": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence": "NumberSequence",
          "rowCount": "number"
        },
        "returnType": "void"
      }
    },
    "load": { "type": { "arguments": {}, "returnType": "void" } },
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async": "boolean",
          "options": "AddEventListenerOptions"
        },
        "returnType": "void"
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async": "boolean",
          "options": "AddEventListenerOptions"
        },
        "returnType": "void"
      }
    }
  },
  "StageExecuteParams": {
    "rowNode": { "type": { "returnType": "RowNode" } },
    "rowNodeTransaction": {
      "type": { "returnType": "RowNodeTransaction | null" }
    },
    "rowNodeTransactions": {
      "type": { "returnType": "RowNodeTransaction[] | null" }
    },
    "rowNodeOrder": { "type": { "returnType": "{[id: string]: number}" } },
    "changedPath": { "type": { "returnType": "ChangedPath" } },
    "afterColumnsChanged": { "type": { "returnType": "boolean" } }
  },
  "IRowNodeStage": {
    "execute": {
      "type": {
        "arguments": { "params": "StageExecuteParams" },
        "returnType": "any"
      }
    }
  },
  "IServerSideGetRowsRequest": {
    "startRow": { "type": { "returnType": "number" } },
    "endRow": { "type": { "returnType": "number" } },
    "rowGroupCols": { "type": { "returnType": "ColumnVO[]" } },
    "valueCols": { "type": { "returnType": "ColumnVO[]" } },
    "pivotCols": { "type": { "returnType": "ColumnVO[]" } },
    "pivotMode": { "type": { "returnType": "boolean" } },
    "groupKeys": { "type": { "returnType": "string[]" } },
    "filterModel": { "type": { "returnType": "any" } },
    "sortModel": { "type": { "returnType": "any" } }
  },
  "IServerSideGetRowsParams": {
    "request": { "type": { "returnType": "IServerSideGetRowsRequest" } },
    "parentNode": { "type": { "returnType": "RowNode" } },
    "successCallback": {
      "type": {
        "arguments": { "rowsThisPage": "any[]", "lastRow": "number" },
        "returnType": "void"
      }
    },
    "success": {
      "type": {
        "arguments": { "params": "LoadSuccessParams" },
        "returnType": "void"
      }
    },
    "failCallback": { "type": { "arguments": {}, "returnType": "void" } },
    "fail": { "type": { "arguments": {}, "returnType": "void" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "IServerSideDatasource": {
    "getRows": {
      "type": {
        "arguments": { "params": "IServerSideGetRowsParams" },
        "returnType": "void"
      }
    },
    "destroy": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "IServerSideRowModel": {
    "refreshStore": {
      "type": {
        "arguments": { "params": "RefreshStoreParams" },
        "returnType": "void"
      }
    },
    "onRowHeightChanged": { "type": { "arguments": {}, "returnType": "void" } },
    "getStoreState": {
      "type": { "arguments": {}, "returnType": "ServerSideStoreState[]" }
    },
    "retryLoads": { "type": { "arguments": {}, "returnType": "void" } },
    "expandAll": {
      "type": { "arguments": { "value": "boolean" }, "returnType": "void" }
    },
    "setDatasource": {
      "type": {
        "arguments": { "datasource": "IServerSideDatasource" },
        "returnType": "void"
      }
    },
    "forEachNodeAfterFilterAndSort": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void"
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number"
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": { "arguments": { "pixel": "number" }, "returnType": "number" }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null"
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]"
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void"
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string" }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean"
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "IServerSideTransactionManager": {
    "applyTransaction": {
      "type": {
        "arguments": { "transaction": "ServerSideTransaction" },
        "returnType": "ServerSideTransactionResult | undefined"
      }
    },
    "applyTransactionAsync": {
      "type": {
        "arguments": {
          "transaction": "ServerSideTransaction",
          "callback": "(res: ServerSideTransactionResult) => void"
        },
        "returnType": "void"
      }
    },
    "flushAsyncTransactions": {
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "RefreshStoreParams": {
    "route": { "type": { "returnType": "string[]" } },
    "purge": { "type": { "returnType": "boolean" } }
  },
  "IServerSideStore": {
    "clearDisplayIndexes": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "getDisplayIndexEnd": {
      "type": { "arguments": {}, "returnType": "number | undefined" }
    },
    "isDisplayIndexInStore": {
      "type": {
        "arguments": { "displayIndex": "number" },
        "returnType": "boolean"
      }
    },
    "setDisplayIndexes": {
      "type": {
        "arguments": {
          "displayIndexSeq": "NumberSequence",
          "nextRowTop": "{ value: number; }"
        },
        "returnType": "void"
      }
    },
    "forEachNodeDeep": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence": "NumberSequence"
        },
        "returnType": "void"
      }
    },
    "forEachNodeDeepAfterFilterAndSort": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence": "NumberSequence"
        },
        "returnType": "void"
      }
    },
    "retryLoads": { "type": { "arguments": {}, "returnType": "void" } },
    "getRowUsingDisplayIndex": {
      "type": {
        "arguments": {
          "displayRowIndex": "number",
          "dontCreateBlock": "boolean"
        },
        "returnType": "RowNode | undefined"
      }
    },
    "getRowBounds": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null"
      }
    },
    "isPixelInRange": {
      "type": { "arguments": { "pixel": "number" }, "returnType": "boolean" }
    },
    "getRowIndexAtPixel": {
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number | null"
      }
    },
    "getChildStore": {
      "type": {
        "arguments": { "keys": "string[]" },
        "returnType": "IServerSideStore | null"
      }
    },
    "refreshAfterSort": {
      "type": {
        "arguments": { "params": "StoreRefreshAfterParams" },
        "returnType": "void"
      }
    },
    "refreshAfterFilter": {
      "type": {
        "arguments": { "params": "StoreRefreshAfterParams" },
        "returnType": "void"
      }
    },
    "applyTransaction": {
      "type": {
        "arguments": { "transaction": "ServerSideTransaction" },
        "returnType": "ServerSideTransactionResult"
      }
    },
    "refreshStore": {
      "type": { "arguments": { "purge": "boolean" }, "returnType": "void" }
    },
    "getRowCount": { "type": { "arguments": {}, "returnType": "number" } },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number"
      }
    },
    "isLastRowIndexKnown": {
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "getRowNodesInRange": {
      "type": {
        "arguments": { "firstInRange": "RowNode", "lastInRange": "RowNode" },
        "returnType": "RowNode[]"
      }
    },
    "addStoreStates": {
      "type": {
        "arguments": { "result": "ServerSideStoreState[]" },
        "returnType": "void"
      }
    }
  },
  "StoreRefreshAfterParams": {
    "valueColChanged": { "type": { "returnType": "boolean" } },
    "secondaryColChanged": { "type": { "returnType": "boolean" } },
    "alwaysReset": { "type": { "returnType": "boolean" } },
    "changedColumns": { "type": { "returnType": "string[]" } }
  },
  "ServerSideStoreState": {
    "type": { "type": { "returnType": "ServerSideStoreType" } },
    "route": { "type": { "returnType": "string[]" } },
    "rowCount": { "type": { "returnType": "number" } },
    "lastRowIndexKnown": { "type": { "returnType": "boolean" } },
    "info": { "type": { "returnType": "any" } },
    "maxBlocksInCache": { "type": { "returnType": "number" } },
    "cacheBlockSize": { "type": { "returnType": "number" } }
  },
  "SetFilterValuesFuncParams": {
    "success": {
      "type": { "arguments": { "values": "string[]" }, "returnType": "void" }
    },
    "colDef": { "type": { "returnType": "ColDef" } }
  },
  "SetFilterValuesFunc": {},
  "SetFilterValues": {},
  "ISetFilterParams": {
    "suppressRemoveEntries": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "values": { "type": { "returnType": "SetFilterValues" } },
    "refreshValuesOnOpen": { "type": { "returnType": "boolean" } },
    "cellHeight": { "type": { "returnType": "number" } },
    "suppressSorting": { "type": { "returnType": "boolean" } },
    "cellRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "suppressMiniFilter": { "type": { "returnType": "boolean" } },
    "applyMiniFilterWhileTyping": { "type": { "returnType": "boolean" } },
    "suppressSelectAll": { "type": { "returnType": "boolean" } },
    "defaultToNothingSelected": { "type": { "returnType": "boolean" } },
    "suppressSyncValuesAfterDataChange": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "comparator": {
      "type": {
        "arguments": { "a": "any", "b": "any" },
        "returnType": "number"
      }
    },
    "textFormatter": {
      "type": { "arguments": { "from": "string" }, "returnType": "string" }
    },
    "valueFormatter": {
      "type": {
        "arguments": { "params": "ValueFormatterParams" },
        "returnType": "string"
      }
    },
    "selectAllOnMiniFilter": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "syncValuesLikeExcel": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "showTooltips": { "type": { "returnType": "boolean" } },
    "excelMode": { "type": { "returnType": "'mac' | 'windows'" } },
    "clearButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "resetButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "applyButton": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "buttons": { "type": { "returnType": "FilterButtonType[]" } },
    "closeOnApply": { "type": { "returnType": "boolean" } },
    "newRowsAction": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "string" }
    },
    "debounceMs": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "column": { "type": { "returnType": "Column" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "rowModel": { "type": { "returnType": "IRowModel" } },
    "filterChangedCallback": {
      "type": {
        "arguments": { "additionalEventAttributes": "any" },
        "returnType": "void"
      }
    },
    "filterModifiedCallback": {
      "type": { "arguments": {}, "returnType": "void" }
    },
    "valueGetter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "any" }
    },
    "doesRowPassOtherFilter": {
      "type": { "arguments": { "rowNode": "RowNode" }, "returnType": "boolean" }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ISideBar": {
    "refresh": { "type": { "arguments": {}, "returnType": "void" } },
    "setDisplayed": {
      "type": { "arguments": { "show": "boolean" }, "returnType": "void" }
    },
    "setSideBarPosition": {
      "type": {
        "arguments": { "position": "'left' | 'right'" },
        "returnType": "void"
      }
    },
    "isToolPanelShowing": {
      "type": { "arguments": {}, "returnType": "boolean" }
    },
    "openToolPanel": {
      "type": { "arguments": { "key": "string" }, "returnType": "void" }
    },
    "getToolPanelInstance": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "IToolPanel | undefined"
      }
    },
    "close": { "type": { "arguments": {}, "returnType": "void" } },
    "openedItem": {
      "type": { "arguments": {}, "returnType": "string | null" }
    },
    "isDisplayed": { "type": { "arguments": {}, "returnType": "boolean" } }
  },
  "ISparklineCellRendererParams": {
    "sparklineOptions": { "type": { "returnType": "SparklineOptions" } },
    "fullWidth": { "type": { "returnType": "boolean" } },
    "pinned": { "type": { "returnType": "string | null" } },
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "data": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "column": { "type": { "returnType": "Column" } },
    "$scope": { "type": { "returnType": "any" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "eGridCell": { "type": { "returnType": "HTMLElement" } },
    "eParentOfValue": { "type": { "returnType": "HTMLElement" } },
    "getValue": { "type": { "arguments": {}, "returnType": "any" } },
    "setValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "void" }
    },
    "formatValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "refreshCell": { "type": { "arguments": {}, "returnType": "void" } },
    "registerRowDragger": {
      "description": "/** registerRowDragger: Function\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels": "number",
          "value": "string",
          "suppressVisibilityChange": "boolean"
        },
        "returnType": "void"
      }
    }
  },
  "SparklineOptions": {},
  "BaseSparklineOptions": {
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "number[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "title": { "type": { "returnType": "string" } },
    "padding": { "type": { "returnType": "Padding" } },
    "axis": { "type": { "returnType": "SparklineAxisOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightStyle" } }
  },
  "LineSparklineOptions": {
    "type": { "type": { "returnType": "'line'" } },
    "line": { "type": { "returnType": "SparklineLine" } },
    "marker": { "type": { "returnType": "SparklineMarker" } },
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "number[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "title": { "type": { "returnType": "string" } },
    "padding": { "type": { "returnType": "Padding" } },
    "axis": { "type": { "returnType": "SparklineAxisOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightStyle" } }
  },
  "AreaSparklineOptions": {
    "type": { "type": { "returnType": "'area'" } },
    "fill": { "type": { "returnType": "string" } },
    "line": { "type": { "returnType": "SparklineLine" } },
    "marker": { "type": { "returnType": "SparklineMarker" } },
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "number[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "title": { "type": { "returnType": "string" } },
    "padding": { "type": { "returnType": "Padding" } },
    "axis": { "type": { "returnType": "SparklineAxisOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightStyle" } }
  },
  "ColumnSparklineOptions": {
    "type": { "type": { "returnType": "'column'" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "paddingInner": { "type": { "returnType": "number" } },
    "paddingOuter": { "type": { "returnType": "number" } },
    "formatter": { "type": { "returnType": "SparklineColumnFormatter" } },
    "container": { "type": { "returnType": "HTMLElement" } },
    "data": { "type": { "returnType": "number[]" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "title": { "type": { "returnType": "string" } },
    "padding": { "type": { "returnType": "Padding" } },
    "axis": { "type": { "returnType": "SparklineAxisOptions" } },
    "highlightStyle": { "type": { "returnType": "HighlightStyle" } }
  },
  "Padding": {
    "top": { "type": { "returnType": "number" } },
    "right": { "type": { "returnType": "number" } },
    "bottom": { "type": { "returnType": "number" } },
    "left": { "type": { "returnType": "number" } }
  },
  "SparklineAxisOptions": {
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "SparklineLine": {
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "HighlightStyle": {
    "size": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "SparklineColumnFormatter": {},
  "ColumnFormatterParams": {
    "datum": { "type": { "returnType": "any" } },
    "xValue": { "type": { "returnType": "any" } },
    "yValue": { "type": { "returnType": "any" } },
    "width": { "type": { "returnType": "number" } },
    "height": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "highlighted": { "type": { "returnType": "boolean" } }
  },
  "ColumnFormat": {
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "SparklineMarker": {
    "enabled": { "type": { "returnType": "boolean" } },
    "shape": { "type": { "returnType": "string" } },
    "size": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "formatter": { "type": { "returnType": "SparklineMarkerFormatter" } }
  },
  "SparklineMarkerFormatter": {},
  "MarkerFormatterParams": {
    "datum": { "type": { "returnType": "any" } },
    "xValue": { "type": { "returnType": "any" } },
    "yValue": { "type": { "returnType": "any" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } },
    "size": { "type": { "returnType": "number" } },
    "highlighted": { "type": { "returnType": "boolean" } }
  },
  "MarkerFormat": {
    "enabled": { "type": { "returnType": "boolean" } },
    "size": { "type": { "returnType": "number" } },
    "fill": { "type": { "returnType": "string" } },
    "stroke": { "type": { "returnType": "string" } },
    "strokeWidth": { "type": { "returnType": "number" } }
  },
  "IStatusBarService": {
    "registerStatusPanel": {
      "type": {
        "arguments": { "key": "string", "component": "IStatusPanelComp" },
        "returnType": "void"
      }
    },
    "getStatusPanel": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "IStatusPanelComp"
      }
    }
  },
  "StatusPanelDef": {
    "statusPanel": {
      "type": { "returnType": "{ new(): IStatusPanelComp } | string" }
    },
    "statusPanelFramework": { "type": { "returnType": "any" } },
    "align": { "type": { "returnType": "string" } },
    "key": { "type": { "returnType": "string" } },
    "statusPanelParams": { "type": { "returnType": "any" } }
  },
  "IStatusPanelParams": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "IStatusPanel": {
    "getFrameworkComponentInstance": {
      "description": "/** If using a framework, returns the underlying component instance, so you can call methods\n * on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    }
  },
  "IStatusPanelComp": {
    "getFrameworkComponentInstance": {
      "description": "/** If using a framework, returns the underlying component instance, so you can call methods\n * on it if you want. */",
      "type": { "arguments": {}, "returnType": "any" }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IStatusPanelParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "IToolPanelParams": {
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "IToolPanel": {
    "refresh": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "IToolPanelComp": {
    "refresh": { "type": { "arguments": {}, "returnType": "void" } },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IToolPanelParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "ToolPanelColumnCompParams": {
    "suppressColumnMove": { "type": { "returnType": "boolean" } },
    "suppressRowGroups": { "type": { "returnType": "boolean" } },
    "suppressValues": { "type": { "returnType": "boolean" } },
    "suppressPivots": { "type": { "returnType": "boolean" } },
    "suppressPivotMode": { "type": { "returnType": "boolean" } },
    "suppressColumnFilter": { "type": { "returnType": "boolean" } },
    "suppressColumnSelectAll": { "type": { "returnType": "boolean" } },
    "suppressColumnExpandAll": { "type": { "returnType": "boolean" } },
    "contractColumnSelection": { "type": { "returnType": "boolean" } },
    "suppressSyncLayoutWithGrid": { "type": { "returnType": "boolean" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } }
  },
  "IPrimaryColsPanel": {
    "getGui": { "type": { "arguments": {}, "returnType": "HTMLElement" } },
    "init": {
      "type": {
        "arguments": {
          "allowDragging": "boolean",
          "params": "ToolPanelColumnCompParams",
          "eventType": "ColumnEventType"
        },
        "returnType": "void"
      }
    },
    "onExpandAll": { "type": { "arguments": {}, "returnType": "void" } },
    "onCollapseAll": { "type": { "arguments": {}, "returnType": "void" } },
    "expandGroups": {
      "type": { "arguments": { "groupIds": "string[]" }, "returnType": "void" }
    },
    "collapseGroups": {
      "type": { "arguments": { "groupIds": "string[]" }, "returnType": "void" }
    },
    "setColumnLayout": {
      "type": {
        "arguments": { "colDefs": "(ColDef | ColGroupDef)[]" },
        "returnType": "void"
      }
    },
    "syncLayoutWithGrid": { "type": { "arguments": {}, "returnType": "void" } }
  },
  "IViewportDatasource": {
    "init": {
      "description": "/** Gets called exactly once before viewPort is used. Passes methods to be used to tell viewPort of data loads / changes. */",
      "type": {
        "arguments": { "params": "IViewportDatasourceParams" },
        "returnType": "void"
      }
    },
    "setViewportRange": {
      "description": "/** Tell the viewport what the scroll position of the grid is, so it knows what rows it has to get */",
      "type": {
        "arguments": { "firstRow": "number", "lastRow": "number" },
        "returnType": "void"
      }
    },
    "destroy": {
      "description": "/** Gets called once when viewPort is no longer used. If you need to do any cleanup, do it here. */",
      "type": { "arguments": {}, "returnType": "void" }
    }
  },
  "IViewportDatasourceParams": {
    "setRowCount": {
      "description": "/** datasource calls this method when the total row count changes. This in turn sets the height of the grids vertical scroll. */",
      "type": {
        "arguments": { "count": "number", "keepRenderedRows": "boolean" },
        "returnType": "void"
      }
    },
    "setRowData": {
      "description": "/** datasource calls this when new data arrives. The grid then updates the provided rows. The rows are mapped [rowIndex]=>rowData]. */",
      "type": {
        "arguments": { "rowData": "{ [key: number]: any; }" },
        "returnType": "void"
      }
    },
    "getRow": {
      "description": "/** datasource calls this when it wants a row node - typically used when it wants to update the row node */",
      "type": { "arguments": { "rowIndex": "number" }, "returnType": "RowNode" }
    }
  },
  "XmlElement": {
    "name": { "type": { "returnType": "string" } },
    "properties": { "type": { "returnType": "XmlAttributes" } },
    "children": { "type": { "returnType": "XmlElement[]" } },
    "textNode": { "type": { "returnType": "string | null" } }
  },
  "HeaderElement": {
    "version": { "type": { "returnType": "string" } },
    "standalone": { "type": { "returnType": "string" } },
    "encoding": { "type": { "returnType": "string" } }
  },
  "XmlAttributes": {
    "prefixedAttributes": {
      "type": { "returnType": "PrefixedXmlAttributes[]" }
    },
    "rawMap": { "type": { "returnType": "any" } }
  },
  "PrefixedXmlAttributes": {
    "prefix": { "type": { "returnType": "string" } },
    "map": { "type": { "returnType": "any" } }
  },
  "IDetailCellRenderer": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void"
      }
    },
    "addOrRemoveDetailGridCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setDetailGrid": {
      "type": {
        "arguments": { "gridOptions": "GridOptions" },
        "returnType": "void"
      }
    },
    "setRowData": {
      "type": { "arguments": { "rowData": "any[]" }, "returnType": "void" }
    }
  },
  "IDetailCellRendererParams": {
    "detailGridOptions": { "type": { "returnType": "GridOptions" } },
    "getDetailRowData": { "type": { "returnType": "GetDetailRowData" } },
    "refreshStrategy": {
      "type": { "returnType": "'rows' | 'everything' | 'nothing'" }
    },
    "agGridReact": { "type": { "returnType": "any" } },
    "frameworkComponentWrapper": { "type": { "returnType": "any" } },
    "$compile": { "type": { "returnType": "any" } },
    "pinned": { "type": { "returnType": "string | null" } },
    "template": { "type": { "returnType": "string | TemplateFunc" } },
    "autoHeight": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "suppressRefresh": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "boolean" }
    },
    "fullWidth": { "type": { "returnType": "boolean" } },
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "data": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "column": { "type": { "returnType": "Column" } },
    "$scope": { "type": { "returnType": "any" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "eGridCell": { "type": { "returnType": "HTMLElement" } },
    "eParentOfValue": { "type": { "returnType": "HTMLElement" } },
    "getValue": { "type": { "arguments": {}, "returnType": "any" } },
    "setValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "void" }
    },
    "formatValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "refreshCell": { "type": { "arguments": {}, "returnType": "void" } },
    "registerRowDragger": {
      "description": "/** registerRowDragger: Function\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels": "number",
          "value": "string",
          "suppressVisibilityChange": "boolean"
        },
        "returnType": "void"
      }
    }
  },
  "GetDetailRowData": {},
  "GetDetailRowDataParams": {
    "node": { "type": { "returnType": "RowNode" } },
    "data": { "type": { "returnType": "any" } },
    "successCallback": {
      "type": { "arguments": { "rowData": "any[]" }, "returnType": "void" }
    }
  },
  "TemplateFunc": {},
  "IDetailCellRendererCtrl": {
    "init": {
      "type": {
        "arguments": {
          "comp": "IDetailCellRenderer",
          "params": "IDetailCellRendererParams"
        },
        "returnType": "void"
      }
    },
    "registerDetailWithMaster": {
      "type": {
        "arguments": { "api": "GridApi", "columnApi": "ColumnApi" },
        "returnType": "void"
      }
    },
    "refresh": { "type": { "arguments": {}, "returnType": "boolean" } }
  },
  "RowDataTransaction": {
    "addIndex": { "type": { "returnType": "number | null" } },
    "add": { "type": { "returnType": "any[] | null" } },
    "remove": { "type": { "returnType": "any[] | null" } },
    "update": { "type": { "returnType": "any[] | null" } }
  },
  "RowNodeTransaction": {
    "add": { "type": { "returnType": "RowNode[]" } },
    "remove": { "type": { "returnType": "RowNode[]" } },
    "update": { "type": { "returnType": "RowNode[]" } }
  },
  "ServerSideTransaction": {
    "route": { "type": { "returnType": "string[]" } },
    "addIndex": { "type": { "returnType": "number" } },
    "add": { "type": { "returnType": "any[]" } },
    "remove": { "type": { "returnType": "any[]" } },
    "update": { "type": { "returnType": "any[]" } }
  },
  "ServerSideTransactionResult": {
    "status": { "type": { "returnType": "ServerSideTransactionResultStatus" } },
    "add": { "type": { "returnType": "RowNode[]" } },
    "remove": { "type": { "returnType": "RowNode[]" } },
    "update": { "type": { "returnType": "RowNode[]" } }
  },
  "ServerSideTransactionResultStatus": {},
  "TabbedLayoutParams": {
    "items": { "type": { "returnType": "TabbedItem[]" } },
    "cssClass": { "type": { "returnType": "string" } },
    "onItemClicked": { "type": { "returnType": "Function" } },
    "onActiveItemClicked": { "type": { "returnType": "Function" } }
  },
  "TabbedItem": {
    "title": { "type": { "returnType": "Element" } },
    "titleLabel": { "type": { "returnType": "string" } },
    "bodyPromise": { "type": { "returnType": "AgPromise<HTMLElement>" } },
    "name": { "type": { "returnType": "string" } },
    "afterAttachedCallback": {
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    }
  },
  "TabbedItemWrapper": {
    "tabbedItem": { "type": { "returnType": "TabbedItem" } },
    "eHeaderButton": { "type": { "returnType": "HTMLElement" } }
  },
  "TaskItem": {
    "task": { "type": { "arguments": {}, "returnType": "void" } },
    "index": { "type": { "returnType": "number" } },
    "createOrder": { "type": { "returnType": "number" } }
  },
  "TaskList": {
    "list": { "type": { "returnType": "TaskItem[]" } },
    "sorted": { "type": { "returnType": "boolean" } }
  },
  "SimpleHttpRequestParams": { "url": { "type": { "returnType": "string" } } },
  "ModuleNames": {},
  "ICellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setUserStyles": {
      "type": { "arguments": { "styles": "any" }, "returnType": "void" }
    },
    "setAriaSelected": {
      "type": {
        "arguments": { "selected": "boolean | undefined" },
        "returnType": "void"
      }
    },
    "setAriaExpanded": {
      "type": { "arguments": { "expanded": "boolean" }, "returnType": "void" }
    },
    "getFocusableElement": {
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "setLeft": {
      "type": { "arguments": { "left": "string" }, "returnType": "void" }
    },
    "setWidth": {
      "type": { "arguments": { "width": "string" }, "returnType": "void" }
    },
    "setAriaColIndex": {
      "type": { "arguments": { "index": "number" }, "returnType": "void" }
    },
    "setHeight": {
      "type": { "arguments": { "height": "string" }, "returnType": "void" }
    },
    "setZIndex": {
      "type": { "arguments": { "zIndex": "string" }, "returnType": "void" }
    },
    "setTabIndex": {
      "type": { "arguments": { "tabIndex": "number" }, "returnType": "void" }
    },
    "setRole": {
      "type": { "arguments": { "role": "string" }, "returnType": "void" }
    },
    "setColId": {
      "type": { "arguments": { "colId": "string" }, "returnType": "void" }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void"
      }
    },
    "setUnselectable": {
      "type": { "arguments": { "value": "'on' | null" }, "returnType": "void" }
    },
    "setTransition": {
      "type": {
        "arguments": { "value": "string | undefined" },
        "returnType": "void"
      }
    },
    "setIncludeSelection": {
      "type": { "arguments": { "include": "boolean" }, "returnType": "void" }
    },
    "setIncludeRowDrag": {
      "type": { "arguments": { "include": "boolean" }, "returnType": "void" }
    },
    "setIncludeDndSource": {
      "type": { "arguments": { "include": "boolean" }, "returnType": "void" }
    },
    "setForceWrapper": {
      "type": { "arguments": { "force": "boolean" }, "returnType": "void" }
    },
    "getCellEditor": {
      "type": { "arguments": {}, "returnType": "ICellEditor | null" }
    },
    "getCellRenderer": {
      "type": { "arguments": {}, "returnType": "ICellRenderer | null" }
    },
    "getParentOfValue": {
      "type": { "arguments": {}, "returnType": "HTMLElement | null" }
    },
    "setRenderDetails": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails | undefined",
          "valueToDisplay": "any",
          "forceNewCellRendererInstance": "boolean"
        },
        "returnType": "void"
      }
    },
    "setEditDetails": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails",
          "popup": "boolean",
          "position": "string"
        },
        "returnType": "void"
      }
    }
  },
  "ILargeTextEditorParams": {
    "maxLength": { "type": { "returnType": "number" } },
    "rows": { "type": { "returnType": "number" } },
    "cols": { "type": { "returnType": "number" } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any" }
    },
    "keyPress": {
      "description": "/** Key code of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "number | null" }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null" }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef" }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean" }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any" }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any" }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void"
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property enterMovesDownAfterEdit=true */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit": "boolean" },
        "returnType": "void"
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement" }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's colDef.valueParser */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's colDef.valueFormatter */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    }
  },
  "ISelectCellEditorParams": {
    "values": { "type": { "returnType": "any[]" } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any" }
    },
    "keyPress": {
      "description": "/** Key code of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "number | null" }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null" }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef" }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean" }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any" }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any" }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void"
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property enterMovesDownAfterEdit=true */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit": "boolean" },
        "returnType": "void"
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement" }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's colDef.valueParser */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's colDef.valueFormatter */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    }
  },
  "ITextCellEditorParams": {
    "useFormatter": { "type": { "returnType": "boolean" } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any" }
    },
    "keyPress": {
      "description": "/** Key code of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "number | null" }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null" }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column" }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef" }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode" }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any" }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number" }
    },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean" }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any" }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any" }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void"
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property enterMovesDownAfterEdit=true */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit": "boolean" },
        "returnType": "void"
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement" }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's colDef.valueParser */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's colDef.valueFormatter */",
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    }
  },
  "IGroupCellRenderer": {
    "setInnerRenderer": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails | undefined",
          "valueToDisplay": "any"
        },
        "returnType": "void"
      }
    },
    "setChildCount": {
      "type": { "arguments": { "count": "string" }, "returnType": "void" }
    },
    "setCheckboxVisible": {
      "type": { "arguments": { "value": "boolean" }, "returnType": "void" }
    },
    "setExpandedDisplayed": {
      "type": { "arguments": { "value": "boolean" }, "returnType": "void" }
    },
    "setContractedDisplayed": {
      "type": { "arguments": { "value": "boolean" }, "returnType": "void" }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void"
      }
    }
  },
  "GroupCellRendererParams": {
    "pinned": { "type": { "returnType": "string | null" } },
    "fullWidth": { "type": { "returnType": "boolean" } },
    "suppressPadding": { "type": { "returnType": "boolean" } },
    "suppressDoubleClickExpand": { "type": { "returnType": "boolean" } },
    "suppressEnterExpand": { "type": { "returnType": "boolean" } },
    "footerValueGetter": { "type": { "returnType": "any" } },
    "suppressCount": { "type": { "returnType": "boolean" } },
    "checkbox": { "type": { "returnType": "any" } },
    "rowDrag": { "type": { "returnType": "boolean" } },
    "innerRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
      }
    },
    "innerRendererFramework": { "type": { "returnType": "any" } },
    "innerRendererParams": { "type": { "returnType": "any" } },
    "scope": { "type": { "returnType": "any" } },
    "padding": {
      "description": "/** @deprecated\n */",
      "type": { "returnType": "number" }
    },
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "data": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "column": { "type": { "returnType": "Column" } },
    "$scope": { "type": { "returnType": "any" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "eGridCell": { "type": { "returnType": "HTMLElement" } },
    "eParentOfValue": { "type": { "returnType": "HTMLElement" } },
    "getValue": { "type": { "arguments": {}, "returnType": "any" } },
    "setValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "void" }
    },
    "formatValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "refreshCell": { "type": { "arguments": {}, "returnType": "void" } },
    "registerRowDragger": {
      "description": "/** registerRowDragger: Function\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels": "number",
          "value": "string",
          "suppressVisibilityChange": "boolean"
        },
        "returnType": "void"
      }
    }
  },
  "ICellRendererParams": {
    "fullWidth": { "type": { "returnType": "boolean" } },
    "pinned": { "type": { "returnType": "string | null" } },
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "data": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "column": { "type": { "returnType": "Column" } },
    "$scope": { "type": { "returnType": "any" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "eGridCell": { "type": { "returnType": "HTMLElement" } },
    "eParentOfValue": { "type": { "returnType": "HTMLElement" } },
    "getValue": { "type": { "arguments": {}, "returnType": "any" } },
    "setValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "void" }
    },
    "formatValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "refreshCell": { "type": { "arguments": {}, "returnType": "void" } },
    "registerRowDragger": {
      "description": "/** registerRowDragger: Function\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels": "number",
          "value": "string",
          "suppressVisibilityChange": "boolean"
        },
        "returnType": "void"
      }
    }
  },
  "ISetFilterCellRendererParams": {
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "api": { "type": { "returnType": "GridApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    }
  },
  "ICellRenderer": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n * then the grid will refresh the cell for you. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "boolean"
      }
    }
  },
  "ICellRendererComp": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n * then the grid will refresh the cell for you. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "boolean"
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "ICellRendererFunc": {},
  "ILoadingCellRendererParams": {
    "fullWidth": { "type": { "returnType": "boolean" } },
    "pinned": { "type": { "returnType": "string | null" } },
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "data": { "type": { "returnType": "any" } },
    "node": { "type": { "returnType": "RowNode" } },
    "colDef": { "type": { "returnType": "ColDef" } },
    "column": { "type": { "returnType": "Column" } },
    "$scope": { "type": { "returnType": "any" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any" }
    },
    "eGridCell": { "type": { "returnType": "HTMLElement" } },
    "eParentOfValue": { "type": { "returnType": "HTMLElement" } },
    "getValue": { "type": { "arguments": {}, "returnType": "any" } },
    "setValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "void" }
    },
    "formatValue": {
      "type": { "arguments": { "value": "any" }, "returnType": "any" }
    },
    "refreshCell": { "type": { "arguments": {}, "returnType": "void" } },
    "registerRowDragger": {
      "description": "/** registerRowDragger: Function\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels": "number",
          "value": "string",
          "suppressVisibilityChange": "boolean"
        },
        "returnType": "void"
      }
    }
  },
  "ILoadingCellRenderer": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n * then the grid will refresh the cell for you. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "boolean"
      }
    }
  },
  "IDate": {
    "getDate": {
      "description": "/** Returns the current date represented by this editor */",
      "type": { "arguments": {}, "returnType": "Date | null" }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": { "arguments": { "date": "Date | null" }, "returnType": "void" }
    },
    "setInputPlaceholder": {
      "type": { "arguments": { "placeholder": "string" }, "returnType": "void" }
    },
    "setInputAriaLabel": {
      "type": { "arguments": { "placeholder": "string" }, "returnType": "void" }
    }
  },
  "IDateParams": {
    "onDateChanged": {
      "description": "/** Method for component to tell AG Grid that the date has changed. */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "filterParams": { "type": { "returnType": "IDateFilterParams" } }
  },
  "IDateComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IDateParams" },
        "returnType": "AgPromise<void> | void"
      }
    },
    "getDate": {
      "description": "/** Returns the current date represented by this editor */",
      "type": { "arguments": {}, "returnType": "Date | null" }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": { "arguments": { "date": "Date | null" }, "returnType": "void" }
    },
    "setInputPlaceholder": {
      "type": { "arguments": { "placeholder": "string" }, "returnType": "void" }
    },
    "setInputAriaLabel": {
      "type": { "arguments": { "placeholder": "string" }, "returnType": "void" }
    }
  },
  "PositionableOptions": {
    "popup": { "type": { "returnType": "boolean" } },
    "minWidth": { "type": { "returnType": "number | null" } },
    "width": { "type": { "returnType": "number | string | null" } },
    "minHeight": { "type": { "returnType": "number | null" } },
    "height": { "type": { "returnType": "number | string | null" } },
    "centered": { "type": { "returnType": "boolean | null" } },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n * In that case, the feature will configured as `popup=false` but the offsetParent\n * needs to be the popupParent. */",
      "type": { "returnType": "boolean" }
    },
    "x": { "type": { "returnType": "number | null" } },
    "y": { "type": { "returnType": "number | null" } }
  },
  "ResizableSides": {},
  "ResizableStructure": {},
  "MappedResizer": {
    "element": { "type": { "returnType": "HTMLElement" } },
    "dragSource": { "type": { "returnType": "DragListenerParams" } }
  },
  "ILoadingOverlayParams": { "api": { "type": { "returnType": "GridApi" } } },
  "ILoadingOverlayComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "ILoadingOverlayParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "INoRowsOverlayParams": { "api": { "type": { "returnType": "GridApi" } } },
  "INoRowsOverlayComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "INoRowsOverlayParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "LoadingType": {},
  "RowCssClassCalculatorParams": {
    "rowNode": { "type": { "returnType": "RowNode" } },
    "rowIsEven": { "type": { "returnType": "boolean" } },
    "rowLevel": { "type": { "returnType": "number" } },
    "fullWidthRow": { "type": { "returnType": "boolean" } },
    "firstRowOnPage": { "type": { "returnType": "boolean" } },
    "lastRowOnPage": { "type": { "returnType": "boolean" } },
    "printLayout": { "type": { "returnType": "boolean" } },
    "expandable": { "type": { "returnType": "boolean" } },
    "pinned": { "type": { "returnType": "string | null" } },
    "extraCssClass": { "type": { "returnType": "string" } },
    "rowFocused": { "type": { "returnType": "boolean" } },
    "fadeRowIn": { "type": { "returnType": "boolean" } },
    "scope": { "type": { "returnType": "any" } }
  },
  "RowType": {},
  "IRowComp": {
    "setDisplay": {
      "type": { "arguments": { "value": "string" }, "returnType": "void" }
    },
    "setDomOrder": {
      "type": { "arguments": { "domOrder": "boolean" }, "returnType": "void" }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void"
      }
    },
    "setCellCtrls": {
      "type": {
        "arguments": { "cellCtrls": "CellCtrl[]" },
        "returnType": "void"
      }
    },
    "showFullWidth": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void"
      }
    },
    "getFullWidthCellRenderer": {
      "type": {
        "arguments": {},
        "returnType": "ICellRenderer | null | undefined"
      }
    },
    "setAriaExpanded": {
      "type": { "arguments": { "on": "boolean" }, "returnType": "void" }
    },
    "setAriaSelected": {
      "type": {
        "arguments": { "selected": "boolean | undefined" },
        "returnType": "void"
      }
    },
    "setHeight": {
      "type": { "arguments": { "height": "string" }, "returnType": "void" }
    },
    "setTop": {
      "type": { "arguments": { "top": "string" }, "returnType": "void" }
    },
    "setTransform": {
      "type": { "arguments": { "transform": "string" }, "returnType": "void" }
    },
    "setRowIndex": {
      "type": { "arguments": { "rowIndex": "string" }, "returnType": "void" }
    },
    "setAriaRowIndex": {
      "type": { "arguments": { "rowIndex": "number" }, "returnType": "void" }
    },
    "setRowId": {
      "type": { "arguments": { "rowId": "string" }, "returnType": "void" }
    },
    "setRowBusinessKey": {
      "type": { "arguments": { "businessKey": "string" }, "returnType": "void" }
    },
    "setTabIndex": {
      "type": { "arguments": { "tabIndex": "number" }, "returnType": "void" }
    },
    "setAriaLabel": {
      "type": {
        "arguments": { "label": "string | undefined" },
        "returnType": "void"
      }
    },
    "setUserStyles": {
      "type": { "arguments": { "styles": "any" }, "returnType": "void" }
    },
    "setRole": {
      "type": { "arguments": { "role": "string" }, "returnType": "void" }
    }
  },
  "RowGui": {
    "rowComp": { "type": { "returnType": "IRowComp" } },
    "element": { "type": { "returnType": "HTMLElement" } },
    "pinned": { "type": { "returnType": "string | null" } }
  },
  "CellCtrlListAndMap": {
    "list": { "type": { "returnType": "CellCtrl[]" } },
    "map": { "type": { "returnType": "{[key: string]: CellCtrl}" } }
  },
  "IRowDragItem": {
    "defaultTextValue": { "type": { "returnType": "string" } },
    "rowNode": {
      "description": "/** When dragging a row, this contains the row node being dragged\n * When dragging multiple rows, this contains the row that started the drag. */",
      "type": { "returnType": "RowNode" }
    },
    "rowNodes": {
      "description": "/** When dragging multiple rows, this contains all rows being dragged */",
      "type": { "returnType": "RowNode[]" }
    },
    "columns": {
      "description": "/** When dragging columns, this contains the columns being dragged */",
      "type": { "returnType": "Column[]" }
    },
    "visibleState": {
      "description": "/** When dragging columns, this contains the visible state of the columns */",
      "type": { "returnType": "{ [key: string]: boolean }" }
    }
  },
  "RowCtrlMap": {},
  "RefreshViewParams": {
    "recycleRows": { "type": { "returnType": "boolean" } },
    "animate": { "type": { "returnType": "boolean" } },
    "suppressKeepFocus": { "type": { "returnType": "boolean" } },
    "onlyBody": { "type": { "returnType": "boolean" } },
    "newData": { "type": { "returnType": "boolean" } },
    "newPage": { "type": { "returnType": "boolean" } }
  },
  "ITooltipParams": {
    "location": { "type": { "returnType": "string" } },
    "api": { "type": { "returnType": "GridApi" } },
    "columnApi": { "type": { "returnType": "ColumnApi" } },
    "context": { "type": { "returnType": "any" } },
    "colDef": { "type": { "returnType": "ColDef | ColGroupDef | null" } },
    "column": { "type": { "returnType": "Column | ColumnGroup" } },
    "value": { "type": { "returnType": "any" } },
    "valueFormatted": { "type": { "returnType": "any" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "node": { "type": { "returnType": "RowNode" } },
    "data": { "type": { "returnType": "any" } }
  },
  "ITooltipComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": { "arguments": {}, "returnType": "HTMLElement" }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void" }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "ITooltipParams" },
        "returnType": "AgPromise<void> | void"
      }
    }
  },
  "LoadCompleteEvent": {
    "success": { "type": { "returnType": "boolean" } },
    "block": { "type": { "returnType": "RowNodeBlock" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "LoadSuccessParams": {
    "rowData": { "type": { "returnType": "any[]" } },
    "rowCount": { "type": { "returnType": "number" } },
    "storeInfo": { "type": { "returnType": "any" } }
  },
  "SortOption": {
    "sort": { "type": { "returnType": "string" } },
    "column": { "type": { "returnType": "Column" } }
  },
  "SortedRowNode": {
    "currentPos": { "type": { "returnType": "number" } },
    "rowNode": { "type": { "returnType": "RowNode" } }
  },
  "SortModelItem": {
    "colId": { "type": { "returnType": "string" } },
    "sort": { "type": { "returnType": "string" } }
  },
  "LayoutView": {
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void"
      }
    }
  },
  "LayoutCssClasses": {},
  "UpdateLayoutClassesParams": {
    "autoHeight": { "type": { "returnType": "boolean" } },
    "normal": { "type": { "returnType": "boolean" } },
    "print": { "type": { "returnType": "boolean" } }
  },
  "GenericFunction": {},
  "PickByTypeKeyFilter": { "meta": { "typeParams": ["T", "C"] } },
  "KeysByType": { "meta": { "typeParams": ["T", "C"] } },
  "ValuesByType": { "meta": { "typeParams": ["T", "C"] } },
  "PickByType": { "meta": { "typeParams": ["T", "C"] } },
  "MethodsOf": { "meta": { "typeParams": ["T"] } },
  "InterfaceOf": { "meta": { "typeParams": ["T"] } },
  "PartiallyMockedInterfaceOf": { "meta": { "typeParams": ["T"] } },
  "CellValueChange": {
    "rowPinned": { "type": { "returnType": "string | null" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "columnId": { "type": { "returnType": "string" } },
    "oldValue": { "type": { "returnType": "any" } },
    "newValue": { "type": { "returnType": "any" } }
  },
  "LastFocusedCell": {
    "rowPinned": { "type": { "returnType": "string | null" } },
    "rowIndex": { "type": { "returnType": "number" } },
    "columnId": { "type": { "returnType": "string" } }
  },
  "ColumnSortState": {},
  "PathItem": {
    "rowNode": { "type": { "returnType": "RowNode" } },
    "children": { "type": { "returnType": "PathItem[] | null" } }
  },
  "ResolveAndRejectCallback": { "meta": { "typeParams": ["T"] } },
  "AgPromiseStatus": {},
  "FieldElement": {},
  "IInputField": {
    "value": { "type": { "returnType": "any" } },
    "width": { "type": { "returnType": "number" } },
    "label": { "type": { "returnType": "HTMLElement | string" } },
    "labelWidth": { "type": { "returnType": "number | 'flex'" } },
    "labelSeparator": { "type": { "returnType": "string" } },
    "labelAlignment": { "type": { "returnType": "LabelAlignment" } }
  },
  "LabelAlignment": {},
  "IAgLabel": {
    "label": { "type": { "returnType": "HTMLElement | string" } },
    "labelWidth": { "type": { "returnType": "number | 'flex'" } },
    "labelSeparator": { "type": { "returnType": "string" } },
    "labelAlignment": { "type": { "returnType": "LabelAlignment" } }
  },
  "ChangeEvent": {
    "selected": { "type": { "returnType": "boolean" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ColorPickerConfig": {
    "color": { "type": { "returnType": "string" } },
    "label": { "type": { "returnType": "HTMLElement | string" } },
    "labelWidth": { "type": { "returnType": "number | 'flex'" } },
    "labelSeparator": { "type": { "returnType": "string" } },
    "labelAlignment": { "type": { "returnType": "LabelAlignment" } }
  },
  "DialogOptions": {
    "eWrapper": { "type": { "returnType": "HTMLElement" } },
    "modal": { "type": { "returnType": "boolean" } },
    "movable": { "type": { "returnType": "boolean" } },
    "alwaysOnTop": { "type": { "returnType": "boolean" } },
    "maximizable": { "type": { "returnType": "boolean" } },
    "component": { "type": { "returnType": "Component" } },
    "hideTitleBar": { "type": { "returnType": "boolean | null" } },
    "closable": { "type": { "returnType": "boolean | null" } },
    "resizable": { "type": { "returnType": "boolean | ResizableStructure" } },
    "title": { "type": { "returnType": "string | null" } },
    "cssIdentifier": { "type": { "returnType": "string | null" } },
    "popup": { "type": { "returnType": "boolean" } },
    "minWidth": { "type": { "returnType": "number | null" } },
    "width": { "type": { "returnType": "number | string | null" } },
    "minHeight": { "type": { "returnType": "number | null" } },
    "height": { "type": { "returnType": "number | string | null" } },
    "centered": { "type": { "returnType": "boolean | null" } },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n * In that case, the feature will configured as `popup=false` but the offsetParent\n * needs to be the popupParent. */",
      "type": { "returnType": "boolean" }
    },
    "x": { "type": { "returnType": "number | null" } },
    "y": { "type": { "returnType": "number | null" } }
  },
  "GroupItem": {},
  "Align": {},
  "Direction": {},
  "AgGroupComponentParams": {
    "title": { "type": { "returnType": "string" } },
    "enabled": { "type": { "returnType": "boolean" } },
    "suppressEnabledCheckbox": { "type": { "returnType": "boolean" } },
    "suppressOpenCloseIcons": { "type": { "returnType": "boolean" } },
    "cssIdentifier": { "type": { "returnType": "string" } },
    "items": { "type": { "returnType": "GroupItem[]" } },
    "alignItems": { "type": { "returnType": "Align" } },
    "direction": { "type": { "returnType": "Direction" } }
  },
  "IInputRange": {
    "min": { "type": { "returnType": "number" } },
    "max": { "type": { "returnType": "number" } },
    "step": { "type": { "returnType": "number" } },
    "value": { "type": { "returnType": "any" } },
    "width": { "type": { "returnType": "number" } },
    "label": { "type": { "returnType": "HTMLElement | string" } },
    "labelWidth": { "type": { "returnType": "number | 'flex'" } },
    "labelSeparator": { "type": { "returnType": "string" } },
    "labelAlignment": { "type": { "returnType": "LabelAlignment" } }
  },
  "ITextInputField": {
    "allowedCharPattern": { "type": { "returnType": "string" } },
    "value": { "type": { "returnType": "any" } },
    "width": { "type": { "returnType": "number" } },
    "label": { "type": { "returnType": "HTMLElement | string" } },
    "labelWidth": { "type": { "returnType": "number | 'flex'" } },
    "labelSeparator": { "type": { "returnType": "string" } },
    "labelAlignment": { "type": { "returnType": "LabelAlignment" } }
  },
  "ListOption": {
    "value": { "type": { "returnType": "string" } },
    "text": { "type": { "returnType": "string" } }
  },
  "PanelOptions": {
    "component": { "type": { "returnType": "Component" } },
    "hideTitleBar": { "type": { "returnType": "boolean | null" } },
    "closable": { "type": { "returnType": "boolean | null" } },
    "resizable": { "type": { "returnType": "boolean | ResizableStructure" } },
    "title": { "type": { "returnType": "string | null" } },
    "cssIdentifier": { "type": { "returnType": "string | null" } },
    "popup": { "type": { "returnType": "boolean" } },
    "minWidth": { "type": { "returnType": "number | null" } },
    "width": { "type": { "returnType": "number | string | null" } },
    "minHeight": { "type": { "returnType": "number | null" } },
    "height": { "type": { "returnType": "number | string | null" } },
    "centered": { "type": { "returnType": "boolean | null" } },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number" }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n * In that case, the feature will configured as `popup=false` but the offsetParent\n * needs to be the popupParent. */",
      "type": { "returnType": "boolean" }
    },
    "x": { "type": { "returnType": "number | null" } },
    "y": { "type": { "returnType": "number | null" } }
  },
  "VisibleChangedEvent": {
    "visible": { "type": { "returnType": "boolean" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "ManagedFocusCallbacks": {
    "shouldStopEventPropagation": {
      "type": { "arguments": { "e": "KeyboardEvent" }, "returnType": "boolean" }
    },
    "onTabKeyDown": {
      "type": { "arguments": { "e": "KeyboardEvent" }, "returnType": "void" }
    },
    "handleKeyDown": {
      "type": { "arguments": { "e": "KeyboardEvent" }, "returnType": "void" }
    },
    "onFocusIn": {
      "type": { "arguments": { "e": "FocusEvent" }, "returnType": "void" }
    },
    "onFocusOut": {
      "type": { "arguments": { "e": "FocusEvent" }, "returnType": "void" }
    }
  },
  "PopupEventParams": {
    "originalMouseEvent": {
      "type": { "returnType": "MouseEvent | Touch | null" }
    },
    "mouseEvent": { "type": { "returnType": "MouseEvent" } },
    "touchEvent": { "type": { "returnType": "TouchEvent" } },
    "keyboardEvent": { "type": { "returnType": "KeyboardEvent" } }
  },
  "AgPopup": {
    "element": { "type": { "returnType": "HTMLElement" } },
    "wrapper": { "type": { "returnType": "HTMLElement" } },
    "hideFunc": { "type": { "arguments": {}, "returnType": "void" } },
    "stopAnchoringPromise": { "type": { "returnType": "AgPromise<Function>" } },
    "instanceId": { "type": { "returnType": "number" } }
  },
  "Rect": {
    "top": { "type": { "returnType": "number" } },
    "left": { "type": { "returnType": "number" } },
    "right": { "type": { "returnType": "number" } },
    "bottom": { "type": { "returnType": "number" } }
  },
  "DIRECTION": {},
  "AddPopupParams": {
    "modal": { "type": { "returnType": "boolean" } },
    "eChild": { "type": { "returnType": "any" } },
    "closeOnEsc": { "type": { "returnType": "boolean" } },
    "closedCallback": {
      "type": {
        "arguments": { "e": "MouseEvent | TouchEvent | KeyboardEvent" },
        "returnType": "void"
      }
    },
    "click": { "type": { "returnType": "MouseEvent | Touch | null" } },
    "alwaysOnTop": { "type": { "returnType": "boolean" } },
    "afterGuiAttached": {
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void"
      }
    },
    "positionCallback": { "type": { "arguments": {}, "returnType": "void" } },
    "anchorToElement": { "type": { "returnType": "HTMLElement" } }
  },
  "AddPopupResult": {
    "hideFunc": { "type": { "arguments": {}, "returnType": "void" } },
    "stopAnchoringPromise": { "type": { "returnType": "AgPromise<Function>" } }
  },
  "ITabGuard": {
    "setTabIndex": {
      "type": { "arguments": { "tabIndex": "string" }, "returnType": "void" }
    }
  },
  "TooltipParentComp": {
    "getTooltipParams": {
      "type": { "arguments": {}, "returnType": "ITooltipParams" }
    },
    "getGui": { "type": { "arguments": {}, "returnType": "HTMLElement" } }
  },
  "TooltipStates": {},
  "TapEvent": {
    "touchStart": { "type": { "returnType": "Touch" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "LongTapEvent": {
    "touchStart": { "type": { "returnType": "Touch" } },
    "touchEvent": { "type": { "returnType": "TouchEvent" } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string" }
    }
  },
  "VirtualListModel": {
    "getRowCount": { "type": { "arguments": {}, "returnType": "number" } },
    "getRow": {
      "type": { "arguments": { "index": "number" }, "returnType": "any" }
    },
    "isRowSelected": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "boolean | undefined"
      }
    }
  }
}
