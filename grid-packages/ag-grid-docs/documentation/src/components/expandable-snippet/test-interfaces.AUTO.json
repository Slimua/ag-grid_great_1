{
    "TypeAliasExample": { "meta": { "isTypeAlias": true }, "type": "'this' | 'that' | 'the-other'" },
    "TestFnBaseArgs": {
        "meta": { "doc": "/** JSDoc for TestFnBaseArgs. */" },
        "type": { "param1": "number", "param2": "string", "param3": "boolean" }
    },
    "TestFnArgs": {
        "meta": { "doc": "/** JSDoc for TestFnArgs. */" },
        "type": { "param4": "TestFnNestedResult", "param1": "number", "param2": "string", "param3": "boolean" }
    },
    "TestFnResult": {
        "meta": { "doc": "/** JSDoc for TestFnResult. */" },
        "type": { "resultPrimitive": "number", "resultObject": "TestFnNestedResult[]" }
    },
    "TestFnNestedResult": {
        "meta": { "doc": "/** JSDoc for TestFnNestedResult. */" },
        "type": { "primitiveNumber": "number", "primitiveString": "number" }
    },
    "TestUnionBaseElement": {
        "meta": { "doc": "/** JSDoc for TestUnionBaseElement. */" },
        "type": { "parentProperty": "string" }
    },
    "TestUnionElement1": {
        "meta": { "doc": "/** JSDoc for TestUnionElement1. */" },
        "type": {
            "type": "'union-element-1'",
            "property": "string",
            "nestedProperty": "TestFnResult",
            "parentProperty": "string"
        }
    },
    "TestUnionElement2": {
        "meta": { "doc": "/** JSDoc for TestUnionElement2. */" },
        "type": {
            "type": "'union-element-2'",
            "property": "string",
            "nestedProperty": "TestFnResult",
            "parentProperty": "string"
        }
    },
    "TestUnionElement3": {
        "meta": { "doc": "/** JSDoc for TestUnionElement3. */" },
        "type": {
            "type": "'union-element-3'",
            "property": "string",
            "nestedProperty": "TestFnResult",
            "parentProperty": "string"
        }
    },
    "TestTypeUnion": {
        "meta": { "isTypeAlias": true },
        "type": "TestUnionElement1 | TestUnionElement2 | TestUnionElement3"
    },
    "TestOmitExtension": {
        "meta": { "doc": "/** JSDoc for TestOmitExtension. */" },
        "type": {
            "concreteProperty": "string",
            "param4": "TestFnNestedResult",
            "param2": "string",
            "param3": "boolean",
            "resultPrimitive": "number",
            "resultObject": "TestFnNestedResult[]",
            "param1": "number"
        }
    },
    "ExpandableSnippetTestInterface": {
        "meta": { "doc": "/** JSDocs for ExpandableSnippetTestInterface. */" },
        "type": {
            "primitiveString": "string",
            "primitiveNumber": "number",
            "primitiveBoolean": "boolean",
            "primitiveOptional?": "string",
            "simpleAlias": "TypeAliasExample",
            "primitiveArray": "string[][]",
            "objectArray": "TestFnResult[]",
            "typeUnion?": "TestTypeUnion",
            "typeUnionArray": "TestTypeUnion[]",
            "simpleFn": "(a: number, b: string, c: boolean) => number",
            "complexFn": "(test: TestFnArgs) => TestFnResult",
            "simpleOmit?": "Omit<TestFnResult, 'resultPrimitive'>",
            "complexOmit?": "TestOmitExtension",
            "deprecatedField": "string"
        },
        "docs": {
            "primitiveString": "/** JSDoc for primitiveString. */",
            "primitiveNumber": "/** JSDoc for primitiveNumber. */",
            "primitiveBoolean": "/** JSDoc for primitiveBoolean. */",
            "primitiveOptional?": "/** JSDoc for primitiveOptional. */",
            "simpleAlias": "/** This is a simple alias field. */",
            "primitiveArray": "/** JSDoc for primitiveArray. */",
            "objectArray": "/** JSDoc for objectArray. */",
            "typeUnion?": "/** JSDoc for typeUnion. */",
            "typeUnionArray": "/** JSDoc for typeUnionArray. */",
            "simpleFn": "/** JSDoc for simpleFn. */",
            "complexFn": "/** JSDoc for complexFn. */",
            "simpleOmit?": "/** JSDoc for simpleOmit. */",
            "complexOmit?": "/** JSDoc for complexOmit. */",
            "deprecatedField": "/** This is a deprecated field. @deprecated */"
        }
    },
    "InterfaceLookupMetaType": {
        "meta": { "isTypeAlias": true },
        "type": "string | { parameters: Record<string, string>; returnType: string; }"
    },
    "MetaRecord": {
        "meta": { "isTypeAlias": true },
        "type": "{ description?: string; doc?: string; type?: InterfaceLookupMetaType; typeParams?: string[]; isTypeAlias?: boolean; isRequired?: boolean; default: any; min?: number; max?: number; unit?: string; options?: string[]; suggestions?: string[]; ordering?: { [prop: string]: OrderingPriority; }; }"
    },
    "OrderingPriority": { "meta": { "isTypeAlias": true }, "type": "'high' | 'natural' | 'low'" },
    "InterfaceLookup": {
        "meta": { "isTypeAlias": true },
        "type": "Record<string, { meta: MetaRecord & { [prop: string]: MetaRecord; }; docs: Record<string, string>; type: Record<string, string> | string; }>"
    },
    "CodeLookup": {
        "meta": { "isTypeAlias": true },
        "type": "Record<string, Record<string, { description: string; type: { arguments?: Record<string, string>; returnType: string; optional: boolean; }; }>>"
    },
    "Overrides": {
        "meta": { "isTypeAlias": true },
        "type": "{ _config_: {}; [key: string]: { meta?: MetaRecord; } & Record<string, MetaRecord>; }"
    },
    "JsonPrimitiveProperty": {
        "meta": { "isTypeAlias": true },
        "type": "{ type: 'primitive'; tsType: string; aliasType?: string; options?: string; }"
    },
    "JsonObjectProperty": {
        "meta": { "isTypeAlias": true },
        "type": "{ type: 'nested-object'; tsType: string; model: JsonModel; }"
    },
    "JsonArray": {
        "meta": { "isTypeAlias": true },
        "type": "{ type: 'array'; tsType: string; depth: number; elements: Exclude<JsonProperty, JsonArray>; }"
    },
    "JsonUnionType": {
        "meta": { "isTypeAlias": true },
        "type": "{ type: 'union'; tsType: string; options: Exclude<JsonProperty, JsonUnionType>[]; }"
    },
    "JsonFunction": {
        "meta": {},
        "type": {
            "type": "'function'",
            "tsType": "string",
            "documentation?": "string",
            "parameters": "Record<string, JsonModelProperty>",
            "returnType": "JsonProperty"
        }
    },
    "JsonProperty": {
        "meta": { "isTypeAlias": true },
        "type": "JsonPrimitiveProperty | JsonObjectProperty | JsonArray | JsonUnionType | JsonFunction"
    },
    "JsonModelProperty": {
        "meta": { "isTypeAlias": true },
        "type": "{ deprecated: boolean; required: boolean; documentation?: string; default?: any; meta?: { min?: number; max?: number; step?: number; unit?: string; options?: any[]; suggestions?: any[]; }; desc: JsonProperty; }"
    },
    "JsonModel": {
        "meta": {},
        "type": {
            "type": "'model'",
            "tsType": "string",
            "documentation?": "string",
            "properties": "Record<string, JsonModelProperty>"
        }
    },
    "Config": { "meta": { "isTypeAlias": true }, "type": "{ includeDeprecated: boolean; }" },
    "PropertyClass": {
        "meta": { "isTypeAlias": true },
        "type": "'primitive' | 'nested-object' | 'union-nested-object' | 'union-mixed' | 'alias' | 'unknown' | 'function'"
    },
    "Wrapping": { "meta": { "isTypeAlias": true }, "type": "'none' | 'array'" }
}
