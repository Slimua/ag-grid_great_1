{
    "columns": {
        "meta": {
            "displayName": "Columns"
        },
        "getColumnDefs()": {
            "description": "Returns the current column definitions."
        },
        "sizeColumnsToFit()": {
            "description": "Sets columns to adjust in size to fit the grid horizontally."
        },
        "setColumnDefs(colDefs)": {
            "description": "Call to set new column definitions. The grid will redraw all the column headers, and then redraw all of the rows."
        },
        "setAutoGroupColumnDef(colDef)": {
            "description": "Call to set new auto group column definition. The grid will recreate any auto-group columns if present."
        }
    },
    "data": {
        "meta": {
            "displayName": "Data"
        },
        "setRowData(rows)": {
            "description": "Set rows."
        },
        "applyTransaction(transaction)": {
            "description": "Update row data. Pass a transaction object with lists for <code>add</code>, <code>remove</code> and <code>update</code>."
        },
        "applyTransactionAsync(transaction, callback)": {
            "description": "Same as applyTransaction except executes asynchronous for efficiency."
        },
        "flushAsyncTransactions()": {
            "description": "Executes any remaining grid async transaction, if any are waiting to be executed."
        },
        "setPinnedTopRowData(rowData)<br />setPinnedBottomRowData()<br />getPinnedTopRowCount()<br />getPinnedBottomRowCount()<br />getPinnedTopRow(index)<br />getPinnedBottomRow(index)": {
            "description": "Methods for getting and setting the data and getting the Row Nodes of the pinned rows."
        },
        "getModel()": {
            "description": "Returns the row model inside the table. From here you can see the original rows, rows after filter has been applied, rows after aggregation has been applied, and the final set of 'to be displayed' rows."
        },
        "refreshClientSideRowModel(params)": {
            "description": "Gets the Client-Side Row Model to refresh, executing the grouping, filtering and sorting again."
        },
        "setDatasource(datasource)": {
            "description": "Set new datasource for Infinite Row Model."
        },
        "setServerSideDatasource(datasource)": {
            "description": "Set new datasource for Server-Side Row Model."
        },
        "setViewportDatasource(datasource)": {
            "description": "Set new datasource for Viewport Row Model."
        }
    },
    "rowNodes": {
        "meta": {
            "displayName": "Accessing Row Nodes"
        },
        "getRowNode(id)": {
            "description": "Returns the row node with the given ID. The row node ID is the one you provide with the callback <code>getRowNodeId(data)</code>, otherwise the ID is a number auto generated by the grid when the row data is set."
        },
        "forEachNode(callback(node, index))": {
            "description": "Iterates through each node (row) in the grid and calls the callback for each node. This works similar to the <code>forEach</code> method on a Javascript array. This is called for every node, ignoring any filtering or sorting applied within the grid. If using infinite row model, then gets called for each page loaded in the page cache."
        },
        "forEachNodeAfterFilter(callback(node, index))": {
            "description": "Similar to <code>forEachNode</code>, except skips any filtered out data."
        },
        "forEachNodeAfterFilterAndSort(callback(node, index))": {
            "description": "Similar to <code>forEachNode</code>, except skips any filtered out data and the callbacks are called in the order the rows are displayed in the grid."
        },
        "forEachLeafNode(callback(node, index))": {
            "description": "Similar to <code>forEachNode</code>, except lists all the leaf nodes. This effectively goes through all the data that you provided to the grid before the grid performed any grouping. If using tree data, goes through all the nodes for the data you provided, including nodes that have children, but excluding groups the grid created where gaps were missing in the hierarchy."
        }
    },
    "displayedRows": {
        "meta": {
            "displayName": "Displayed Rows"
        },
        "getDisplayedRowAtIndex(index)": {
            "description": "Returns the displayed <code>rowNode</code> at the given <code>index</code>."
        },
        "getDisplayedRowCount()": {
            "description": "Returns the total number of displayed rows."
        },
        "getFirstDisplayedRow()": {
            "description": "Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer)."
        },
        "getLastDisplayedRow()": {
            "description": "Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer)."
        }
    },
    "masterDetail": {
        "meta": {
            "displayName": "Master Detail"
        },
        "getDetailGridInfo(detailGridId)": {
            "description": "Returns the <code>DetailGridInfo</code> corresponding to the supplied <code>detailGridId</code>.",
            "more": {
                "name": "Master Detail",
                "url": "../javascript-grid-master-detail"
            }
        },
        "forEachDetailGridInfo(callback)": {
            "description": "Iterates through each <code>DetailGridInfo</code> in the grid and calls the supplied callback on each.",
            "more": {
                "name": "Master Detail",
                "url": "../javascript-grid-master-detail"
            }
        }
    },
    "selection": {
        "meta": {
            "displayName": "Selection"
        },
        "selectAll()": {
            "description": "Select all rows (even rows that are not visible due to grouping being enabled and their groups not expanded)."
        },
        "deselectAll()": {
            "description": "Clear all row selections."
        },
        "selectAllFiltered()": {
            "description": "Select all filtered rows."
        },
        "deselectAllFiltered()": {
            "description": "Clear all filtered selections."
        },
        "getSelectedNodes()": {
            "description": "Returns a list of selected nodes. Getting the underlying node (rather than the data) is useful when working with tree / aggregated data, as the node can be traversed."
        },
        "getSelectedRows()": {
            "description": "Returns a list of selected rows (i.e. row data that you provided)."
        },
        "getBestCostNodeSelection()": {
            "description": "Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees. If a group has all its children selected, then the group appears in the result, but not the children. Designed for use with <code>'children'</code> as the group selection type, where groups don't actually appear in the selection normally."
        },
        "getCellRanges()": {
            "description": "Returns the list of selected cell ranges."
        },
        "addCellRange(params)": {
            "description": "Adds to the selected range."
        },
        "clearRangeSelection()": {
            "description": "Clears the selected range."
        },
        "setSuppressRowClickSelection(value)": {
            "description": "Sets the <code>suppressRowClickSelection</code> property."
        }
    },
    "refresh": {
        "meta": {
            "displayName": "Refresh"
        },
        "refreshCells(params)": {
            "description": "Performs change detection on all cells, refreshing cells where required."
        },
        "redrawRows(params)": {
            "description": "Remove a row from the DOM and recreate it again from scratch."
        },
        "refreshHeader()": {
            "description": "Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed."
        },
        "flashCells(params)": {
            "description": "Flash rows, columns or individual cells.",
            "more": {
                "name": "Flashing Cells",
                "url": "../javascript-grid-flashing-cells/"
            }
        }
    },
    "sortFilter": {
        "meta": {
            "displayName": "Sort and Filter"
        },
        "setQuickFilter(quickFilter)": {
            "description": "Pass a quick filter text into ag-Grid for filtering. If using Angular, the grid watches the <code>quickFilterText</code> attribute of the <code>gridOptions</code>. If you won't want to use <code>quickFilterText</code> (i.e. if not using AngularJS) then you can call this method instead to apply a quick filter."
        },
        "isQuickFilterPresent()": {
            "description": "Returns <code>true</code> if the quick filter is set, otherwise <code>false</code>."
        },
        "isColumnFilterPresent()": {
            "description": "Returns <code>true</code> if any column filter is set, otherwise <code>false</code>."
        },
        "isAnyFilterPresent()": {
            "description": "Returns <code>true</code> if any filter is set. This includes quick filter, advanced filter or external filter."
        },
        "getFilterInstance(col, callback)": {
            "description": "Returns the filter component instance for a column. <code>col</code> can be a string field name or a ColDef object (matches on object reference, useful if field names are not unique). For filters that are created asynchronously including React 16+ components, calling this method will return null if the filter has not already been created. If your app uses asynchronous components, use the optional <code>callback</code> function which will be invoked with the filter instance when it is available."
        },
        "getFilterModel()": {
            "description": "Gets the current state of all the advanced filters. Used for saving filter state."
        },
        "setFilterModel(model)": {
            "description": "Sets the state of all the advanced filters. Provide it with what you get from <code>getFilterModel()</code> to restore filter state."
        },
        "onFilterChanged()": {
            "description": "Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs."
        },
        "destroyFilter()": {
            "description": "Destroys a filter. Useful to force a particular filter to be created from scratch again."
        },
        "onSortChanged()": {
            "description": "Gets the grid to act as if the sort was changed. Useful if you update some values and want to get the grid to reorder them according to the new values."
        }
    },
    "navigation": {
        "meta": {
            "displayName": "Navigation"
        },
        "getFocusedCell()": {
            "description": "Returns the focused cell (or the last focused cell if the grid lost focus) as an object containing the <code>rowIndex</code>, <code>column</code> and <code>floating</code> (which can be <code>'top'</code>, <code>'bottom'</code> or <code>null</code>)."
        },
        "setFocusedCell(rowIndex, colKey, floating)": {
            "description": "Sets the focus to the specified cell. Set <code>floating</code> to <code>null</code>, <code>'top'</code>, or <code>'bottom'</code>."
        },
        "clearFocusedCell()": {
            "description": "Clears the focused cell."
        },
        "tabToNextCell()": {
            "description": "Navigates the grid focus to the next cell, as if tabbing."
        },
        "tabToPreviousCell()": {
            "description": "Navigates the grid focus to the previous cell, as if shift-tabbing."
        }
    },
    "editing": {
        "meta": {
            "displayName": "Editing"
        },
        "stopEditing(cancel?)": {
            "description": "If a cell is editing, it stops the editing. Pass <code>true</code> if you want to cancel the editing (i.e. don't accept changes).",
            "more": {
                "name": "Editing API",
                "url": "../javascript-grid-cell-editing/#editing-api"
            }
        },
        "startEditingCell(params)": {
            "description": "Start editing a particular cell.",
            "more": {
                "name": "Editing API",
                "url": "../javascript-grid-cell-editing/#editing-api"
            }
        },
        "getEditingCells()": {
            "description": "If the grid is editing, returns back details of the editing cell(s).",
            "more": {
                "name": "Editing API",
                "url": "../javascript-grid-cell-editing/#editing-api"
            }
        }
    },
    "export": {
        "meta": {
            "displayName": "Export",
            "page": {
                "name": "Export",
                "url": "../javascript-grid-export/"
            }
        },
        "exportDataAsCsv(params)": {
            "description": "Downloads a CSV export of the grid's data."
        },
        "getDataAsCsv(params)": {
            "description": "Similar to <code>exportDataAsCsv</code>, except returns the result as a string rather than download it."
        },
        "exportDataAsExcel(params)": {
            "description": "Downloads an Excel export of the grid's data."
        },
        "getDataAsExcel(params)": {
            "description": "Similar to <code>exportDataAsExcel</code>, except returns the result as a string rather than download it. This forces <code>exportMode</code> to <code>'xml'</code>."
        }
    },
    "events": {
        "meta": {
            "displayName": "Events"
        },
        "addEventListener(eventType, listener)": {
            "description": "Add an event listener for the specified <code>eventType</code>. Works similar to <code>addEventListener</code> for a browser DOM element."
        },
        "addGlobalListener(listener)": {
            "description": "Add an event listener for all event types coming from the grid."
        },
        "removeEventListener(eventType, listener)": {
            "description": "Remove an event listener."
        },
        "removeGlobalListener(listener)": {
            "description": "Remove a global event listener."
        },
        "dispatchEvent(event)": {
            "description": "Dispatch an event through the grid. Useful if you are using a custom <code>cellRenderer</code> and want to fire events such as <code>cellValueChanged</code>."
        }
    },
    "rowGroups": {
        "meta": {
            "displayName": "Row Groups"
        },
        "expandAll()": {
            "description": "Expand all groups."
        },
        "collapseAll()": {
            "description": "Collapse all groups."
        },
        "setRowNodeExpanded(rowNode, expanded)": {
            "description": "Expand or collapse a specific row node."
        },
        "onGroupExpandedOrCollapsed()": {
            "description": "If after getting the model, you expand or collapse a group, call this method to inform the grid. It will work out the final set of 'to be displayed' rows again (i.e. expand or collapse the group visually)."
        }
    },
    "rowDrag": {
        "meta": {
            "displayName": "Row Drag"
        },
        "setSuppressRowDrag(value)": {
            "description": "Sets the <code>suppressRowDrag</code> property."
        },
        "setSuppressMoveWhenRowDragging(value)": {
            "description": "Sets the <code>suppressMoveWhenRowDragging</code> property."
        },
        "addRowDropZone(params)": {
            "description": "Adds a DropZone outside of the Grid where rows can be dropped."
        },
        "removeRowDropZone(params)": {
            "description": "Removes an external DropZone added by addRowDropZone."
        },
        "getRowDropZoneParams()": {
            "description": "Returns the RowDropZoneParams to be used by another grid's addRowDropZone method."
        }
    },
    "rendering": {
        "meta": {
            "displayName": "Rendering"
        },
        "getRenderedNodes()": {
            "description": "Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer."
        },
        "getCellRendererInstances(params)": {
            "description": "Returns the list of active <a href='../javascript-grid-cell-rendering-components/#accessing-cell-renderer-instances'>Cell Renderer Instances</a>."
        },
        "getCellEditorInstances(params)": {
            "description": "Returns the list of active <a href='../javascript-grid-cell-editor/#accessing-cell-editor-instances'>Cell Editor Instances</a>."
        },
        "getSizesForCurrentTheme()": {
            "description": "Gets the sizes that various UI elements will be rendered at with the current theme. Returns an object containing the keys <code>rowHeight</code> and <code>headerHeight</code>. If you override the row or header height using <code>gridOptions</code>, the override value you provided will be returned."
        }
    },
    "scrolling": {
        "meta": {
            "displayName": "Scrolling"
        },
        "setAlwaysShowVerticalScroll(show)": {
            "description": "If <code>true</code>, the vertical scrollbar will always be present even if not required, otherwise it will only be displayed when necessary."
        },
        "ensureIndexVisible(index, position)": {
            "description": "Ensures the row index is visible by vertically scrolling the grid. The valid values for positions are <code>'top' | 'middle' | 'bottom' | undefined | null</code>. If <code>'top'</code>, <code>'middle'</code> or <code>'bottom'</code>, the grid will scroll the row to place the row at the top, middle or bottom respectively. If <code>undefined</code> or <code>null</code> the grid will do the minimum scrolling to show the row, i.e. if the grid needs to scroll up then it will scroll so that the row is at the top, if the grid needs to scroll down then it will scroll so that the row is at the bottom, if the row is already in view then the grid will do nothing."
        },
        "ensureNodeVisible(comparator, position)": {
            "description": "Ensures a node is visible, scrolling the table if needed. Provide one of a) the node b) the data object c) a comparator function (that takes the node as a parameter, and returns <code>true</code> for match or <code>false</code> for no match). The valid values for positions are same as for <code>api.ensureIndexVisible()</code>."
        },
        "ensureColumnVisible(colId)": {
            "description": "Ensures the column is visible, scrolling the table if needed."
        },
        "getHorizontalPixelRange()": {
            "description": "Returns a JSON object with two properties:<ul class='content'><li><code>left</code>: The left pixel position of the current scroll in the grid</li><li><code>right</code>: The right pixel position of the current scroll in the grid</li></ul>"
        },
        "getVerticalPixelRange()": {
            "description": "Returns a JSON object with two properties:<ul class='content'><li><code>top</code>: The top pixel position of the current scroll in the grid</li><li><code>bottom</code>: The bottom pixel position of the current scroll in the grid</li></ul>"
        }
    },
    "infiniteScrolling": {
        "meta": {
            "displayName": "Infinite Scrolling"
        },
        "refreshInfiniteCache()": {
            "description": "Marks all the currently loaded blocks in the cache for reload. If you have 10 blocks in the cache, all 10 will be marked for reload. The old data will continue to be displayed until the new data is loaded."
        },
        "purgeInfiniteCache()": {
            "description": "Purges the cache. The grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2). The grid will display nothing while the new blocks are loaded. Use this to immediately remove the old data from the user."
        },
        "getInfiniteRowCount()": {
            "description": "The row count defines how many rows the grid allows scrolling to."
        },
        "isLastRowIndexKnown()": {
            "description": "Returns <code>true</code> if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll."
        },
        "setRowCount(rowCount, lastRowIndexKnown)": {
            "description": "Sets the <code>rowCount</code> and <code>lastRowIndexKnown</code> properties. The second parameter, <code>lastRowIndexKnown</code>, is optional and if left out, only <code>rowCount</code> is set. Set <code>rowCount</code> to adjust the height of the vertical scroll. Set <code>lastRowIndexKnown</code> to enable / disable searching for more rows. Use this method if you add or remove rows into the dataset and need to reset the number of rows or put the data back into 'look for data' mode."
        },
        "getCacheBlockState()": {
            "description": "Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working."
        }
    },
    "overlays": {
        "meta": {
            "displayName": "Overlays"
        },
        "showLoadingOverlay()": {
            "description": "Show the 'loading' overlay."
        },
        "showNoRowsOverlay()": {
            "description": "Show the 'no rows' overlay."
        },
        "hideOverlay()": {
            "description": "Hides the overlay if showing."
        }
    },
    "clipboard": {
        "meta": {
            "displayName": "Clipboard"
        },
        "copySelectedRangeToClipboard(includeHeaders)": {
            "description": "Copies the selected ranges to the clipboard."
        },
        "copySelectedRangeDown()": {
            "description": "Copies the selected range down, similar to <code>Ctrl&nbsp;+&nbsp;D</code> in Excel."
        }
    },
    "pagination": {
        "meta": {
            "displayName": "Pagination"
        },
        "paginationIsLastPageFound()": {
            "description": "Returns <code>true</code> when the last page is known; this will always be the case if you are using the Client-Side Row Model for pagination. Returns <code>false</code> when the last page is not known; this only happens when using Infinite Scrolling Row Model.</p>"
        },
        "paginationGetPageSize()": {
            "description": "Returns how many rows are being shown per page."
        },
        "paginationSetPageSize(newPageSize)": {
            "description": "Sets the <code>paginationPageSize</code> to <code>newPageSize</code>, then re-paginates the grid so the changes are applied immediately."
        },
        "paginationGetCurrentPage()": {
            "description": "Returns the 0-based index of the page which is showing."
        },
        "paginationGetTotalPages()": {
            "description": "Returns the total number of pages. Returns <code>null</code> if <code>paginationIsLastPageFound() == false</code>."
        },
        "paginationGetRowCount()": {
            "description": "The total number of rows. Returns <code>null</code> if <code>paginationIsLastPageFound() == false</code>."
        },
        "paginationGoToPage(pageNumber)": {
            "description": "Goes to the specified page. If the page requested doesn't exist, it will go to the last page."
        },
        "paginationGoToNextPage()<br />paginationGoToPreviousPage()<br />paginationGoToFirstPage()<br />paginationGoToLastPage()": {
            "description": "Shorthands for <code>goToPage(relevantPageNumber)</code>."
        }
    },
    "headers": {
        "meta": {
            "displayName": "Headers"
        },
        "setHeaderHeight(heightInPx)": {
            "description": "Sets the height in pixels for the row containing the column label header."
        },
        "setGroupHeaderHeight(heightInPx)": {
            "description": "Sets the height in pixels for the rows containing header column groups."
        },
        "setFloatingFiltersHeight(heightInPx)": {
            "description": "Sets the height in pixels for the row containing the floating filters."
        },
        "setPivotHeaderHeight(heightInPx)": {
            "description": "Sets the height in pixels for the row containing the columns when in pivot mode."
        },
        "setPivotGroupHeaderHeight(heightInPx)": {
            "description": "Sets the height in pixels for the row containing header column groups when in pivot mode."
        }
    },
    "statusBar": {
        "meta": {
            "displayName": "Status Bar"
        },
        "getStatusBarComponent(key)": {
            "description": "Returns the status bar component instance for the <code>key</code> provided."
        }
    },
    "UndoRedo": {
        "meta": {
            "displayName": "Undo / Redo"
        },
        "undoCellEditing()": {
            "description": "Undo's last cell edit."
        },
        "redoCellEditing()": {
            "description": "Redo's last cell edit undo."
        },
        "getCurrentUndoSize()": {
            "description": "Returns current number of available cell edit undo's."
        },
        "getCurrentRedoSize()": {
            "description": "Returns current number of available cell edit redo's."
        }
    },
    "charts": {
        "meta": {
            "displayName": "Charts"
        },
        "getChartModels()": {
            "description": "Returns a list of models with information about the charts that are currently rendered from the grid."
        },
        "createRangeChart(params)": {
            "description": "Used to programmatically create charts from a range.",
            "more": {
                "name": "Range Chart API",
                "url": "../javascript-grid-charts-chart-range-api/#range-charts"
            }
        },
        "createPivotChart(params)": {
            "description": "Used to programmatically create pivot charts from a grid.",
            "more": {
                "name": "Pivot Chart API",
                "url": "../javascript-grid-charts-chart-range-api/#pivot-charts"
            }
        }
    },
    "miscellaneous": {
        "meta": {
            "displayName": "Miscellaneous"
        },
        "setPopupParent(element)": {
            "description": "DOM element to use as the <a href='../javascript-grid-context-menu/#popup-parent'>popup parent</a> for grid popups (context menu, column menu etc)."
        },
        "addRenderedRowListener(event, rowIndex, callback)": {
            "description": "Registers a callback to a virtual row. A virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered). Unlike normal events, you do not need to unregister rendered row listeners. When the rendered row is removed from the grid, all associated rendered row listeners will also be removed. Currently supports only one event, <code>virtualRowRemoved</code>; listen for this event if your <code>cellRenderer</code> needs to do cleanup when the row no longer exists."
        },
        "showToolPanel(show)": {
            "description": "Shows (or hides) the tool panel."
        },
        "isToolPanelShowing()": {
            "description": "Returns <code>true</code> if the tool panel is showing, otherwise <code>false</code>."
        },
        "getToolPanelInstance(id)": {
            "description": "Gets the tool panel instance corresponding to the supplied <code>id</code>.",
            "more": {
                "name": "Expand / Collapse Column Groups",
                "url": "../javascript-grid-tool-panel-columns/#expand-collapse-column-groups"
            }
        },
        "doLayout()": {
            "description": "Force the grid to perform a layout of its components. The grid, by default, resizes to fit the <code>div</code> the grid lives in. This is done a) on initialisation b) window resize and c) periodically as defined by <code>layoutInterval</code> (default 500ms). You should call this if something happens in your application where the grid size has changed and you want to lay the grid out without waiting for the next periodic refresh."
        },
        "getValue(colKey, node)": {
            "description": "Gets the value for a column for a particular <code>rowNode</code> (row). This is useful if you want the raw value of a cell e.g. if implementing your own CSV export."
        },
        "destroy()": {
            "description": "Will destroy the grid and release resources. If you are using Angular (version 1 or 2) you do not need to call this, as the grid links in with the AngularJS 1.x lifecycle. However if you are using Web Components or native Javascript, you do need to call this, to avoid a memory leak in your application."
        },
        "showColumnMenuAfterButtonClick(colKey, buttonElement), showColumnMenuAfterMouseClick(colKey, mouseEvent)": {
            "description": "Shows the column menu after and positions it relative to the provided element (button click) or mouse event. Use in conjunction with your own header template."
        },
        "checkGridSize()": {
            "description": "Tells the grid to check its size again. This is useful if you do not have the grid in the DOM when you create it, to call this method after the grid is in the DOM to get it to check its width and height again (which decides which columns and rows to render)."
        },
        "resetRowHeights()": {
            "description": "Tells the grid to recalculate the row heights."
        },
        "onRowHeightChanged()": {
            "description": "Tells the grid a row height has changed. To be used after calling <code>rowNode.setRowHeight(newHeight)</code>."
        },
        "copySelectedRowsToClipboard(includeHeaders, columnKeys)": {
            "description": "Copies the selected rows to the clipboard. Set <code>includeHeaders = true</code> to include the headers (default is <code>false</code>). Set <code>columnKeys</code> to the list of columns if you want just specific columns."
        },
        "addAggFunc(key, aggFunc), addAggFuncs(aggFuncs), clearAggFuncs()": {
            "description": "Adding and clearing of aggregation functions."
        },
        "hidePopupMenu()": {
            "description": "Hides any showing <a href='../javascript-grid-context-menu'>context menu</a> or <a href='../javascript-grid-column-menu'>column menu</a>."
        },
        "setEnableCellTextSelection()": {
            "description": "Sets the <code>enableCellTextSelection</code> property."
        },
        "setGridAutoHeight(value)": {
            "description": "Sets the <code>gridAutoHeight</code> property."
        },
        "isAnimationFrameQueueEmpty()": {
            "description": "Returns <code>true</code> when there are no more animation frames left to process."
        },
        "purgeServerSideCache(route)": {
            "description": "Purges the server-side cache. If you pass no parameters, then the top level cache is purged. To purge a child cache, pass in the string of keys to get to the child cache.",
            "more": {
                "name": "Purging Groups",
                "url": "../javascript-grid-server-side-model-grouping/#purging-groups"
            }
        },
        "setFillHandleDirection(direction)": {
            "description": "Sets the preferred direction for the selection fill handle.",
            "more": {
                "name": "Fill Handle",
                "url": "../javascript-grid-range-selection-fill-handle/"
            }
        }
    }
}
