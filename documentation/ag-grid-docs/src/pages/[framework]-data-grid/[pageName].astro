---
import { getCollection, getEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import { PagesNavigation } from '@features/pages-navigation/components/PagesNavigation';
import { Header } from '@features/docs/components/Header';
import { getFrameworkDisplayText } from '@utils/framework';
import type { Framework, MenuItem, MenuSection } from '@ag-grid-types';
import { getDocsPages } from '@features/docs/utils/pageData';
import { SideNavigation } from '@features/pages-navigation/components/SideNavigation';
import { getFirstParagraphText } from '@utils/markdoc/getFirstParagraphText';
import { DOCS_TAB_ITEM_ID_PREFIX } from '@constants';
import { getFilteredMenuSections } from '@features/pages-navigation/utils/getFilteredMenuSections';
import { getHeadings } from '@utils/markdoc/getHeadings';
import { isApiMenuPath } from '@utils/apiMenuPath';
import styles from '@legacy-design-system/modules/docs.module.scss';
import { getIsDev } from '@utils/env';

export async function getStaticPaths() {
    const pages = await getCollection('docs');
    return getDocsPages(pages);
}

const { page } = Astro.props;
const currentFramework = Astro.params.framework as Framework;
const pageName = Astro.params.pageName as Framework;
const path = Astro.url.pathname;
const { title, enterprise, hideSideMenu, hidePageMenu } = page.data;

const { data: menu } = await getEntry('menu', 'data');
const frameworkMenuSections: MenuSection[] = getFilteredMenuSections({
    menuSections: menu.main.sections,
    framework: currentFramework,
});
const apiMenuSections: MenuSection[] = getFilteredMenuSections({
    menuSections: menu.api.sections,
    framework: currentFramework,
});

const appendSeoToDescription = `Download AG Grid today: The best ${getFrameworkDisplayText(currentFramework)} Data Table in the world.`
const description = page.data.description || `${getFirstParagraphText(page.body)} ${appendSeoToDescription}`;
const isApiPage = isApiMenuPath({
    pageName,
    menuData: menu,
});
const menuSections = isApiPage ? apiMenuSections : frameworkMenuSections;

async function renderPage() {
    try {
        const { Content } = await page.render();

        const headings = await getHeadings({
            title,
            markdocContent: page.body,
            framework: currentFramework,
            getTabItemSlug: (id) => `${DOCS_TAB_ITEM_ID_PREFIX}${id}`,
        });

        return {
            Content,
            headings,
        };
    } catch (error) {
        return {
            error,
        };
    }
}

const { error, Content, headings = [] } = await renderPage();
if (error?.message.includes('Custom Markdoc tags not loaded')) {
    console.warn(error.message);
    const currentPath = `/debug/markdoc-custom-tags?redirect=${Astro.url.pathname}`;
    console.warn(`Redirecting to '${currentPath}', to load Markdoc tags`);
    return Astro.redirect(currentPath);
}
---

{
    getIsDev() && (
        <script>
            // Remove infinite redirects check since if this page renders, there is no longer a need for the redirect
            window.sessionStorage.removeItem('markdocCustomTags:redirect');
        </script>
    )
}

<Layout
    title={`${getFrameworkDisplayText(currentFramework)} Grid: ${title} | AG Grid`}
    description={description}
    showSearchBar={true}
    showDocsNav={true}
>
    <div class:list={[hidePageMenu && styles.noLeftMenu, styles.contentViewport, 'layout-grid']}>
        {
            !hidePageMenu && (
                <PagesNavigation
                    client:load
                    menuSections={menuSections}
                    framework={currentFramework}
                    pageName={pageName}
                />
            )
        }
        <div
            id="doc-content"
            class:list={[
                styles.docPage,
                {
                    noSideMenu: styles.hideSideMenu,
                },
            ]}
        >
            <Header
                client:load
                title={title}
                framework={currentFramework}
                isEnterprise={enterprise}
                path={path}
                menuItems={menuSections as MenuItem[]}
            />

            {/* Wrapping div is a hack to target "intro" section of docs page */}
            <div class={styles.pageSections}>
                <Content framework={currentFramework} page={page} />
            </div>
        </div>

        {!hideSideMenu && <SideNavigation client:load headings={headings} />}
    </div>
</Layout>

<script>
    /**
     * Retain scroll position between page changes
     *
     * Use session storage to store the scroll position and get it on page load
     */
    const SCROLL_POSITION_LOCALSTORAGE_KEY = 'docs-scroll-position';
    // NOTE: Need page nav to be on page on page load (ie, not generated on client side)
    const NAV_SCROLL_CONTAINER_SELECTOR = '#docs-nav-collapser aside';

    window.addEventListener('load', () => {
        const nav = document.querySelector(NAV_SCROLL_CONTAINER_SELECTOR);
        const top = sessionStorage.getItem(SCROLL_POSITION_LOCALSTORAGE_KEY);
        if (nav && top !== null) {
            nav.scrollTop = parseInt(top, 10);
        }

        window.addEventListener('beforeunload', () => {
            if (!nav) {
                return;
            }

            sessionStorage.setItem(SCROLL_POSITION_LOCALSTORAGE_KEY, nav.scrollTop);
        });
    });
</script>
